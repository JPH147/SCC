DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizafechalogueo`(IN `pidusuario` INT)
    MODIFIES SQL DATA
BEGIN
UPDATE usuario SET usr_ultimologueo= NOW() WHERE idusuario = pidusuario;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizaralmacen`(IN `pidalmacen` INT, IN `palm_nombre` VARCHAR(45) CHARSET utf8, IN `palm_descripcion` VARCHAR(45) CHARSET utf8)
    MODIFIES SQL DATA
UPDATE almacen
SET alm_nombre = palm_nombre,
alm_descripcion= palm_descripcion
WHERE idalmacen = pidalmacen$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarafiliacionesatrasadas`()
    NO SQL
begin

	DECLARE idCredito INT;
	DECLARE finished INT unsigned default 0 ;

	DEClARE cursorCredito CURSOR FOR 
    	select
    		creditos.id_credito
		from
        	creditos
		inner join credito_cronograma on
        	creditos.id_credito=credito_cronograma.id_credito
		where
        	creditos.tipo=1
		and
        	creditos.estado = 1
		and
        	credito_cronograma.estado<>3
		group by
        	creditos.id_credito
		having
			max(credito_cronograma.fecha_vencimiento) < CURRENT_DATE() ;
            
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursorCredito;
    
	actualizarCuota:LOOP
		FETCH cursorCredito INTO idCredito;
		IF finished = 1 THEN 
			LEAVE actualizarCuota;
		END IF;
		call sp_actualizarafiliacioncuotasalpresente(idCredito);
	END LOOP;
    
	CLOSE cursorCredito;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcentrotrabajopnp`(IN `pridcentrotrabajo` INT, IN `prdistrito` INT, IN `prcomisaria` TEXT CHARSET utf8, IN `prdivision` TEXT CHARSET utf8, IN `prtelefono` TEXT CHARSET utf8, IN `prdireccion` TEXT CHARSET utf8)
    NO SQL
update
centro_trabajo_pnp
set
id_distrito = prdistrito ,
comisaria = prcomisaria ,
division = prdivision ,
telefono = prtelefono ,
direccion = prdireccion
WHERE
id_centro_trabajo_pnp = pridcentrotrabajo$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcobranzadirectavoucher`(IN `prcobranzadirecta` INT, IN `prarchivo` VARCHAR(255) CHARSET utf8)
    NO SQL
update
cobranza_directa
set
archivo = prarchivo
where
id_cobranza_directa = prcobranzadirecta$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_activarproducto`(IN `prid` INT)
    READS SQL DATA
update producto
set
prd_estado=1
where
idproducto=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizaraval`(IN `pidaval` INT, IN `pavl_dni` VARCHAR(8) CHARSET utf8, IN `pavl_nombre` VARCHAR(45) CHARSET utf8, IN `pavl_apellido` VARCHAR(45) CHARSET utf8, IN `pavl_institucion` VARCHAR(100) CHARSET utf8, IN `pavl_observacion` VARCHAR(45) CHARSET utf8, IN `pid_cliente` INT)
    MODIFIES SQL DATA
UPDATE aval
SET avl_dni = pavl_dni,
	avl_nombre = pavl_nombre,
	avl_apellido = pavl_apellido,
	avl_institucion = pavl_institucion,
	avl_observacion = pavl_observacion,
	id_cliente = pid_cliente
WHERE idaval = pidaval$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarclienteparcial`(IN `pidcliente` INT, IN `pid_subsede` INT, IN `prcargo` INT, IN `prcargoestado` INT, IN `pclt_codigo` VARCHAR(45) CHARSET utf8, IN `pclt_dni` VARCHAR(8) CHARSET utf8, IN `pclt_nombre` VARCHAR(100) CHARSET utf8, IN `pclt_cip` VARCHAR(45) CHARSET utf8, IN `pclt_email` VARCHAR(45) CHARSET utf8, IN `pclt_casilla` VARCHAR(45) CHARSET utf8)
    MODIFIES SQL DATA
UPDATE cliente
SET id_sub_sede = pid_subsede,
	id_cargo=prcargo,
	id_cargo_estado=prcargoestado,
	clt_codigo = pclt_codigo,
	clt_dni = LPAD(pclt_dni, 8, "0"),
	clt_nombre = CONCAT(
        			UPPER(trim(SUBSTRING_INDEX(pclt_nombre,',',1))) ,
        			', ',
        			capitalize(trim(SUBSTRING_INDEX(pclt_nombre,',',-1)))
    			),
	clt_cip = pclt_cip,
	clt_email = pclt_email,
	clt_casilla = pclt_casilla
WHERE idcliente = pidcliente$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcooperativadireccion`(IN `prid` INT, IN `prdistrito` INT, IN `prdireccion` VARCHAR(200) CHARSET utf8)
    NO SQL
update
cooperativa_direccion
set
id_distrito = prdistrito ,
direccion = prdireccion
where
id_cooperativa_direccion = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizaravalxventa`(IN `pid_avalxventa` INT, IN `pid_venta` INT, IN `pid_aval` INT)
    MODIFIES SQL DATA
UPDATE avalxventa
SET id_venta = pid_venta,
id_aval = pid_aval
WHERE id_avalxventa = pid_avalxventa$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarclientecargoestado`(IN `prcargoestado` INT, IN `prsede` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
update
cargo_estado
set
id_sede=prsede,
cstd_nombre=prnombre
where id_cargo_estado=prcargoestado$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarclientetelefono`(IN `prid` INT, IN `ptlf_numero` VARCHAR(15) CHARSET utf8, IN `pid_tipo` INT)
    NO SQL
BEGIN

set @cliente = (select cliente_telefono.id_cliente from cliente_telefono where cliente_telefono.idcliente_telefono=prid) ;

set @total =
(
    select
    count(cliente_telefono.idcliente_telefono) 
    from
    cliente_telefono
    where
    cliente_telefono.id_cliente=@cliente
    and
    cliente_telefono.tlf_numero=ptlf_numero
    and
    cliente_telefono.tlf_estado=1
) ;

if @total=0 then
    update
    cliente_telefono
    set
    tlf_numero = ptlf_numero,
    id_tipo = pid_tipo
    WHERE
    idcliente_telefono = prid;
end if;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcreditodocumentos`(IN `prcredito` INT, IN `prpdffoto` VARCHAR(100) CHARSET utf8, IN `prpdfdni` VARCHAR(100) CHARSET utf8, IN `prpdfcip` VARCHAR(100) CHARSET utf8, IN `prpdfplanilla` VARCHAR(100) CHARSET utf8, IN `prpdfvoucher` VARCHAR(100) CHARSET utf8, IN `prpdfrecibo` VARCHAR(100) CHARSET utf8, IN `prpdfcasilla` VARCHAR(100) CHARSET utf8, IN `prpdftransaccion` VARCHAR(100) CHARSET utf8, IN `prpdfautorizacion` VARCHAR(100) CHARSET utf8, IN `prpdftarjeta` VARCHAR(100) CHARSET utf8, IN `prpdfcompromiso` VARCHAR(100) CHARSET utf8, IN `prpdfletra` VARCHAR(100) CHARSET utf8, IN `prpdfddjj` VARCHAR(100) CHARSET utf8, IN `prpdfoficio` VARCHAR(100) CHARSET utf8, IN `prpdfotros` VARCHAR(100) CHARSET utf8)
    NO SQL
begin

    update
    creditos
    set
    foto_adjunto=prpdffoto,
    dni_adjunto=prpdfdni,
    cip_adjunto=prpdfcip,
    planilla_virtual_adjunto=prpdfplanilla,
    voucher_bn_adjunto=prpdfvoucher,
    recibo_servicios_adjunto=prpdfrecibo,
    casilla_pj_adjunto=prpdfcasilla,
    transaccion_adjunto=prpdftransaccion,
    autorizacion_adjunto=prpdfautorizacion,
    tarjeta_socio_adjunto=prpdftarjeta,
    compromiso_pago_adjunto=prpdfcompromiso,
    letra_cambio_adjunto=prpdfletra,
    declaracion_jurada_adjunto=prpdfddjj,
    oficio_adjunto=prpdfoficio,
    otros_adjunto=prpdfotros
    where
    id_credito=prcredito;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcooperativacuenta`(IN `prid` INT, IN `prbanco` INT, IN `prtitular` VARCHAR(100) CHARSET utf8, IN `prnumero` VARCHAR(50) CHARSET utf8, IN `prcci` VARCHAR(50) CHARSET utf8, IN `pralias` VARCHAR(100) CHARSET utf8)
    NO SQL
update
cooperativa_cuenta
set
id_banco=prbanco,
titular=prtitular,
numero=prnumero,
cci=prcci,
alias=pralias
where
id_cooperativa_cuenta=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcourier`(IN `prid` INT, IN `prnombre` VARCHAR(40) CHARSET utf8, IN `prurl` VARCHAR(80) CHARSET utf8)
    NO SQL
begin

	update
    courier
    set
    nombre=prnombre,
    url=prurl
    where
    id_courier=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarclientecuenta`(IN `prid` INT, IN `prbanco` INT, IN `prcuenta` VARCHAR(20) CHARSET utf8, IN `prcci` VARCHAR(20) CHARSET utf8)
    MODIFIES SQL DATA
begin

set @cliente = (select cliente_cuenta.id_cliente from cliente_cuenta where cliente_cuenta.id_cuenta=prid);

set @total =
(
    select
    count(cliente_cuenta.id_cuenta) 
    from
    cliente_cuenta
    where
    cliente_cuenta.id_cliente=@cliente
    and
    cliente_cuenta.cnt_numero=prcuenta
    and
    cliente_cuenta.cnt_estado=1
) ;

if @total=0 then
    update
    cliente_cuenta
    set
    id_banco=prbanco,
    cnt_numero=prcuenta,
    cnt_cci= case prcci
                    when "" then ""
                    else prcci
                end
    where
    id_cuenta=prid;
end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarbanco`(IN `prid` INT, IN `prbanco` VARCHAR(100) CHARSET utf8)
    NO SQL
BEGIN

	set @repetido = (
        select 
        count(*)
        from
        banco
        where
        bnc_estado=1
        and
        bnc_nombre="prbanco"
    ) ;
    
    if @repetido = 0 then
        update
        banco
        set
        bnc_nombre = prbanco
        where
        id_banco = prid;
    end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcobranzadirecta`(IN `prid` INT, IN `prfecha` DATE, IN `prcliente` INT, IN `prcuentacooperativa` INT, IN `properacion` VARCHAR(20) CHARSET utf8, IN `prreferente` INT, IN `prmonto` FLOAT, IN `prtransaccion` INT, IN `prestricto` INT, IN `prarchivo` VARCHAR(50) CHARSET utf8, IN `probservaciones` VARCHAR(150) CHARSET utf8)
    NO SQL
begin

    update
    cobranza_directa
    set
    fecha=prfecha,
    id_cliente=prcliente,
    id_cooperativa_cuenta=prcuentacooperativa,
    numero_operacion=properacion,
    id_vendedor=prreferente,
    monto=prmonto,
    id_transaccion=prtransaccion,
    solo_directas=prestricto,
    archivo=prarchivo,
    observaciones=probservaciones
    where
    id_cobranza_directa=prid;

	update
    cobranza_detalle
    set
    estado = 3
    where
    id_cobranza_directa=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarinstitucion`(IN `prid` INT, IN `prnombre` VARCHAR(60) CHARSET utf8, IN `prabreviatura` VARCHAR(30) CHARSET utf8, IN `prrepresentante` VARCHAR(40) CHARSET utf8, IN `prdistrito` INT, IN `prdireccion` VARCHAR(60) CHARSET utf8, IN `prtelefono` VARCHAR(20) CHARSET utf8, IN `prcodigocooperativa` VARCHAR(25) CHARSET utf8)
    NO SQL
begin

	update
    institucion
    set
    inst_nombre=prnombre,
    isnt_abreviatura=prabreviatura,
    isnt_representante_legal=prrepresentante,
    id_distrito=prdistrito,
    inst_direccion=prdireccion,
    inst_telefono=prtelefono,
    inst_codigo_cooperativa=prcodigocooperativa
    where
    id_institucion=prid;
    

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarclientedireccion`(IN `prid` INT, IN `pdrc_nombre` VARCHAR(100) CHARSET utf8, IN `pid_distrito` INT)
    MODIFIES SQL DATA
BEGIN

set @cliente = (select cliente_direccion.id_cliente from cliente_direccion where cliente_direccion.idcliente_direccion=prid);

set @total =
(
    select
    count(cliente_direccion.idcliente_direccion)
    from
    cliente_direccion
    where
    cliente_direccion.id_cliente= @cliente
    and
    cliente_direccion.drc_nombre=pdrc_nombre
    and
    cliente_direccion.drc_estado=1
) ;

if @total=0 then
    update
    cliente_direccion
    SET
    drc_nombre = UPPER(pdrc_nombre),
    id_distrito = pid_distrito
    where
    idcliente_direccion=prid;
end if;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcobranzadirectavalidacion`(IN `prcobranza` INT, IN `prvalidado` INT)
    NO SQL
update
cobranza_directa
set
validado=prvalidado
where
id_cobranza_directa=prcobranza$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarclientecargo`(IN `prcargo` INT, IN `prsede` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
update
cargo
set
id_sede=prsede,
crg_nombre=prnombre
where id_cargo=prcargo$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcooperativadireccionorden`(IN `prdireccion` INT, IN `prordenactual` INT, IN `prordennueva` INT)
    NO SQL
BEGIN

	set @idactual = (
        select
        id_cooperativa_direccion
        from
        cooperativa_direccion
        where
        numero_orden=prordennueva
        and
        estado=1
    ) ;
    
    if @idactual is null then
    	set @idactual = 0 ;
    end if;
    
    update
    cooperativa_direccion
    set
    numero_orden=prordenactual
    where
    id_cooperativa_direccion=@idactual ;
    
    update
    cooperativa_direccion
    set
    numero_orden=prordennueva
    where
    id_cooperativa_direccion=prdireccion ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarafiliacioncuotasalpresente`(IN `pridcredito` INT)
    NO SQL
begin
	declare contador int unsigned ;
    set contador = 0 ;
    
	# Se obtiene la última fecha de la afiliación
    set @ultimafecha = (
        select
            max(credito_cronograma.fecha_vencimiento)
        from
            creditos
        inner join credito_cronograma on
            creditos.id_credito=credito_cronograma.id_credito
        where
            tipo=1
        and
        	credito_cronograma.estado<>3
        and
            creditos.estado = 1
        and
        	creditos.id_credito = pridcredito
    )  ;

	# Se verifica si la fecha de la última cuota es menor a la fecha actual
    if @ultimafecha < CURDATE() then

		# Se obtienen los datos restantes
        -- Se hace separado porque no se sabe hacer junto.
        -- No ejecutar SELECT porque no funciona el cursor en el
        -- procedimiento ap_actualizarafiliacionesatrasadas
        set @tipo_pago = (
            select
                creditos.id_tipo_pago
            from
                creditos
            inner join credito_cronograma on
                creditos.id_credito=credito_cronograma.id_credito
            where
                tipo=1
            and
                creditos.estado = 1
            and
        		credito_cronograma.estado<>3
            and
                creditos.id_credito = pridcredito
            group by
                creditos.id_credito
            order by
                credito_cronograma.fecha_vencimiento desc
            limit 1
		) ;

		set @monto_cuota = (
            select
                creditos.capital
            from
                creditos
            inner join credito_cronograma on
                creditos.id_credito=credito_cronograma.id_credito
            where
                tipo=1
            and
                creditos.estado = 1
            and
                creditos.id_credito = pridcredito
            and
        		credito_cronograma.estado<>3
            group by
                creditos.id_credito
            order by
                credito_cronograma.fecha_vencimiento desc
            limit 1
		) ;

		if @monto_cuota = 0 then
        	set @monto_cuota = 20 ;
        end if ;

		set @fechanueva = @ultimafecha ;
	
    	-- Se verifica si la fecha es la última fecha del mes
    	if @ultimafecha = LAST_DAY(@ultimafecha) then
        	set @ultimodia = true ;
        else
        	set @ultimodia = false ;
        end if ;

		# Se itera hasta que las cuotas estén al día
        WHILE @fechanueva < CURDATE() DO
        	set @fechanueva = DATE_ADD(@fechanueva, interval 1 month) ;
            -- Si es la última fecha del mes, de aquí en adelante será la última fecha del mes
            if @ultimodia THEN
            	set @fechacorregida = LAST_DAY(@fechanueva) ;
            else
            	set @fechacorregida = @fechanueva ;
            end if;
            
            set contador = contador + 1 ;
            
        	insert into
          		credito_cronograma
          	SET
           		id_credito = pridcredito ,
                id_tipo_pago = @tipo_pago ,
                monto_capital = @monto_cuota ,
                fecha_vencimiento = @fechacorregida ;
                
        END WHILE;

    end if ;

	-- select contador ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizardepartamento`(IN `prid` INT, IN `prnombre` VARCHAR(40) CHARSET utf8)
    MODIFIES SQL DATA
update
departamento
set
dpt_nombre=prnombre
where
id_departamento=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcreditoestadointeres`(IN `prcredito` INT, IN `prestadointeres` INT)
    NO SQL
BEGIN

	update
    creditos
    set
    estado_interes = prestadointeres
    where
    id_credito = prcredito ;

	if prestadointeres = 2  then
    	call sp_eliminarcreditocronogramainteres(prcredito) ;
    end if ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarinteresescreditos`()
    NO SQL
BEGIN
	DECLARE finished INTEGER DEFAULT 0;
	DECLARE idCredito integer ;
	declare contador int default 0 ;

	-- declare cursor for employee email
	DEClARE cursorCredito 
		CURSOR FOR 
			(
                select
                c.id_credito
                from
                creditos as c
                inner join
                (
                    select
                    cc.id_credito as id ,
                    max(cc.fecha_vencimiento) as fecha_vencimiento,
                    count(*) as total_vencido
                    FROM
                    credito_cronograma as cc
                    where
                    cc.estado = 1
                    and
                    (cc.tipo_cuota=1 or cc.tipo_cuota=3)
                    group by
                    cc.id_credito
                    having
                    max(cc.fecha_vencimiento) < curdate()
                ) as cronograma on
                c.id_credito = cronograma.id
                left join liquidaciones as lq on
                c.id_credito=lq.id_transaccion and lq.tipo=1
                where 
                c.tipo=2
                and
                c.estado = 1
                and
                ( c.estado_interes=1 or c.estado_interes=3 )
                and
                lq.id_liquidacion is null
            );

	DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;

	OPEN cursorCredito;

	creditoLoop: LOOP
		FETCH cursorCredito INTO idCredito;
		IF finished = 1 THEN 
			LEAVE creditoLoop;
		END IF;
		call sp_crearcreditocronogramainteres1(idCredito);
	END LOOP creditoLoop;
	CLOSE cursorCredito;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzadirectamasivo`(IN `prfecha` DATE, IN `prcliente` INT, IN `prcuentacooperativa` INT, IN `properacion` VARCHAR(20) CHARSET utf8, IN `prreferente` INT, IN `prmonto` FLOAT, IN `prtipo` INT, IN `prtransaccion` INT, IN `probservaciones` VARCHAR(100) CHARSET utf8, IN `prusuarioalvis` INT, IN `prfechaactual` DATE)
    NO SQL
begin

    insert into
    cobranza_directa
    set
    fecha=prfecha,
    id_cliente=prcliente,
    id_cooperativa_cuenta=prcuentacooperativa,
    numero_operacion=properacion,
    id_vendedor=prreferente,
    monto=prmonto,
    id_transaccion=prtransaccion,
    solo_directas=1,
    archivo='',
    observaciones=probservaciones;

    select @id:=LAST_INSERT_ID() as id;

	insert into
    	log
    set
    	id_usuario = prusuarioalvis,
        fecha = prfechaactual ,
        id_log_referencia = 16 ,
        id_log_accion = 1 ,
        id_referencia = @id ;

	if prtipo = 1 then
    	call sp_crearpagocredito(@id, 0, prtransaccion, prmonto, prfecha) ;
	elseif prtipo = 2 then
    	call sp_crearpagoventa(@id, 0, prtransaccion, prmonto, prfecha) ;
    end if ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarperfil`(IN `prid` int, IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prresumen` VARCHAR(200) CHARSET utf8, IN `prpermisos` TEXT CHARSET utf8)
    MODIFIES SQL DATA
update
perfil
SET
nombre=prnombre,
permisos_categorias=prresumen,
permisos=prpermisos
where
id_perfil=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcliente`(IN `prsubsede` INT, IN `prcargo` INT, IN `prcargoestado` INT, IN `pclt_codigo` VARCHAR(45) CHARSET utf8, IN `pclt_dni` VARCHAR(8) CHARSET utf8, IN `pclt_nombre` VARCHAR(100) CHARSET utf8, IN `pclt_foto` VARCHAR(200) CHARSET utf8, IN `pclt_cip` VARCHAR(45) CHARSET utf8, IN `pclt_email` VARCHAR(45) CHARSET utf8, IN `pclt_casilla` VARCHAR(45) CHARSET utf8, IN `prdistrito` INT, IN `pclt_trabajo` VARCHAR(60) CHARSET utf8, IN `prcapacidadpago` INT, IN `prmaximodescuento` INT, IN `pclt_calificacion_personal` VARCHAR(20) CHARSET utf8, IN `pclt_aporte` INT, IN `pclt_fecharegistro` DATE, IN `prestado` INT, IN `prcentrotrabajo` INT)
    MODIFIES SQL DATA
begin

    set @sede = (
        select
        ss.id_sede
        from
        subsede as ss 
        where
        ss.id_subsede=prsubsede
	);

    set @institucion = (
        select
        s.id_institucion
        from
        sede as s
        where
        s.id_sede=@sede 
     );

INSERT INTO cliente
SET 
	id_institucion=@institucion,
	id_sede=@sede,
	id_sub_sede=prsubsede,
	id_cargo=prcargo,
	id_cargo_estado = prcargoestado,
	clt_codigo = pclt_codigo,
	clt_dni = lpad(pclt_dni,8,"0"),
	clt_nombre = CONCAT(
        			UPPER(trim(SUBSTRING_INDEX(pclt_nombre,',',1))) ,
        			', ',
        			capitalize(trim(SUBSTRING_INDEX(pclt_nombre,',',-1)))
    			),
	clt_foto = pclt_foto,
	clt_cip = pclt_cip,
	clt_email = pclt_email,
	clt_casilla = pclt_casilla,
    id_distrito_trabajo=prdistrito,
	clt_trabajo = pclt_trabajo,
	clt_capacidad_pago	= prcapacidadpago,
    clt_maximo_descuento=prmaximodescuento,
	clt_calificacion_personal = pclt_calificacion_personal,
	clt_aporte = pclt_aporte,
	clt_fecharegistro = pclt_fecharegistro,
    clt_estado=prestado,
    id_centro_trabajo=prcentrotrabajo;
    
    select last_insert_id() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarpagocuotaventa`(IN `prcronograma` INT)
    NO SQL
begin

	select
    @fecha:=if(
                cd.id_cobranza_directa>0,
                max(cbd.fecha),
                if(
                    cd.id_cobranza_archivos>0,
                    cac.fecha_pago,
                    if(
                        cd.id_cobranza_manual>0,
                        cbm.fecha,
                        null
                    )
                )
            ),
    @total:=COALESCE(sum(cd.monto),0)
    from
    cobranza_detalle as cd
    left join cobranza_directa as cbd on
    cd.id_cobranza_directa=cbd.id_cobranza_directa
    left join cobranza_archivos_detalle as cad on
    cd.id_cobranza_archivos=cad.id_cobranza_detalle
    left join cobranza_archivos_cabecera as cac on
    cad.id_cobranza=cac.id_cobranza
    left join cobranza_manual as cbm on
    cd.id_cobranza_manual=cbm.id_cobranza_manual
    where
    cd.estado=1
    and
    ( 
        (cd.id_cobranza_archivos=0) or
        (cd.id_cobranza_archivos>0 and cac.estado=2)
    )
    and
    (
        (cd.id_cobranza_directa=0) or
        (cd.id_cobranza_directa>0 and cbd.estado=1)
    )
    and
    (
        (cd.id_cobranza_manual=0) or
        (cd.id_cobranza_manual>0 and cbm.estado=1)
    )
    and
    cd.id_venta_cronograma=prcronograma;

	## Se agrega esto para actualizar el campo en créditos
	set @venta = (
        select
        	vc2.id_venta
        from
        	venta_cronograma as vc2
        where
        	vc2.id_venta_cronograma=prcronograma
    ) ;

	update venta set ultima_fecha_pago = @fecha where idventa=@venta ;

	select
    vc.cng_monto_cuota+vc.cng_interes into @deuda
    from
    venta_cronograma as vc
    where
    vc.id_venta_cronograma=prcronograma;

	if @deuda > @total then
        update
        venta_cronograma as vg
        set
        vg.cng_monto_pagado=@total,
        vg.cng_fecha_cancelacion=null,
        vg.cng_estado=1
        where
        vg.id_venta_cronograma=prcronograma;
    else
        update
        venta_cronograma as vg
        set
        vg.cng_monto_pagado=@total,
        vg.cng_fecha_cancelacion=@fecha,
        vg.cng_estado=2
        where
        vg.id_venta_cronograma=prcronograma;
	end if;

	call sp_crearventacronogramainteres1(@venta) ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarmodelo`(IN `id` INT, IN `idmarca` INT, IN `modelo` VARCHAR(45) CHARSET utf8)
    MODIFIES SQL DATA
UPDATE modelo
SET id_marca= idmarca,
mdl_nombre = TRIM(modelo)
WHERE id_modelo = id$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarprocesojudicialestado`(IN `prestado` INT, IN `prdocumento` INT(50), IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
update
proceso_judicial_estado
set
id_proceso_judicial_documento=prdocumento,
nombre=prnombre
where
id_proceso_judicial_estado=prestado$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarpresupuesto`(IN `prid` INT, IN `prestado` INT)
    NO SQL
begin

update
presupuesto_cabecera
set
psp_estado=prestado
where
id_presupuesto=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarinterescronograma`(IN `prtipo` INT, IN `prtransaccion` INT, IN `prcronograma` INT, IN `printeres` INT)
    NO SQL
begin

	if ( prtipo = 3 ) then
    	update
        venta_cronograma
        set
        cng_interes=printeres
        where
        id_venta_cronograma=prcronograma ;
        CALL sp_actualizarpagocuotaventa(prcronograma) ;
    elseif ( prtipo = 1 or prtipo = 2 ) then
    	update
        credito_cronograma
        set
        interes=printeres
        where
        id_credito_cronograma=prcronograma ;
        CALL sp_actualizarpagocuotacredito(prcronograma) ;
    end if ;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarjuzgadoinstancia`(IN `pridjuzgadoinstancia` INT, IN `prjuzgadodistrito` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    MODIFIES SQL DATA
update
juzgado_instancia
set
id_juzgado_distrito=prjuzgadodistrito,
nombre=prnombre
where
id_juzgado_instancia=pridjuzgadoinstancia$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearclientecargoestado`(IN `prsede` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
insert into
cargo_estado
set
id_sede=prsede,
cstd_nombre=prnombre$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcliente`(IN `pidcliente` INT, IN `pid_subsede` INT, IN `prcargo` INT, IN `prcargoestado` INT, IN `pclt_codigo` VARCHAR(45) CHARSET utf8, IN `pclt_dni` VARCHAR(8) CHARSET utf8, IN `pclt_nombre` VARCHAR(100) CHARSET utf8, IN `pclt_cip` VARCHAR(45) CHARSET utf8, IN `pclt_email` VARCHAR(45) CHARSET utf8, IN `pclt_casilla` VARCHAR(45) CHARSET utf8, IN `pclt_trabajo` VARCHAR(60) CHARSET utf8, IN `prdistritotrabajo` INT, IN `prcapacidadpago` INT, IN `prmaximodescuento` INT, IN `pclt_calificacion_personal` VARCHAR(45) CHARSET utf8, IN `pclt_aporte` INT, IN `prestado` INT, IN `prcentrotrabajo` INT)
    MODIFIES SQL DATA
begin

    select
    @sede := ss.id_sede
    from
    subsede as ss 
    where
    ss.id_subsede=pid_subsede;

    select
    @institucion := s.id_institucion
    from
    sede as s
    where
    s.id_sede=@sede ;

    UPDATE cliente
    SET 
        id_institucion=@institucion,
        id_sede=@sede,
        id_sub_sede = pid_subsede,
        id_cargo=prcargo,
        id_cargo_estado=prcargoestado,
        clt_codigo = pclt_codigo,
        clt_dni = LPAD(pclt_dni, 8, "0"),
        clt_nombre = CONCAT(
                        UPPER(trim(SUBSTRING_INDEX(pclt_nombre,',',1))) ,
                        ', ',
                        capitalize(trim(SUBSTRING_INDEX(pclt_nombre,',',-1)))
                    ),
        clt_cip = pclt_cip,
        clt_email = pclt_email,
        clt_casilla = pclt_casilla,
        clt_trabajo = pclt_trabajo,
        id_distrito_trabajo=prdistritotrabajo,
        clt_capacidad_pago	= prcapacidadpago,
        clt_maximo_descuento=prmaximodescuento,
        clt_calificacion_personal = pclt_calificacion_personal,
        clt_aporte = pclt_aporte,
        clt_estado=prestado,
        id_centro_trabajo=prcentrotrabajo
    WHERE idcliente = pidcliente;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarpagocuotacredito`(IN `prcronograma` INT)
    NO SQL
begin

	select
    @fecha:=if(
                cd.id_cobranza_directa>0,
                max(cbd.fecha),
                if(
                    cd.id_cobranza_archivos>0,
                    cac.fecha_pago,
                    if(
                        cd.id_cobranza_manual>0,
                        cbm.fecha,
                        null
                    )
                )
            ),
    @total:=COALESCE(sum(cd.monto),0)
    from
    cobranza_detalle as cd
    left join cobranza_directa as cbd on
    cd.id_cobranza_directa=cbd.id_cobranza_directa
    left join cobranza_archivos_detalle as cad on
    cd.id_cobranza_archivos=cad.id_cobranza_detalle
    left join cobranza_archivos_cabecera as cac on
    cad.id_cobranza=cac.id_cobranza
    left join cobranza_manual as cbm on
    cd.id_cobranza_manual=cbm.id_cobranza_manual
    where
    cd.estado=1
    and
    ( 
        (cd.id_cobranza_archivos=0) or
        (cd.id_cobranza_archivos>0 and cac.estado=2)
    )
    and
    (
        (cd.id_cobranza_directa=0) or
        (cd.id_cobranza_directa>0 and cbd.estado=1)
    )
    and
    (
        (cd.id_cobranza_manual=0) or
        (cd.id_cobranza_manual>0 and cbm.estado=1)
    )
    and
    cd.id_credito_cronograma=prcronograma;

	## Se agrega esto para actualizar el campo en créditos
	set @credito = (
        select
        	cc2.id_credito
        from
        	credito_cronograma as cc2
        where
        	cc2.id_credito_cronograma=prcronograma
    ) ;

	update creditos set ultima_fecha_pago = @fecha where id_credito=@credito ;

	select
    cc.monto_capital+cc.monto_interes+cc.interes into @deuda
    from
    credito_cronograma as cc
    where
    cc.id_credito_cronograma=prcronograma;

	if @deuda > @total then
        update
        credito_cronograma as cg
        set
        cg.monto_pagado=@total,
        cg.fecha_cancelacion=null,
        cg.estado=1
        where
        cg.id_credito_cronograma=prcronograma;
    else
        update
        credito_cronograma as cg
        set
        cg.monto_pagado=@total,
        cg.fecha_cancelacion=@fecha,
        cg.estado=2
        where
        cg.id_credito_cronograma=prcronograma;
	end if;

	call sp_crearcreditocronogramainteres1(@credito) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarprocesojudicial`(IN `prproceso` INT, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prinstancia` VARCHAR(50) CHARSET utf8, IN `prjuez` INT, IN `prespecialista` INT, IN `prfecha` DATE, IN `prsumilla` VARCHAR(50) CHARSET utf8, IN `prnumerocuotas` INT, IN `prtotal` FLOAT)
    READS SQL DATA
begin

    update
    proceso_judicial
    set
    expediente=prexpediente,
    id_instancia_judicial=prinstancia,
    juez=prjuez,
    especialista=prespecialista,
    fecha_inicio=prfecha,
    sumilla=prsumilla,
    numero_cuotas=prnumerocuotas,
    total=prtotal
    where
    id_proceso_judicial=prproceso;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarprocesojudicialdetalle`(IN `prproceso` INT, IN `prdocumento` VARCHAR(20) CHARSET utf8, IN `prfecha` DATE, IN `prtrabajador` INT, IN `prestado` INT, IN `prnumero` INT, IN `prsumilla` TEXT CHARSET utf8, IN `prarchivo` VARCHAR(50) CHARSET utf8, IN `prcomentarios` TEXT, IN `prfechanotificaciondemandado` DATE, IN `prfechanotificacioncooperativa` DATE, IN `prfechanotificacionretorno` DATE)
    NO SQL
begin

update
proceso_judicial_detalle
set
tipo_documento=prdocumento,
fecha=prfecha,
id_trabajador=prtrabajador,
id_estado=prestado,
numero=prnumero,
sumilla=prsumilla,
archivo=prarchivo,
comentarios=prcomentarios,
fecha_notificacion_demandado=prfechanotificaciondemandado,
fecha_notificacion_cooperativa=prfechanotificacioncooperativa,
fecha_notificacion_retorno=prfechanotificacionretorno
where
id_proceso_judicial_detalle=prproceso;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarmarca`(IN `id` INT, IN `idtipoproducto` INT, IN `marca` VARCHAR(45) CHARSET utf8)
    MODIFIES SQL DATA
UPDATE 
marca
SET id_tipo_producto = idtipoproducto,
mrc_nombre = TRIM(marca)
WHERE id_marca = id$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarprocesojudicialtraslado`(IN `prprocesonuevo` INT, IN `prprocesoantiguo` INT)
    NO SQL
begin

	insert into
    proceso_judicial_transferencia
    set
    id_proceso_antiguo=prprocesoantiguo,
    id_proceso_nuevo=prprocesonuevo;
    
    update
    proceso_judicial
    set
    estado=4
    where
    id_proceso_judicial=prprocesoantiguo;
        
    update
    proceso_judicial
    set
    estado=1
    where
    id_proceso_judicial=prprocesonuevo;

	insert into
    proceso_judicial_transacciones
    (id_proceso, tipo_transaccion, id_transaccion, estado)
    (select prprocesonuevo, proceso_judicial_transacciones.tipo_transaccion, proceso_judicial_transacciones.id_transaccion, proceso_judicial_transacciones.estado from proceso_judicial_transacciones where proceso_judicial_transacciones.id_proceso=prprocesoantiguo) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzaarchivoscabecerapago`(IN `prcobranza` INT, IN `prfechapago` DATE, IN `prmontopagado` INT)
    NO SQL
update
cobranza_archivos_cabecera
set
fecha_pago=prfechapago,
monto_pagado=ROUND(prmontopagado,2),
estado=2
where
id_cobranza=prcobranza$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproductoserieingresar`(IN `prid` INT)
    NO SQL
UPDATE
producto_serie
set ps_estado=1
WHERE
id_producto_serie=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarprocesojudicialcobranza`(IN `prproceso` INT, IN `prfecha` DATE)
    NO SQL
update
proceso_judicial
set
fecha_inicio_pago=prfecha
where
id_proceso_judicial=prproceso$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcreditoestadopenalidad`(IN `prcredito` INT, IN `prestadopenalidad` INT)
    NO SQL
BEGIN

	update
    creditos
    set
    estado_penalidad = prestadopenalidad
    where
    id_credito = prcredito ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzadetalle`(IN `prcobranzadirecta` INT, IN `prcobranzaarchivos` INT, IN `prcobranzajudicial` INT, IN `prcobranzamanual` INT, IN `prcreditocronograma` INT, IN `prventacronograma` INT, IN `prmonto` FLOAT, IN `prfecha` DATE)
    NO SQL
begin

	select
    count(id_cobranza_detalle) into @total
    from
    cobranza_detalle
    where
    estado=1
    and
    (
        (id_credito_cronograma=prcreditocronograma and prventacronograma=0) or
        (id_venta_cronograma=prventacronograma and prcreditocronograma=0)
    )
    and
    (id_cobranza_directa=prcobranzadirecta and id_cobranza_archivos=prcobranzaarchivos and id_cobranza_judicial=prcobranzajudicial and id_cobranza_manual=prcobranzamanual);

	if @total=0 then

        insert into
        cobranza_detalle
        set
        id_cobranza_directa=prcobranzadirecta,
        id_cobranza_archivos=prcobranzaarchivos,
        id_cobranza_judicial=prcobranzajudicial,
        id_cobranza_manual=prcobranzamanual,
        id_credito_cronograma=prcreditocronograma,
        id_venta_cronograma=prventacronograma,
        monto=prmonto;

        if prcreditocronograma>0 then
            CALL sp_actualizarpagocuotacredito(prcreditocronograma);
        END IF;

        IF prventacronograma>0 then
            CALL sp_actualizarpagocuotaventa(prventacronograma);
        END IF;
        
	END IF;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcredito`(IN `prcredito` INT, IN `pracreedor` INT, IN `prsucursal` INT, IN `prfecha` DATE, IN `prautorizador` INT, IN `prvendedor` INT, IN `prcliente` INT, IN `prclientedireccion` VARCHAR(100) CHARSET utf8, IN `prclientetelefono` VARCHAR(20) CHARSET utf8, IN `prclientecargo` VARCHAR(40) CHARSET utf8, IN `prclientetrabajo` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechapago` DATE, IN `printeresdiario` INT, IN `printeres` FLOAT, IN `prcapital` FLOAT, IN `prcuotas` INT, IN `prtotal` FLOAT, IN `prpdffoto` VARCHAR(100) CHARSET utf8, IN `prpdfdni` VARCHAR(100) CHARSET utf8, IN `prpdfcip` VARCHAR(100) CHARSET utf8, IN `prpdfplanilla` VARCHAR(100) CHARSET utf8, IN `prpdfvoucher` VARCHAR(100) CHARSET utf8, IN `prpdfrecibo` VARCHAR(100) CHARSET utf8, IN `prpdfcasilla` VARCHAR(100) CHARSET utf8, IN `prpdftransaccion` VARCHAR(100) CHARSET utf8, IN `prpdfautorizacion` VARCHAR(100) CHARSET utf8, IN `prpdftarjeta` VARCHAR(100) CHARSET utf8, IN `prpdfcompromiso` VARCHAR(100) CHARSET utf8, IN `prpdfletra` VARCHAR(100) CHARSET utf8, IN `prpdfddjj` VARCHAR(100) CHARSET utf8, IN `prpdfoficio` VARCHAR(100) CHARSET utf8, IN `prpdfotros` VARCHAR(100) CHARSET utf8, IN `probservacion` VARCHAR(255) CHARSET utf8)
    NO SQL
begin

update
creditos
set
id_acreedor=pracreedor,
id_sucursal=prsucursal,
fecha=prfecha,
id_autorizador=prautorizador,
id_vendedor=prvendedor,
id_cliente=prcliente,
cliente_direccion=prclientedireccion,
cliente_telefono=prclientetelefono,
cliente_cargo=prclientecargo,
cliente_trabajo=prclientetrabajo,
id_tipo_pago=prtipopago,
fecha_pago=prfechapago,
interes_diario=printeresdiario,
interes=printeres,
capital=prcapital,
numero_cuotas=prcuotas,
total=prtotal,
foto_adjunto=prpdffoto,
dni_adjunto=prpdfdni,
cip_adjunto=prpdfcip,
planilla_virtual_adjunto=prpdfplanilla,
voucher_bn_adjunto=prpdfvoucher,
recibo_servicios_adjunto=prpdfrecibo,
casilla_pj_adjunto=prpdfcasilla,
transaccion_adjunto=prpdftransaccion,
autorizacion_adjunto=prpdfautorizacion,
tarjeta_socio_adjunto=prpdftarjeta,
compromiso_pago_adjunto=prpdfcompromiso,
letra_cambio_adjunto=prpdfletra,
declaracion_jurada_adjunto=prpdfddjj,
oficio_adjunto=prpdfoficio,
otros_adjunto=prpdfotros,
observaciones=probservacion
where
id_credito=prcredito;

# Se elimina el cronograma de este crédito
delete from
credito_cronograma
where
id_credito=prcredito;

# Se eliminan los garantes de este crédito
delete from
credito_garante
where
id_credito=prcredito;

# Se inhabilitan los vendedores
update
credito_vendedores
set
estado=0
where
id_credito=prcredito ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarjuzgadodistrito`(IN `prid` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
update
juzgado_distrito
set
nombre=prnombre
where
id_juzgado_distrito=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizardistrito`(IN `prid` INT, IN `prprovincia` INT, IN `prnombre` VARCHAR(40) CHARSET utf8)
    MODIFIES SQL DATA
update
distrito
set
id_provincia=prprovincia,
dst_nombre=prnombre
where
id_distrito=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcronograma`(IN `prtipo` INT, IN `prid` INT, IN `prfecha` DATE, IN `prtipopago` INT)
    MODIFIES SQL DATA
begin

	if prtipo=3 then
    	update
        venta_cronograma
        set
        cng_fecha_vencimiento=prfecha,
        id_tipo_pago=prtipopago
        where
        id_venta_cronograma=prid;
     else
     	update
        credito_cronograma
        set
        fecha_vencimiento=prfecha,
        id_tipo_pago=prtipopago
        where
        id_credito_cronograma=prid;
	end if;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproductoserie`(IN `prid` INT, IN `prproducto` INT, IN `prserie` VARCHAR(40) CHARSET utf8, IN `prcolor` VARCHAR(40) CHARSET utf8, IN `pralmacenamiento` VARCHAR(40) CHARSET utf8, IN `prprecio` FLOAT)
    MODIFIES SQL DATA
update
producto_serie
set
id_producto = prproducto,
ps_serie = prserie,
ps_color = prcolor,
ps_almacenamiento = pralmacenamiento,
ps_precio_compra = prprecio
where
id_producto_serie=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarplantillarelevancia`(IN `prid` INT, IN `prtipo` INT)
    NO SQL
begin

	update
    plantillas
    set
    plantillas.relevancia=2
    WHERE
    plantillas.tipo_plantilla=prtipo
    AND
    estado=1;
    
    update
    plantillas
    set
    plantillas.relevancia=1
    WHERE
    plantillas.id_plantilla=prid;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcentrotrabajopnp`(IN `prdistrito` INT, IN `prcomisaria` TEXT CHARSET utf8, IN `prdivision` TEXT CHARSET utf8, IN `prtelefono` TEXT CHARSET utf8, IN `prdireccion` TEXT CHARSET utf8)
    NO SQL
insert into
centro_trabajo_pnp
set
id_distrito = prdistrito ,
comisaria = prcomisaria ,
division = prdivision ,
telefono = prtelefono ,
direccion = prdireccion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcreditocronograma`(IN `prid` INT, IN `prtipopago` INT, IN `prcapital` FLOAT, IN `printeres` FLOAT, IN `prvencimiento` DATE)
    NO SQL
insert into
credito_cronograma
set
id_credito=prid,
id_tipo_pago=prtipopago,
monto_capital=ROUND(prcapital,2),
monto_interes=ROUND(printeres,2),
fecha_vencimiento=prvencimiento$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearclientecargo`(IN `prsede` INT, IN `prcargo` VARCHAR(50) CHARSET utf8)
    NO SQL
insert into
cargo
set
id_sede=prsede,
crg_nombre=prcargo$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarcreditocronogramamontopagado`(IN `prcredito` INT)
    NO SQL
update
credito_cronograma as cc
left join
(
    select
    cd0.id_credito_cronograma ,
    sum(cd0.monto) as monto
    from
    cobranza_detalle as cd0
    where
    cd0.estado = 1
    group by
    cd0.id_credito_cronograma
) as sub_cobranza_detalle
on
cc.id_credito_cronograma = sub_cobranza_detalle.id_credito_cronograma
set
cc.monto_pagado = coalesce(round(sub_cobranza_detalle.monto,2),0) ,
cc.estado = if(
    		  round(cc.monto_capital + cc.monto_interes + cc.interes, 2) = 
              coalesce(round(sub_cobranza_detalle.monto,2), 0)
            , 2, 1)
where
cc.id_credito = prcredito
and
cc.estado <> 3$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarjuzgadojuez`(IN `pridjuzgadojuez` INT, IN `prjuzgadoinstancia` INT, IN `prtipojuez` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    MODIFIES SQL DATA
update
juzgado_juez
set
id_juzgado_instancia=prjuzgadoinstancia,
id_tipo=prtipojuez,
nombre=prnombre
where
id_juzgado_juez=pridjuzgadojuez$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarfoto`(IN `pidcliente` INT, IN `pclt_foto` VARCHAR(200) CHARSET utf8)
    MODIFIES SQL DATA
UPDATE cliente SET clt_foto = pclt_foto
WHERE idcliente = pidcliente$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearclienteobservacion`(IN `prcliente` INT, IN `prfecha` DATE, IN `probservacion` VARCHAR(200) CHARSET utf8, IN `prarchivos` VARCHAR(100))
    MODIFIES SQL DATA
insert into
cliente_observacion
set
id_cliente=prcliente,
cobs_observacion=probservacion,
archivo=prarchivos,
cobs_fecha=prfecha$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarventacronogramamontopagado`(IN `prventa` INT)
    NO SQL
update
venta_cronograma as vc
left join
(
    select
    cd0.id_venta_cronograma ,
    sum(cd0.monto) as monto
    from
    cobranza_detalle as cd0
    where
    cd0.estado = 1
    group by
    cd0.id_venta_cronograma
) as sub_cobranza_detalle
on
vc.id_venta_cronograma = sub_cobranza_detalle.id_venta_cronograma
set
vc.cng_monto_pagado = coalesce(round(sub_cobranza_detalle.monto,2),0) ,
vc.cng_estado = if(
    		  round(vc.cng_monto_cuota + vc.cng_interes, 2) = 
              coalesce(round(sub_cobranza_detalle.monto,2), 0)
            , 2, 1)
where
vc.id_venta = prventa
and
vc.cng_estado <> 3$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcourier`(IN `prnombre` VARCHAR(40) CHARSET utf8, IN `prurl` VARCHAR(80) CHARSET utf8)
    NO SQL
BEGIN

	INSERT into
    courier
    set
    nombre=prnombre,
    url=prurl;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproducto`(IN `prid` INT, IN `pridmodelo` INT, IN `prdescripcion` VARCHAR(255) CHARSET utf8, IN `prprecio` FLOAT, IN `prcuotas` INT)
    MODIFIES SQL DATA
update producto
set
id_modelo=pridmodelo,
prd_descripcion=prdescripcion,
prd_precio=prprecio,
prd_maximo_cuotas=prcuotas
where
prid=idproducto$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearmodulo`(IN `pmdl_nombre` VARCHAR(45) CHARSET utf8)
    MODIFIES SQL DATA
INSERT INTO modulo SET mdl_nombre=pmdl_nombre$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzamanual`(IN `prcliente` INT, IN `prtipocobranza` INT, IN `prfecha` DATE, IN `prcomprobante` VARCHAR(50) CHARSET utf8, IN `prvendedor` INT, IN `prtotal` FLOAT, IN `probservacion` VARCHAR(255) CHARSET utf8)
    NO SQL
begin

	insert into
    	cobranza_manual
    SET
    	id_cliente = prcliente ,
        id_tipo_cobranza_manual = prtipocobranza ,
        fecha = prfecha ,
        comprobante = prcomprobante ,
        id_vendedor = prvendedor , 
        total = prtotal ,
        observaciones = probservacion ;
        
     select LAST_INSERT_ID() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearclientecuenta`(IN `prcliente` INT, IN `prbanco` INT, IN `prcuenta` VARCHAR(20) CHARSET utf8, IN `prcci` VARCHAR(20) CHARSET utf8)
    MODIFIES SQL DATA
begin

set @total =
(
    select
    count(cliente_cuenta.id_cuenta) 
    from
    cliente_cuenta
    where
    cliente_cuenta.id_cliente=prcliente
    and
    cliente_cuenta.cnt_numero=prcuenta
    and
    cliente_cuenta.cnt_estado=1
) ;

if @total=0 then
    update
    cliente_cuenta
    set
    cnt_relevancia=2
    where
    id_cliente=prcliente;

    insert into
    cliente_cuenta
    set
    id_cliente=prcliente,
    id_banco=prbanco,
    cnt_numero=prcuenta,
    cnt_cci=prcci,
    cnt_relevancia=1;
end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproductofoto`(IN `prid` INT, IN `prfoto` VARCHAR(30) CHARSET utf8)
    READS SQL DATA
UPDATE producto
SET
prd_foto=prfoto
WHERE
idproducto=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creardistrito`(IN `prprovincia` INT, IN `prnombre` VARCHAR(40) CHARSET utf8)
    MODIFIES SQL DATA
insert into
distrito
set
dst_nombre=UPPER(prnombre),
id_provincia=prprovincia$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcreditocronogramainteres2`(IN `prcredito` INT)
    NO SQL
begin


	-- Primero se verifica si en el crédito se creó una penalidad
	set @cuotas_reemplazadas = (select
    	count(cc0.id_credito_cronograma)
    from
    	credito_cronograma as cc0
    WHERE
    	cc0.id_credito=prcredito
    and
    	cc0.tipo_cuota=2
	and
		cc0.tipo_cuota<>3
	) ;
	
	-- Si hay penalidad, se hacen los cálculos en base a las cuotas anteriores(tipo 2). Sino en base a las actuales (tipo 1)
	if @cuotas_reemplazadas > 0 then
        set @maxima_fecha = (
            select
                max(cc1.fecha_vencimiento)
            from
                credito_cronograma as cc1
            where
                cc1.id_credito=prcredito
            and
                cc1.tipo_cuota=2
            and
                cc1.estado<>3
            group by
                cc1.id_credito
        );
	else
    	set @maxima_fecha = (
        	select
                max(cc1.fecha_vencimiento)
            from
                credito_cronograma as cc1
            where
                cc1.id_credito=prcredito
            and
                cc1.tipo_cuota=1
            and
                cc1.estado<>3
            group by
                cc1.id_credito
        );
	end if ;

	set @total = (
        select
        total-interes_diario
        from
        creditos
        where
        id_credito=prcredito
    ) ;

	set @pago_manual = (
    	SELECT
            sum(cdm.monto)
        from
            cobranza_detalle as cdm
        inner join
            cobranza_manual as c1
        on
            cdm.id_cobranza_manual=c1.id_cobranza_manual
        inner join
            credito_cronograma as cc
        on
            cdm.id_credito_cronograma=cc.id_credito_cronograma
        where
            cc.id_credito=prcredito
        and
            c1.estado=1
        and
            cdm.estado=1
        and
        	c1.fecha <= @maxima_fecha
        group BY
            cc.id_credito
        
    ) ;

	set @pago_directo = (
    	SELECT 
            sum(cd.monto)
        FROM
            cobranza_detalle as cd
        inner join
            cobranza_directa as c2
        on
            cd.id_cobranza_directa=c2.id_cobranza_directa
        inner join
            credito_cronograma as cc
        on
            cd.id_credito_cronograma=cc.id_credito_cronograma
        where
            cd.estado=1
        and
            c2.estado=1
        AND
            cc.id_credito=prcredito
        and
        	c2.fecha <= @maxima_fecha
        group by
            cc.id_credito
    ) ;


	set @pago_planilla = (
    	SELECT 
            sum(cd.monto)
        FROM
            cobranza_detalle as cd
        inner join
            cobranza_archivos_detalle as cad
        on
            cd.id_cobranza_archivos=cad.id_cobranza_detalle
        inner join
            cobranza_archivos_cabecera as cac
        on
            cad.id_cobranza=cac.id_cobranza
        inner join
            credito_cronograma as cc
        on
            cd.id_credito_cronograma=cc.id_credito_cronograma
        where
            cd.estado=1
        and
            cad.estado=1
        and
            cac.estado=1
        and
            cc.id_credito=prcredito
        and
        	cac.fecha_fin <= @maxima_fecha
        group by
            cc.id_credito
    ) ;

	-- Se consulta la tasa de interés del préstamo
	set @interes = (
    	select
        interes
        from
        creditos
        where
        id_credito=prcredito
    ) ;
    
    if @interes < 15 THEN
    	set @interes = 10 ;
    end if;
    
    set @total_pagos = coalesce(@pago_planilla,0) + coalesce(@pago_directo,0) + coalesce(@pago_manual,0) ;

	-- Se debe considerar el 10% del interés del crédito
	set @interes_considerado = (@interes*0.01)*0.1 ;
    
    -- Se calcula el monto de la cuota de interés
    set @cuota = round( (@total-@total_pagos)*@interes_considerado, 2) ;
    
    -- Se realiza esto solo si la cuota es mayor a 0
    if @cuota > 0 then
    
        #### Se crean las cuotas del crédito #####
        -- Se busca el tipo de pago del crédito
        set @tipo_pago = (
            select
                id_tipo_pago
            from
                creditos
            where
                id_credito=prcredito
            and
                estado<>3
        );

        -- Se busca la fecha de la última cuota del crédito. No es la misma de arriba, porque aquí se deben considerar las cuotas en caso haya una penalidad
        set @ultima_fecha = (
            select
                max(cc1.fecha_vencimiento)
            from
                credito_cronograma as cc1
            where
                cc1.id_credito=prcredito
            and
                cc1.estado<>3
            group by
                cc1.id_credito
        ) ;

        -- Se crea esta variable para crear las cuotas del crédito
        set @contador = 0 ;

        actualizacionCuotas:LOOP

            SET @contador=@contador+1;

            set @fecha = LAST_DAY(date_add(@ultima_fecha,interval @contador month)) ;

            INSERT INTO
            	credito_cronograma 
            set
                id_credito=prcredito,
                id_tipo_pago=@tipo_pago,
                monto_capital=0,
                monto_interes=@cuota,
                tipo_cuota=3,
                fecha_vencimiento=@fecha ;
            
            IF @fecha>=now() THEN
              LEAVE actualizacionCuotas;
            END IF;
            
          END LOOP actualizacionCuotas;
          
          select 1 ;
		end if ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearclientetelefono`(IN `prcliente` INT, IN `ptlf_numero` VARCHAR(15) CHARSET utf8, IN `pid_tipo` INT)
    NO SQL
BEGIN

set @total =
(
    select
    count(cliente_telefono.idcliente_telefono) 
    from
    cliente_telefono
    where
    cliente_telefono.id_cliente=prcliente
    and
    cliente_telefono.tlf_numero=ptlf_numero
    and
    cliente_telefono.tlf_estado=1
) ;

if @total=0 then
    update
    cliente_telefono
    set
    tlf_relevancia=2
    WHERE
    id_cliente = prcliente;

    INSERT INTO
    cliente_telefono
    SET
    id_cliente = prcliente,
    tlf_numero = ptlf_numero,
    id_tipo = pid_tipo,
    tlf_relevancia=1;
end if;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzadirecta`(IN `prfecha` DATE, IN `prcliente` INT, IN `prcuentacooperativa` INT, IN `properacion` VARCHAR(20) CHARSET utf8, IN `prreferente` INT, IN `prmonto` FLOAT, IN `prtransaccion` INT, IN `prestricto` INT, IN `prarchivo` VARCHAR(50) CHARSET utf8, IN `prfechareferencia` DATE, IN `probservaciones` VARCHAR(100) CHARSET utf8)
    NO SQL
begin

insert into
cobranza_directa
set
fecha=prfecha,
id_cliente=prcliente,
id_cooperativa_cuenta=prcuentacooperativa,
numero_operacion=properacion,
id_vendedor=prreferente,
monto=prmonto,
id_transaccion=prtransaccion,
solo_directas=prestricto,
archivo=prarchivo,
fecha_referencia=prfechareferencia,
observaciones=probservaciones;

select LAST_INSERT_ID() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzaarchivoscabecera`(IN `prsede` INT, IN `prtipopago` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prcantidad` INT, IN `prmonto` FLOAT, IN `prarchivo` VARCHAR(20) CHARSET utf8)
    NO SQL
begin

insert into
cobranza_archivos_cabecera
set
fecha_creacion=CURDATE(),
id_sede=prsede,
id_tipo_pago=prtipopago,
fecha_inicio=prfechainicio,
fecha_fin=prfechafin,
cantidad=prcantidad,
monto=prmonto,
nombre_archivo=prarchivo;

select LAST_INSERT_ID() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcredito`(IN `pracreedor` INT, IN `prtipo` INT, IN `prsucursal` INT, IN `prfecha` DATE, IN `prcodigo` INT, IN `prnumero` INT, IN `prautorizador` INT, IN `prvendedor` INT, IN `prcliente` INT, IN `prclientedireccion` VARCHAR(100) CHARSET utf8, IN `prclientetelefono` VARCHAR(20) CHARSET utf8, IN `prclientecargo` VARCHAR(40) CHARSET utf8, IN `prclientetrabajo` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechapago` DATE, IN `printeresdiario` INT, IN `printeres` FLOAT, IN `prcapital` FLOAT, IN `prcuotas` INT, IN `prtotal` FLOAT, IN `prpdffoto` VARCHAR(100) CHARSET utf8, IN `prpdfdni` VARCHAR(100) CHARSET utf8, IN `prpdfcip` VARCHAR(100) CHARSET utf8, IN `prpdfplanilla` VARCHAR(100) CHARSET utf8, IN `prpdfvoucher` VARCHAR(100) CHARSET utf8, IN `prpdfrecibo` VARCHAR(100) CHARSET utf8, IN `prpdfcasilla` VARCHAR(100) CHARSET utf8, IN `prpdftransaccion` VARCHAR(100) CHARSET utf8, IN `prpdfautorizacion` VARCHAR(100) CHARSET utf8, IN `prpdftarjeta` VARCHAR(100) CHARSET utf8, IN `prpdfcompromiso` VARCHAR(100) CHARSET utf8, IN `prpdfletra` VARCHAR(100) CHARSET utf8, IN `prpdfddjj` VARCHAR(100) CHARSET utf8, IN `prpdfoficio` VARCHAR(100) CHARSET utf8, IN `prpdfotros` VARCHAR(100) CHARSET utf8, IN `probservacion` VARCHAR(255) CHARSET utf8)
    NO SQL
begin

insert into
creditos
set
id_acreedor=pracreedor,
tipo=prtipo,
id_sucursal=prsucursal,
fecha=prfecha,
codigo=prcodigo,
numero=prnumero,
id_autorizador=prautorizador,
id_vendedor=prvendedor,
id_cliente=prcliente,
cliente_direccion=prclientedireccion,
cliente_telefono=prclientetelefono,
cliente_cargo=prclientecargo,
cliente_trabajo=prclientetrabajo,
id_tipo_pago=prtipopago,
fecha_pago=prfechapago,
interes_diario=printeresdiario,
interes=printeres,
capital=prcapital,
numero_cuotas=prcuotas,
total=prtotal,
foto_adjunto=prpdffoto,
dni_adjunto=prpdfdni,
cip_adjunto=prpdfcip,
planilla_virtual_adjunto=prpdfplanilla,
voucher_bn_adjunto=prpdfvoucher,
recibo_servicios_adjunto=prpdfrecibo,
casilla_pj_adjunto=prpdfcasilla,
transaccion_adjunto=prpdftransaccion,
autorizacion_adjunto=prpdfautorizacion,
tarjeta_socio_adjunto=prpdftarjeta,
compromiso_pago_adjunto=prpdfcompromiso,
letra_cambio_adjunto=prpdfletra,
declaracion_jurada_adjunto=prpdfddjj,
oficio_adjunto=prpdfoficio,
otros_adjunto=prpdfotros,
observaciones=probservacion;

SELECT @id:=LAST_INSERT_ID() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearclientedireccion`(IN `prcliente` INT, IN `pdrc_nombre` VARCHAR(100) CHARSET utf8, IN `pid_distrito` INT)
    MODIFIES SQL DATA
BEGIN

set @total =
(
    select
    count(cliente_direccion.idcliente_direccion)
    from
    cliente_direccion
    where
    cliente_direccion.id_cliente=prcliente
    and
    cliente_direccion.drc_nombre=pdrc_nombre
    and
    cliente_direccion.drc_estado=1
) ;

if @total=0 then
    UPDATE
    cliente_direccion
    set
    drc_relevancia=2
    where
    id_cliente=prcliente;

    INSERT INTO
    cliente_direccion
    SET
    id_cliente=prcliente,
    drc_nombre = UPPER(pdrc_nombre),
    id_distrito = pid_distrito,
    drc_relevancia=1;
end if;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearmodelo`(IN `idmarca` INT, IN `modelo` VARCHAR(45) CHARSET utf8)
    MODIFIES SQL DATA
begin

INSERT INTO modelo
SET id_marca = idmarca,
mdl_nombre = TRIM(modelo);

select last_insert_id() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproveedorfoto`(IN `prproveedor` INT, IN `prfoto` VARCHAR(50) CHARSET utf8)
    NO SQL
update
proveedor
SET
foto=prfoto
where
idproveedor=prproveedor$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpenalidadventa`(IN `prventa` INT, IN `prcuotapenalidad` FLOAT, IN `prnumerocuotas` INT, IN `prfechainicio` DATE, IN `prtipopago` INT)
    NO SQL
begin

	DECLARE contador INT DEFAULT 0;
    
    update
    venta
    set
    estado_penalidad = 3
    where
    idventa=prventa ;
    
	update
    venta_cronograma
    set
    tipo_cuota=2
    where
    id_venta=prventa
    and
    tipo_cuota=1;

  	my_loop: LOOP
    SET contador=contador+1;

    IF contador>prnumerocuotas THEN
      LEAVE my_loop;
    END IF;

	if prfechainicio = LAST_DAY(prfechainicio) THEN
    	set @fecha = LAST_DAY(DATE_ADD(prfechainicio, interval (contador-1) month)) ;
    else
    	set @fecha = DATE_ADD(prfechainicio, interval (contador-1) month) ;
    end if ;

    INSERT INTO venta_cronograma 
    set
    id_venta=prventa,
    id_tipo_pago=prtipopago,
    cng_monto_cuota=0,
    cng_interes=prcuotapenalidad,
    tipo_cuota=1,
    cng_fecha_vencimiento=@fecha ;

  END LOOP my_loop;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcooperativadireccion`(IN `prdistrito` INT, IN `prdireccion` VARCHAR(200) CHARSET utf8)
    NO SQL
begin

	set @siguiente_numero = (
        select
        	max(cd.numero_orden)
        from
	    	cooperativa_direccion as cd
        where
        	cd.estado =1
    );
    

    insert into
    cooperativa_direccion
    set
    id_distrito = prdistrito ,
    direccion = prdireccion ,
    numero_orden = @siguiente_numero+1 ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzamanualcredito`(IN `prcredito` INT, IN `prtipocobranza` INT, IN `prfecha` DATE, IN `prcomprobante` VARCHAR(50) CHARSET utf8, IN `prtotal` FLOAT, IN `probservacion` VARCHAR(200) CHARSET utf8, IN `prusuarioalvis` INT, IN `prfechaactual` DATE)
    NO SQL
begin

	set @cliente = ( select c.id_cliente from creditos as c where c.id_credito=prcredito ) ;

	/* set @cobranzas = (
    	select
        	count(cm0.id_cobranza_manual)
        from
        	cobranza_manual as cm0
        where
        	cm0.id_cliente = @cliente
        and
        	cm0.id_tipo_cobranza_manual = prtipocobranza
        and
        	cm0.id_transaccion = prcredito
        and
        	cm0.fecha = prfecha
    );
    
    if @cobranzas > 0 then
    	call sp_eliminarcobranzamanualmasiva(1,prtipocobranza,prcredito,prfecha) ;
    end if ; */

	insert into
    	cobranza_manual
    SET
    	id_cliente = @cliente ,
        id_tipo_cobranza_manual = prtipocobranza ,
        tipo_transaccion = 1 ,
        id_transaccion = prcredito ,
        fecha = prfecha ,
        comprobante = prcomprobante ,
        id_vendedor = 0 , 
        total = prtotal ,
        observaciones = probservacion ;
     
    select @id:=LAST_INSERT_ID() as id;

	call sp_crearpagocredito(0,@id, prcredito, prtotal, prfecha) ;

	insert into
    	log
    set
    	id_usuario = prusuarioalvis,
        fecha = prfechaactual ,
        id_log_referencia = 17 ,
        id_log_accion = 1 ,
        id_referencia = @id ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprocesojudicial`(IN `prventa` INT, IN `prcredito` INT, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prinstancia` VARCHAR(50) CHARSET utf8, IN `prjuez` INT, IN `prespecialista` INT, IN `prfecha` DATE, IN `prsumilla` VARCHAR(50) CHARSET utf8, IN `prnumerocuotas` INT, IN `prtotal` FLOAT)
    MODIFIES SQL DATA
begin

	if prventa>0 then
    	set @tipo=2;
    	select
        v.id_cliente
        FROM
        venta as v
        WHERE
        v.idventa=prventa into @id_cliente;
	ELSEIF prcredito>0 THEN
    	set @tipo=1;
    	SELECT
        c.id_cliente
		FROM
        creditos as c
        where
        c.id_credito=prcredito into @id_cliente;
    END IF;
    
    insert into
    proceso_judicial
    set
    id_cliente=@id_cliente,
    id_venta=prventa,
    id_credito=prcredito,
    expediente=prexpediente,
    id_instancia_judicial=prinstancia,
    juez=prjuez,
    especialista=prespecialista,
    fecha_inicio=prfecha,
    sumilla=prsumilla,
    numero_cuotas=prnumerocuotas,
    total=prtotal;

    select @id:=last_insert_id() as id;

	insert into
	proceso_judicial_transacciones
    SET
    id_proceso=@id,
    tipo_transaccion=@tipo,
    id_transaccion= case when prventa>0 then prventa else prcredito end;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcreditocronogramaafiliacion`(IN `prcredito` INT, IN `prtipopago` INT, IN `prmonto` FLOAT, IN `prcuotas` INT, IN `prprimeracuota` DATE)
    NO SQL
BEGIN
	# Se coloca esta forma para asegurarnos que solo se genere una cuota
	INSERT INTO
    	credito_cronograma 
    set
        id_credito=prcredito,
        id_tipo_pago=prtipopago,
        monto_capital=prmonto,
        monto_interes=0,
        fecha_vencimiento=prprimeracuota;
	
    call sp_actualizarafiliacioncuotasalpresente(prcredito) ;
	/*
  DECLARE contador INT DEFAULT 0;

  my_loop: LOOP
    SET contador=contador+1;

    IF contador>prcuotas THEN
      LEAVE my_loop;
    END IF;

    INSERT INTO credito_cronograma 
    set
    id_credito=prcredito,
    id_tipo_pago=prtipopago,
    monto_capital=prmonto,
    monto_interes=0,
    fecha_vencimiento=DATE_ADD(prprimeracuota, interval (contador-1) month)
    ;

  END LOOP my_loop;
  */
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpresupuestoproducto`(IN `prpresupuesto` INT, IN `prproducto` INT, IN `prserie` INT, IN `prprecio` FLOAT)
    MODIFIES SQL DATA
insert into
presupuesto_producto
set
id_presupuesto=prpresupuesto,
id_producto=prproducto,
id_producto_serie=prserie,
pspp_precio=prprecio$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproductoseriequitar`(IN `prid` INT)
    MODIFIES SQL DATA
UPDATE
producto_serie
set ps_estado=0
WHERE
id_producto_serie=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearperfil`(IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prresumen` VARCHAR(200) CHARSET utf8, IN `prpermisos` TEXT CHARSET utf8)
    MODIFIES SQL DATA
INSERT INTO
perfil
SET
nombre=prnombre,
permisos_categorias=prresumen,
permisos=prpermisos$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarventagarante`(IN `prventagarante` INT, IN `prcliente` INT, IN `prdni` VARCHAR(255) CHARSET utf8, IN `prcip` VARCHAR(255) CHARSET utf8, IN `prplanilla` VARCHAR(255) CHARSET utf8, IN `prletra` VARCHAR(255) CHARSET utf8, IN `prvoucher` VARCHAR(255) CHARSET utf8)
    NO SQL
update
venta_garante
set
id_cliente=prcliente,
vtg_dni_pdf=prdni,
vtg_cip_pdf=prcip,
vtg_planilla_pdf=prplanilla,
vtg_letra_pdf=prletra,
vtg_voucher_pdf=prvoucher
where
id_venta_garante=prventagarante$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearlog`(IN `prusuario` INT, IN `prfecha` DATETIME, IN `prreferencia` INT, IN `praccion` INT, IN `pridreferencia` INT)
    NO SQL
begin

	-- Si se da el ingreso al sistema, se verifica que sea la primera vez en el día
	if prreferencia = 0 and praccion = 0 THEN
    	set @total = (
        	SELECT
            count(log.id_log)
            from
            log
            where
            log.id_usuario=prusuario
            and
            date(prfecha) = date(log.fecha)
        );
        
        if @total = 0 then
		    insert into
            log
            set
            id_usuario = prusuario ,
            fecha = prfecha ,
            id_log_referencia = prreferencia ,
            id_log_accion = praccion ,
            id_referencia = pridreferencia ;
        end if ;
    else 
        insert into
        log
        set
        id_usuario = prusuario ,
        fecha = prfecha ,
        id_log_referencia = prreferencia ,
        id_log_accion = praccion ,
        id_referencia = pridreferencia ;
    end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarventadocumentos`(IN `prid` INT, IN `prfoto` VARCHAR(255) CHARSET utf8, IN `prcontrato` VARCHAR(255) CHARSET utf8, IN `prdni` VARCHAR(255) CHARSET utf8, IN `prcip` VARCHAR(255) CHARSET utf8, IN `prplanilla` VARCHAR(255) CHARSET utf8, IN `prletra` VARCHAR(255) CHARSET utf8, IN `prvoucher` VARCHAR(255) CHARSET utf8, IN `prautorizacion` VARCHAR(255) CHARSET utf8, IN `proficio` VARCHAR(200) CHARSET utf8, IN `protros` VARCHAR(100) CHARSET utf8)
    NO SQL
BEGIN

update
venta
set
vnt_foto=prfoto,
vnt_contrato_pdf=prcontrato,
vnt_dni_pdf=prdni,
vnt_cip_pdf=prcip,
vnt_planilla_pdf=prplanilla,
vnt_letra_pdf=prletra,
vnt_voucher_pdf=prvoucher,
vnt_autorizacion_pdf=prautorizacion,
vnt_oficio_pdf=proficio,
otros_pdf=protros
where
idventa=prid;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcreditovendedores`(IN `prcredito` INT, IN `prvendedor` INT)
    NO SQL
begin

	set @total = (
    	select
        	count(*)
        from
        	credito_vendedores as cv
        where
        	cv.id_credito=prcredito
        and
        	cv.id_vendedor=prvendedor
    );
    
    if @total > 0 then
    	update
        credito_vendedores
        set
        estado=1
        where
        id_credito=prcredito
        and
        id_vendedor=prvendedor ;
    else
    	insert into
        credito_vendedores
        set
        id_credito=prcredito,
        id_vendedor=prvendedor ;
    end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearjuzgadodistrito`(IN `prnombre` VARCHAR(100) CHARSET utf8)
    MODIFIES SQL DATA
insert into
juzgado_distrito
set
nombre=prnombre$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarventaestadointeres`(IN `prventa` INT, IN `prestadointeres` INT)
    NO SQL
BEGIN

	update
    venta
    set
    estado_interes = prestadointeres
    where
    idventa = prventa ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzamanualventa`(IN `prventa` INT, IN `prtipocobranza` INT, IN `prfecha` DATE, IN `prcomprobante` VARCHAR(50) CHARSET utf8, IN `prtotal` FLOAT, IN `probservacion` VARCHAR(200) CHARSET utf8, IN `prusuarioalvis` INT, IN `prfechaactual` DATE)
    NO SQL
begin


	set @cliente = ( select v.id_cliente from venta as v where v.idventa=prventa ) ;
	/*
	set @cobranzas = (
    	select
        	count(cm0.id_cobranza_manual)
        from
        	cobranza_manual as cm0
        where
        	cm0.id_cliente = @cliente
        and
        	cm0.id_tipo_cobranza_manual = prtipocobranza
        and
        	cm0.id_transaccion = prventa
        and
        	cm0.fecha = prfecha
    );
    
    if @cobranzas > 0 then
    	call sp_eliminarcobranzamanualmasiva(2,prtipocobranza,prventa,prfecha) ;
    end if ;
    */
	insert into
    	cobranza_manual
    SET
    	id_cliente = @cliente ,
        id_tipo_cobranza_manual = prtipocobranza ,
        tipo_transaccion = 2 ,
        id_transaccion = prventa,
        fecha = prfecha ,
        comprobante = prcomprobante ,
        id_vendedor = 0 , 
        total = prtotal ,
        observaciones = probservacion ;
        
     select @id:=LAST_INSERT_ID() as id;

	call sp_crearpagoventa(0, @id, prventa, prtotal, prfecha) ;

	insert into
    	log
    set
    	id_usuario = prusuarioalvis,
        fecha = prfechaactual ,
        id_log_referencia = 17 ,
        id_log_accion = 1 ,
        id_referencia = @id ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproductoventasalida`(IN `prventa` INT, IN `prserie` INT, IN `prmonto` FLOAT)
    NO SQL
BEGIN

update
venta_producto
set
vprd_precio=prmonto
where
id_venta=prventa
and
id_producto_serie=prserie;

update
salida_detalle_producto
set
sdp_precio_venta=prmonto
where
id_venta=prventa
and
id_producto_serie=prserie;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarventaestadopenalidad`(IN `prventa` INT, IN `prestadopenalidad` INT)
    NO SQL
begin

	update
    venta
    set
    estado_penalidad = prestadopenalidad
    where
    idventa = prventa ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpenalidadcreditonueva`(IN `prcredito` INT, IN `prcuotapenalidad` FLOAT, IN `prnumerocuotas` INT, IN `prfechainicio` DATE, IN `prtipopago` INT)
    NO SQL
begin

	call sp_eliminarcreditocuotasxfecha(prcredito, prfechainicio, null) ;
    call sp_crearpenalidadcredito(prcredito, prcuotapenalidad, prnumerocuotas, prfechainicio, prtipopago) ;
    call sp_recalcularpagoscredito(prcredito, prfechainicio, null) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarprovincia`(IN `prid` INT, IN `prdepartamento` INT, IN `prnombre` VARCHAR(40) CHARSET utf8)
    MODIFIES SQL DATA
update
provincia
set
id_departamento = prdepartamento,
prv_nombre = prnombre
where
id_provincia = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprocesocronograma`(IN `prproceso` INT, IN `prcuota` FLOAT, IN `prfecha` DATE)
    NO SQL
insert into
proceso_judicial_cronograma
set
id_proceso=prproceso,
monto_cuota=prcuota,
fecha_vencimiento=prfecha$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearjuzgadoinstancia`(IN `prdistritojudicial` INT, IN `prinstanciajudicial` VARCHAR(100) CHARSET utf8)
    MODIFIES SQL DATA
insert into
juzgado_instancia
set
id_juzgado_distrito=prdistritojudicial,
nombre=prinstanciajudicial$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearllegadavendedores`(IN `prid` INT, IN `prfecha` DATE, IN `probservaciones` VARCHAR(255) CHARSET utf8)
    NO SQL
update
salida_cabecera
set
sc_estado=2,
sc_fecha_llegada=prfecha,
sc_observaciones_llegada=probservaciones
where
idsalida_vendedor=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creardepartamento`(IN `prnombre` VARCHAR(40) CHARSET utf8)
    MODIFIES SQL DATA
insert into departamento set dpt_nombre=UPPER(prnombre)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpenalidadventanueva`(IN `prventa` INT, IN `prcuotapenalidad` FLOAT, IN `prnumerocuotas` INT, IN `prfechainicio` DATE, IN `prtipopago` INT)
    NO SQL
begin


	call sp_eliminarventacuotasxfecha(prventa, prfechainicio, null) ;
    call sp_crearpenalidadventa(prventa, prcuotapenalidad, prnumerocuotas, prfechainicio, prtipopago) ;
    call sp_recalcularpagosventa(prventa, prfechainicio, null) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprocesojudicialtransacciones`(IN `prproceso` INT, IN `prtipo` INT, IN `prtransaccion` INT)
    MODIFIES SQL DATA
insert into
proceso_judicial_transacciones
set
id_proceso = prproceso ,
tipo_transaccion = prtipo ,
id_transaccion = prtransaccion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarproveedor`(IN `pprv_idproveedor` INT(11), IN `pprv_idtipodocumento` INT(4), IN `pprv_documento` VARCHAR(11) CHARSET utf8, IN `pprv_nombre` VARCHAR(60) CHARSET utf8, IN `pprv_representante_legal` VARCHAR(40) CHARSET utf8, IN `pprv_observacion` VARCHAR(255) CHARSET utf8)
    MODIFIES SQL DATA
    COMMENT 'Actualiza Proveedor'
UPDATE proveedor
SET prv_tipo_documento = pprv_idtipodocumento,
	prv_documento = pprv_documento,
	prv_nombre = pprv_nombre,
	prv_representante_legal = pprv_representante_legal,
	prv_observacion = pprv_observacion
WHERE idproveedor = pprv_idproveedor$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearmarca`(IN `idtipoproducto` INT, IN `marca` VARCHAR(45) CHARSET utf8)
    MODIFIES SQL DATA
begin

INSERT marca
SET id_tipo_producto = idtipoproducto,
mrc_nombre = TRIM(marca);

select last_insert_id() as id;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearliquidacion`(IN `prtipo` INT, IN `prtrasaccion` INT, IN `prmonto` DECIMAL(7,2), IN `prfecha` DATE, IN `prusuario` INT, IN `probservacion` VARCHAR(255) CHARSET utf8)
    NO SQL
begin

    insert into
    liquidaciones
    SET
    tipo=prtipo ,
    id_transaccion=prtrasaccion ,
    id_credito = if(prtipo=1,prtrasaccion,0) ,
    id_venta = if(prtipo=2,prtrasaccion,0) ,
    monto=ROUND(prmonto,2) ,
    fecha=prfecha ,
    id_usuario=prusuario ,
    observacion = probservacion ;
    
    -- Se actualiza el proceso judicial de estado 1 'activo' a estado 5 'cancelado'
    update
    proceso_judicial as pj
    inner join proceso_judicial_transacciones as pjt on
    pj.id_proceso_judicial=pjt.id_proceso_judicial_transacciones
    set
    pj.estado=5
    where
    pj.estado=1
    and
    pjt.tipo_transaccion=prtipo
    and
    pjt.id_transaccion=prtrasaccion;
    
    select LAST_INSERT_ID() as id ;
    
 end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearinstitucion`(IN `prnombre` VARCHAR(60) CHARSET utf8, IN `prabreviatura` VARCHAR(30) CHARSET utf8, IN `prrepresentante` VARCHAR(40) CHARSET utf8, IN `prdistrito` INT, IN `prdireccion` VARCHAR(60) CHARSET utf8, IN `prtelefono` VARCHAR(20) CHARSET utf8, IN `prcodigocooperativa` VARCHAR(25) CHARSET utf8)
    NO SQL
begin

	insert into
    institucion
    set
    inst_nombre=prnombre,
    isnt_abreviatura=prabreviatura,
    isnt_representante_legal=prrepresentante,
    id_distrito=prdistrito,
    inst_direccion=prdireccion,
    inst_telefono=prtelefono,
    inst_codigo_cooperativa=prcodigocooperativa;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartransacciondetallecompra`(IN `prcabecera` INT, IN `prproducto` INT, IN `prserie` VARCHAR(40) CHARSET utf8, IN `prcolor` VARCHAR(40) CHARSET utf8, IN `pralmacenamiento` VARCHAR(40) CHARSET utf8, IN `prprecio` FLOAT, IN `prcantidad` INT, IN `probservacion` VARCHAR(40) CHARSET utf8)
    NO SQL
BEGIN

insert INTO
producto_serie
SET
id_producto=prproducto,
ps_serie=prserie,
ps_color=prcolor,
ps_almacenamiento=pralmacenamiento,
ps_precio_compra=prprecio;

select @id:=LAST_INSERT_ID() as idproductoserie;

insert into
transaccion_detalle
SET
id_movimiento_cabecera=prcabecera,
id_producto_serie=@id,
tscdet_cantidad=prcantidad,
tscdet_precio=prprecio,
tscdet_observacion=probservacion ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartalonarios`(IN `prserie` VARCHAR(8) CHARSET utf8, IN `prinicio` INT, IN `prfin` INT)
    MODIFIES SQL DATA
    COMMENT 'Es una prueba'
BEGIN

	set @existe = (
        select
        count(t.id_talonario)
        from
        talonario as t
        where
        t.tln_serie = prserie
    ) ;

	if @existe = 0 then
    	WHILE prinicio  <= prfin DO
         	INSERT INTO
        	talonario
            set
            tln_serie=prserie,
            tln_numero=prinicio;
            SET prinicio = prinicio +1;

       	END WHILE ;
    end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearsede`(IN `prinstitucion` INT, IN `prnombre` VARCHAR(60) CHARSET utf8, IN `prabreviatura` VARCHAR(40) CHARSET utf8, IN `prrepresentante` VARCHAR(40) CHARSET utf8, IN `prdistrito` INT, IN `prdireccion` VARCHAR(60) CHARSET utf8, IN `prtelefono` VARCHAR(20) CHARSET utf8, IN `prcodigocooperativa` VARCHAR(20) CHARSET utf8, IN `prplantillatarjeta` VARCHAR(40) CHARSET utf8, IN `prplantillaautorizacion` VARCHAR(40) CHARSET utf8, IN `prplantilladdjj` VARCHAR(40) CHARSET utf8, IN `prplantillacompromiso` VARCHAR(40) CHARSET utf8, IN `prplantillattransaccion` VARCHAR(40) CHARSET utf8)
    NO SQL
insert into
sede
set
id_institucion=prinstitucion,
sd_nombre=prnombre,
sd_abreviatura=prabreviatura,
sd_representante_legal=prrepresentante,
id_distrito=prdistrito,
sd_direccion=prdireccion,
sd_telefono=prtelefono,
sd_codigo_cooperativa=prcodigocooperativa,
plantilla_tarjeta_socio=prplantillatarjeta,
plantilla_autorizacion=prplantillaautorizacion,
plantilla_ddjj=prplantilladdjj,
plantilla_compromiso=prplantillacompromiso,
plantilla_transaccion=prplantillattransaccion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprovincia`(IN `prdepartamento` INT, IN `prnombre` VARCHAR(40) CHARSET utf8)
    MODIFIES SQL DATA
insert into
provincia
set
id_departamento=prdepartamento,
prv_nombre=UPPER(prnombre)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearsalidavendedorproducto`(IN `prcabecera` INT, IN `prserie` INT, IN `prprecio` FLOAT, IN `prfecha` DATE)
    MODIFIES SQL DATA
begin

INSERT INTO
salida_detalle_producto
SET
id_salida_cabecera=prcabecera,
id_producto_serie=prserie,
sdp_precio_minimo=prprecio,
sdp_fecha_entrega=prfecha;

select
@almacen:=tc.id_almacen,
@precio:=td.tscdet_precio
from
transaccion_detalle as td
inner join transaccion_cabecera as tc on
td.id_movimiento_cabecera=tc.idtransaccion_cabecera
inner join tipo_transaccion as t on
tc.id_tipo_transaccion=t.idtipo_transaccion
where
t.ttsc_tipo=1
and
td.id_producto_serie=prserie
order by tc.tsccab_fecha desc
limit 1;

select
@fecha:=v.sc_fecha,
@documento:=v.sc_codigo
from
salida_cabecera as v
where
v.idsalida_vendedor=prcabecera;

insert into
transaccion_cabecera
set
id_almacen=@almacen,
id_tipo_transaccion=4,
tsccab_referencia=3,
id_salida_venta=prcabecera,
tsccab_fecha=CONVERT(@fecha,char),
tsccab_documento_referencia=CONVERT(@documento,char),
tsccab_observacion="AJUSTE DE SALIDA DE VENDEDORES";

select @id:=LAST_INSERT_ID();

insert into
transaccion_detalle
set
id_movimiento_cabecera=@id,
id_producto_serie=prserie,
tscdet_cantidad=-1,
tscdet_precio=@precio;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartrabajador`(IN `prdocumento` VARCHAR(10) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prcargo` VARCHAR(40) CHARSET utf8, IN `prhoraingreso` TIME, IN `prhorasalida` TIME)
    NO SQL
insert into
trabajadores
set
documento=prdocumento,
nombre=prnombre,
cargo=prcargo,
hora_ingreso=prhoraingreso,
hora_salida=prhorasalida$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpenalidadcredito`(IN `prcredito` INT, IN `prcuotapenalidad` FLOAT, IN `prnumerocuotas` INT, IN `prfechainicio` DATE, IN `prtipopago` INT)
    NO SQL
begin

	DECLARE contador INT DEFAULT 0;
    
    update
    creditos
    set
    estado_penalidad = 3
    where
    id_credito = prcredito ;
    
	update
    credito_cronograma
    set
    tipo_cuota=2
    where
    id_credito=prcredito 
    and
    tipo_cuota=1;

	update
    credito_cronograma
    set
    estado = 3
    where
    tipo_cuota=3
    and
    id_credito=prcredito ;
    
  	my_loop: LOOP
    SET contador=contador+1;

    IF contador>prnumerocuotas THEN
      LEAVE my_loop;
    END IF;

	if prfechainicio = LAST_DAY(prfechainicio) THEN
    	set @fecha = LAST_DAY(DATE_ADD(prfechainicio, interval (contador-1) month)) ;
    else
    	set @fecha = DATE_ADD(prfechainicio, interval (contador-1) month) ;
    end if ;

    INSERT INTO credito_cronograma 
    set
    id_credito=prcredito,
    id_tipo_pago=prtipopago,
    monto_capital=0,
    monto_interes=prcuotapenalidad,
    tipo_cuota=1,
    fecha_vencimiento=@fecha ;

  END LOOP my_loop;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearproductoserie`(IN `prproducto` INT, IN `prserie` VARCHAR(40) CHARSET utf8, IN `prcolor` VARCHAR(40) CHARSET utf8, IN `pralmacenamiento` VARCHAR(40) CHARSET utf8, IN `prprecio` FLOAT)
    NO SQL
BEGIN

insert INTO
producto_serie
SET
id_producto=prproducto,
ps_serie=prserie,
ps_color=prcolor,
ps_almacenamiento=pralmacenamiento,
ps_precio_compra=prprecio;

Select LAST_INSERT_ID() as idproductoserie;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarrelevanciadireccion`(IN `prid` INT)
    NO SQL
begin

select
@id:=id_cliente
from
cliente_direccion
where
idcliente_direccion=prid;

update
cliente_direccion
set
drc_relevancia=2
where
id_cliente=@id;

update
cliente_direccion
set
drc_relevancia=1
where
idcliente_direccion=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearsalidavendedorvendedor`(IN `pridcabecera` INT, IN `prvendedor` INT, IN `prcomisionefectiva` FLOAT, IN `prcomisionretenida` FLOAT)
    MODIFIES SQL DATA
INSERT
INTO
salida_detalle_vendedor
SET
id_salida_cabecera=pridcabecera,
id_vendedor=prvendedor,
sdv_comision_efectiva=prcomisionefectiva,
sdv_comision_retenida=prcomisionretenida$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearproveedor`(IN `pprv_idtipodocumento` INT, IN `pprv_documento` VARCHAR(11) CHARSET utf8, IN `pprv_nombre` VARCHAR(60) CHARSET utf8, IN `pprv_representante_legal` VARCHAR(40) CHARSET utf8, IN `pprv_observacion` VARCHAR(255) CHARSET utf8)
    MODIFIES SQL DATA
    COMMENT 'CRear Proveedor'
INSERT INTO proveedor
SET prv_tipo_documento = pprv_idtipodocumento,
	prv_documento = pprv_documento,
	prv_nombre = pprv_nombre,
	prv_representante_legal = pprv_representante_legal,
	prv_observacion = pprv_observacion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventacronogramainteres1`(IN `prventa` INT)
    NO SQL
BEGIN

	# Se consulta si la venta puede tener interés
	set @estado_interes = (
        select
        v0.estado_interes
        from
        venta as v0
        where
        v0.idventa = prventa
    );
    
    -- Se verifica si hay cuotas pendientes
    set @ultima_fecha_cronograma = (
    	select
        MAX(vc0.cng_fecha_vencimiento)
        from
        venta_cronograma as vc0
        where
        vc0.id_venta = prventa
        and
        vc0.cng_estado = 1
    );
    
    -- Se calculan los intereses si el crédito tiene activa la opción de calcular intereses y si la última fecha del cronograma es menor que la actual
    if @estado_interes <> 2 and @ultima_fecha_cronograma < NOW() THEN
        -- Se verifica si se ha pagado algo de los intereses
        set @pagado = (
            select
                sum(vc.cng_monto_pagado)
            from
                venta as v
            inner join
                venta_cronograma as vc
            on
                v.idventa = vc.id_venta
            WHERE
                v.estado_interes = 3
            and
                vc.id_venta = prventa
            and
                vc.tipo_cuota = 3
            and
                vc.cng_estado = 1
            group by
                vc.id_venta
        );

        -- Los intereses se vuelven a calcular solo si no se ha pagado alguna cuota ya existente
        if @pagado > 0 then
            select 0 ;
        else

            call sp_eliminarventacronogramainteres(prventa) ;

            UPDATE
                venta
            set
                estado_interes = 3
            where
                idventa=prventa ;

            call sp_crearventacronogramainteres2(prventa);

        end if ;
    end if ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearsalidavendedorgasto`(IN `prcabecera` INT, IN `prfecha` DATE, IN `prvendedor` INT, IN `prmonto` FLOAT, IN `prtipo` INT, IN `probservacion` VARCHAR(100) CHARSET utf8)
    NO SQL
insert into
salida_detalle_gasto
set
id_salida_cabecera=prcabecera,
sdg_fecha=prfecha,
id_vendedor=prvendedor,
sdg_monto=prmonto,
sdg_asignacion=prtipo,
sdg_observacion=probservacion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_buscarcliente`(IN `prdni` VARCHAR(10) CHARSET utf8)
    NO SQL
BEGIN

select
c.idcliente as id,
c.clt_dni as dni,
c.clt_nombre as nombre,
c.clt_codigo as codigo,
c.id_institucion as id_institucion,
c.id_sede as id_sede,
s.sd_nombre as sede,
s.plantilla_tarjeta_socio as plantilla_tarjeta,
s.plantilla_ddjj as plantilla_ddjj,
s.plantilla_autorizacion as plantilla_autorizacion,
s.plantilla_transaccion as plantilla_transaccion,
s.plantilla_compromiso as plantilla_compromiso,
s.parametro_condicion as parametro_condicion,
s.parametro_domicilio as parametro_domicilio,
s.parametro_autorizacion_1 as parametro_autorizacion_1,
s.parametro_autorizacion_2 as parametro_autorizacion_2,
c.id_sub_sede as id_subsede,
ssd.ssd_nombre as subsede,
c.id_cargo as id_cargo,
cr.crg_nombre as cargo_nombre,
c.id_cargo_estado as id_cargo_estado,
cg.cstd_nombre as cargo_estado,
c.clt_cip as cip,
case c.clt_email
when '' then REPLACE(concat(LCASE(SUBSTRING_INDEX(TRIM(SUBSTRING_INDEX(c.clt_nombre,',',-1)),' ',1)),LCASE(SUBSTRING_INDEX(c.clt_nombre,' ',1)),'@gmail.com'),"ñ","n")
when 'N/A' then REPLACE(concat(LCASE(SUBSTRING_INDEX(TRIM(SUBSTRING_INDEX(c.clt_nombre,',',-1)),' ',1)),LCASE(SUBSTRING_INDEX(c.clt_nombre,' ',1)),'@gmail.com'),"ñ","n")
else c.clt_email
end as email,
case c.clt_email
when '' then 0
when 'N/A' then 0
else 1
end as email_real,
case c.clt_casilla
when '' then "0"
when 'N/A' then "0"
else c.clt_casilla
end as casilla,
case c.clt_casilla
when '' then 0
when 'N/A' then 0
else 1
end as casilla_real,
c.clt_trabajo as trabajo,
c.id_distrito_trabajo as id_trabajo_distrito,
dd.dst_nombre as trabajo_distrito,
dp.id_provincia as id_trabajo_provincia,
dp.prv_nombre as trabajo_provincia,
dt.id_departamento as id_trabajo_departamento,
dt.dpt_nombre as trabajo_departamento,
c.clt_foto as foto,
cdt.fecha as fecha_afiliacion
FROM cliente as c
inner join cargo_estado as cg on
c.id_cargo_estado=cg.id_cargo_estado
inner join cargo as cr on
c.id_cargo=cr.id_cargo
INNER JOIN subsede as ssd on
c.id_sub_sede = ssd.id_subsede
INNER JOIN sede as s on
c.id_sede = s.id_sede
INNER JOIN institucion as inst on
c.id_institucion = inst.id_institucion
left join distrito as dd on
c.id_distrito_trabajo=dd.id_distrito
left join provincia as dp on
dd.id_provincia=dp.id_provincia
left join departamento as dt on
dp.id_departamento=dt.id_departamento
left join creditos as cdt on
(c.idcliente = cdt.id_cliente and cdt.tipo=1 and cdt.estado=1)
where
c.clt_dni=prdni
and
c.clt_estado=1;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearsubsede`(IN `prsede` INT, IN `prnombre` VARCHAR(60) CHARSET utf8, IN `prabreviatura` VARCHAR(40) CHARSET utf8, IN `prrepresentante` VARCHAR(40) CHARSET utf8, IN `prdistrito` INT, IN `prdireccion` VARCHAR(60) CHARSET utf8, IN `prtelefono` VARCHAR(20) CHARSET utf8, IN `prcodigocooperativa` VARCHAR(25) CHARSET utf8)
    NO SQL
insert into
subsede
set
id_sede=prsede,
ssd_nombre=prnombre,
ssd_abreviatura=prabreviatura,
ssd_representante_legal=prrepresentante,
id_distrito=prdistrito,
ssd_direccion=prdireccion,
ssd_telefono=prtelefono,
ssd_codigo_cooperativa=prcodigocooperativa$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearsalidavendedor`(IN `prcodigo` INT, IN `prsucursal` INT, IN `pralmacen` INT, IN `prfecha` DATE, IN `prdestino` VARCHAR(100) CHARSET utf8, IN `prguia` VARCHAR(10) CHARSET utf8, IN `prvehiculoplaca` VARCHAR(10) CHARSET utf8, IN `prchoferdni` VARCHAR(10) CHARSET utf8, IN `prchofernombre` VARCHAR(50) CHARSET utf8, IN `probservacion` VARCHAR(255) CHARSET utf8)
    MODIFIES SQL DATA
BEGIN

INSERT INTO
salida_cabecera
SET
sc_codigo=prcodigo,
id_sucursal=prsucursal,
id_almacen=pralmacen,
sc_fecha=prfecha,
sc_destino=prdestino,
sc_guia=prguia,
sc_vehiculo_placa=prvehiculoplaca,
sc_chofer_dni=prchoferdni,
sc_chofer_nombre=prchofernombre,
sc_observacion=probservacion;
select LAST_INSERT_ID() as prid;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcreditocronogramainteres1`(IN `prcredito` INT)
    NO SQL
BEGIN

	-- Se verifica que el préstamo no sea una afiliación
	set @tipo_credito = (
        select
        c0.tipo
        from
        creditos as c0
        where
        c0.id_credito = prcredito
    );
    
	-- Se verifica si el préstamo puede tener interés
	set @estado_interes = (
        select
        c0.estado_interes
        from
        creditos as c0
        where
        c0.id_credito = prcredito
    );
    
    -- Se verifica si hay cuotas pendientes
    set @ultima_fecha_cronograma = (
    	select
        MAX(cc0.fecha_vencimiento)
        from
        credito_cronograma as cc0
        where
        cc0.id_credito = prcredito
        and
        cc0.estado = 1
    );
    
    -- Se calculan los intereses si el crédito tiene activa la opción de calcular intereses y si la última fecha del cronograma es menor que la actual
    if @tipo_credito = 2 and @estado_interes <> 2 and @ultima_fecha_cronograma < NOW() THEN
        -- Se verifica si se ha pagado algo de los intereses
        set @pagado = (
            select
                sum(cc.monto_pagado)
            from
                creditos as c
            inner join
                credito_cronograma as cc
            on
                c.id_credito = cc.id_credito
            WHERE
                c.estado_interes = 3
            and
                cc.id_credito = prcredito
            and
                cc.tipo_cuota = 3
            and
                cc.estado <> 3
            group by
                c.id_credito
        );

        -- Los intereses se vuelven a calcular solo si no se ha pagado alguna cuota ya existente
        if @pagado > 0 then
            select 0 ;
        else

            call sp_eliminarcreditocronogramainteres(prcredito) ;

	        call sp_crearcreditocronogramainteres2(prcredito);
            
            UPDATE
                creditos
            set
                estado_interes = 3
            where
                id_credito=prcredito ;
                
        end if ;
    end if ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartalonariosadjuntos`(IN `prtalonario` INT, IN `prpdfcontrato` VARCHAR(150) CHARSET utf8, IN `prtipopago` INT, IN `prcliente` INT, IN `prfecha` DATE, IN `prmonto` FLOAT, IN `prcuotas` INT, IN `probservacion` VARCHAR(200) CHARSET utf8)
    NO SQL
begin

	update
    talonario_adjuntos
    set
    estado=0
    where
    id_talonario=prtalonario ;

	insert into
    talonario_adjuntos
    set
    id_talonario=prtalonario,
    pdf_contrato=prpdfcontrato,
    tipo_pago=prtipopago,
    id_cliente=prcliente,
    fecha=prfecha,
    monto=prmonto,
    cuotas=prcuotas,
    observacion=probservacion;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarverificartransaccioncronograma`(IN `prcliente` INT)
    NO SQL
begin

	update
    venta_cronograma as vc
    inner join venta as v on
    vc.id_venta=v.idventa
    set
    vc.verificado=1
    where
    vc.cng_estado=2
    and
    v.id_cliente=prcliente;
    
    update
    credito_cronograma as cc
    inner join creditos as c on
    cc.id_credito=c.id_credito
    set
    cc.verificado=1
    where
    cc.estado=2
    and
    c.id_cliente=prcliente;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearretornovendedortalonario`(IN `prtalonario` INT, IN `prestado` INT)
    NO SQL
update
talonario
set
id_salida_cabecera=NULL,
tln_estado=prestado
where
id_talonario=prtalonario$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventagarante`(IN `prventa` INT, IN `prcliente` INT, IN `prtelefono` VARCHAR(11) CHARSET utf8, IN `prdireccion` VARCHAR(100) CHARSET utf8, IN `prdni` VARCHAR(255) CHARSET utf8, IN `prcip` VARCHAR(255) CHARSET utf8, IN `prplanilla` VARCHAR(255) CHARSET utf8, IN `prletra` VARCHAR(255) CHARSET utf8, IN `prvoucher` VARCHAR(255) CHARSET utf8)
    NO SQL
insert into
venta_garante
set
id_venta=prventa,
id_cliente=prcliente,
vtg_telefono=prtelefono,
vtg_direccion=prdireccion,
vtg_dni_pdf=REPLACE(prdni,' ',''),
vtg_cip_pdf=REPLACE(prcip,' ',''),
vtg_planilla_pdf=REPLACE(prplanilla,' ',''),
vtg_letra_pdf=REPLACE(prletra,' ',''),
vtg_voucher_pdf=REPLACE(prvoucher,' ','')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventacronogramainteres2`(IN `prventa` INT)
    NO SQL
begin


	-- Primero se verifica si en el crédito se creó una penalidad
	set @cuotas_reemplazadas = (select
    	count(vc0.id_venta_cronograma)
    from
    	venta_cronograma as vc0
    WHERE
    	vc0.id_venta=prventa
    and
    	vc0.tipo_cuota=2
	) ;
	
	-- Si hay penalidad, se hacen los cálculos en base a las cuotas anteriores(tipo 2). Sino en base a las actuales (tipo 1)
	if @cuotas_reemplazadas > 0 then
        set @maxima_fecha = (
            select
                max(vc1.cng_fecha_vencimiento)
            from
                venta_cronograma as vc1
            where
                vc1.id_venta=prventa
            and
                vc1.tipo_cuota=2
            and
                vc1.cng_estado<>3
            group by
                vc1.id_venta
        );
	else
    	set @maxima_fecha = (
            select
                max(vc1.cng_fecha_vencimiento)
            from
                venta_cronograma as vc1
            where
                vc1.id_venta=prventa
            and
                vc1.tipo_cuota=1
            and
                vc1.cng_estado<>3
            group by
                vc1.id_venta
        );
	end if ;

	set @total = (
        select
        vnt_total
        from
        venta
        where
        idventa=prventa
    ) ;

	set @pago_manual = (
    	SELECT
            sum(cdm.monto)
        from
            cobranza_detalle as cdm
        inner join
            cobranza_manual as c1
        on
            cdm.id_cobranza_manual=c1.id_cobranza_manual
        inner join
            venta_cronograma as vc
        on
            cdm.id_venta_cronograma=vc.id_venta_cronograma
        where
            vc.id_venta=prventa
        and
            c1.estado=1
        and
            cdm.estado=1
        and
        	c1.fecha <= @maxima_fecha
        group BY
            vc.id_venta
        
    ) ;

	set @pago_directo = (
    	SELECT 
            sum(cd.monto)
        FROM
            cobranza_detalle as cd
        inner join
            cobranza_directa as c2
        on
            cd.id_cobranza_directa=c2.id_cobranza_directa
        inner join
            venta_cronograma as vc
        on
            cd.id_credito_cronograma=vc.id_venta_cronograma
        where
            cd.estado=1
        and
            c2.estado=1
        AND
            vc.id_venta=prventa
        and
        	c2.fecha <= @maxima_fecha
        group by
            vc.id_venta
    ) ;


	set @pago_planilla = (
    	SELECT 
            sum(cd.monto)
        FROM
            cobranza_detalle as cd
        inner join
            cobranza_archivos_detalle as cad
        on
            cd.id_cobranza_archivos=cad.id_cobranza_detalle
        inner join
            cobranza_archivos_cabecera as cac
        on
            ( cad.id_cobranza=cac.id_cobranza )
        inner join
            venta_cronograma as vc
        on
            cd.id_venta_cronograma=vc.id_venta_cronograma
        where
            cd.estado=1
        and
            cad.estado=1
        and
            cac.estado=1
        and
            vc.id_venta=prventa
        and
        	cac.fecha_fin <= @maxima_fecha
        group by
            vc.id_venta
    ) ;

	-- Se consulta la tasa de interés del préstamo
	set @interes = 15 ;
    
    set @total_pagos = coalesce(@pago_planilla,0) + coalesce(@pago_directo,0) + coalesce(@pago_manual,0) ;

	-- Se debe considerar el 10% del interés del crédito
	set @interes_considerado = (@interes*0.01)*0.1 ;
    
    -- Se calcula la cuota del interés
    set @cuota = round( (@total-@total_pagos)*@interes_considerado, 2) ;
    
    -- Se generan los intereses si la cuota es mayor a cero
    if @cuota > 0 then
    
        #### Se crean las cuotas del crédito #####
        -- Se busca el tipo de pago del crédito
        set @tipo_pago = (
            select
                id_tipopago
            from
                venta
            where
                idventa=prventa
            and
                vnt_estado<>3
        );

        -- Se busca la fecha de la última cuota del crédito. No es la misma de arriba, porque aquí se deben considerar las cuotas en caso haya una penalidad
        set @ultima_fecha = (
            select
                max(vc1.cng_fecha_vencimiento)
            from
                venta_cronograma as vc1
            where
                vc1.id_venta=prventa
            and
                vc1.cng_estado<>3
            group by
                vc1.id_venta
        ) ;

        -- Se crea esta variable para crear las cuotas del crédito
        set @contador = 0 ;

        actualizacionCuotas:LOOP

            SET @contador=@contador+1;

            set @fecha = LAST_DAY(date_add(@ultima_fecha,interval @contador month)) ;

            INSERT INTO venta_cronograma 
            set
            id_venta=prventa,
            id_tipo_pago=@tipo_pago,
            cng_monto_cuota=0,
            cng_interes=@cuota,
            tipo_cuota=3,
            cng_fecha_vencimiento=@fecha ;

            IF @fecha>now() THEN
              LEAVE actualizacionCuotas;
            END IF;

          END LOOP actualizacionCuotas;
		end if ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcapacidadpago`(IN `prcliente` INT, IN `prfecha` DATE)
    NO SQL
begin

delete from
capacidad_pago
where
cpg_fecha=prfecha
and
id_cliente=prcliente;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprocesojudicialmultiple`(IN `prcliente` INT, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prinstancia` VARCHAR(50) CHARSET utf8, IN `prjuez` INT, IN `prespecialista` INT, IN `prfecha` DATE, IN `prsumilla` VARCHAR(50) CHARSET utf8, IN `prnumerocuotas` INT, IN `prtotal` FLOAT)
    MODIFIES SQL DATA
begin

    insert into
    proceso_judicial
    set
    id_cliente=prcliente,
    id_venta=0,
    id_credito=0,
    expediente=prexpediente,
    id_instancia_judicial=prinstancia,
    juez=prjuez,
    especialista=prespecialista,
    fecha_inicio=prfecha,
    sumilla=prsumilla,
    numero_cuotas=prnumerocuotas,
    total=prtotal;

    select last_insert_id() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcobranzasmasivasxtransaccion`(IN `prtipotransaccion` INT, IN `prtransaccion` INT)
    NO SQL
begin
    
    -- Se eliminan solo cuando las cobranzas son de tipo 4 o 5
        
    if prtipotransaccion = 1 then 
    
    	update
            cobranza_manual as cm0
        inner join
        (
            select
            cd0.id_cobranza_manual as id_cobranza_manual
            from
            	cobranza_detalle as cd0
            inner join
            	credito_cronograma as cg0
            on
           		cd0.id_credito_cronograma = cg0.id_credito_cronograma
            where
            	cg0.tipo_cuota<>2
            group by
            	cd0.id_cobranza_manual
        ) as _detalle on
        cm0.id_cobranza_manual = _detalle.id_cobranza_manual
        set
            cm0.estado=0
        where
            cm0.tipo_transaccion = prtipotransaccion
        and
            ( cm0.id_tipo_cobranza_manual = 4 or cm0.id_tipo_cobranza_manual = 5 )
        and
            cm0.id_transaccion = prtransaccion ;

        update
            cobranza_detalle as cd0
        inner join
            cobranza_manual as cm0
        on
            cd0.id_cobranza_manual=cm0.id_cobranza_manual
        inner join
            credito_cronograma as cg0
        on
            cd0.id_credito_cronograma = cg0.id_credito_cronograma
        set
            cd0.estado = 0
        where
            cg0.tipo_cuota <> 2
        and
            cm0.tipo_transaccion = prtipotransaccion
        and
            ( cm0.id_tipo_cobranza_manual = 4 or cm0.id_tipo_cobranza_manual = 5 )
        and
            cm0.id_transaccion = prtransaccion ;   	

        update credito_cronograma as cg
        left join (
            select
            cd1.id_credito_cronograma as id_credito_cronograma ,
            coalesce(ROUND(sum(if(cd1.estado=1,cd1.monto,0)), 2),0) as monto
            from
            cobranza_detalle as cd1
            inner join credito_cronograma as cg on
            cd1.id_credito_cronograma = cg.id_credito_cronograma
            where
            cd1.estado=1
            and
            cg.id_credito = prtransaccion
            group by
            cd1.id_credito_cronograma
        ) as _detalle on
        cg.id_credito_cronograma = _detalle.id_credito_cronograma
        set
        cg.monto_pagado = coalesce(_detalle.monto,0) ,
        cg.fecha_cancelacion = null ,
        cg.estado = if(_detalle.monto=ROUND(cg.monto_capital+cg.monto_interes+cg.interes,2), 2, 1)
        where
        cg.tipo_cuota<>2 and
        cg.estado<>3 and
        cg.id_credito = prtransaccion ;

    elseif prtipotransaccion = 2 then 

		update
            cobranza_manual as cm0
        inner join
        (
            select
            cd0.id_cobranza_manual as id_cobranza_manual
            from
            	cobranza_detalle as cd0
            inner join
            	venta_cronograma as vg0
            on
           		cd0.id_venta_cronograma = vg0.id_venta_cronograma
            where
            	vg0.tipo_cuota<>2
            group by
            	cd0.id_cobranza_manual
        ) as _detalle on
        cm0.id_cobranza_manual = _detalle.id_cobranza_manual
        set
            cm0.estado=0
        where
            cm0.tipo_transaccion = prtipotransaccion
        and
            ( cm0.id_tipo_cobranza_manual = 4 or cm0.id_tipo_cobranza_manual = 5 )
        and
            cm0.id_transaccion = prtransaccion ;

        update
            cobranza_detalle as cd0
        inner join
            cobranza_manual as cm0
        on
            cd0.id_cobranza_manual=cm0.id_cobranza_manual
        inner join
            venta_cronograma as vg0
        on
            cd0.id_venta_cronograma = vg0.id_venta_cronograma
        set
            cd0.estado = 0
        where
            vg0.tipo_cuota<>2
        and
            cm0.tipo_transaccion = prtipotransaccion
        and
            ( cm0.id_tipo_cobranza_manual = 4 or cm0.id_tipo_cobranza_manual = 5 )
        and
            cm0.id_transaccion = prtransaccion ;   	

        update venta_cronograma as vg
        left join (
            select
            cd1.id_venta_cronograma as id_venta_cronograma ,
            coalesce(ROUND(sum(if(cd1.estado=1,cd1.monto,0)), 2),0) as monto
            from
            cobranza_detalle as cd1
            inner join venta_cronograma as vg on
            cd1.id_venta_cronograma = vg.id_venta_cronograma
            where
            cd1.estado=1
            and
            vg.id_venta = prtransaccion
            group by
            cd1.id_venta_cronograma
        ) as _detalle on
        vg.id_venta_cronograma = _detalle.id_venta_cronograma
        set
        vg.cng_monto_pagado = coalesce(_detalle.monto,0) ,
        vg.cng_fecha_cancelacion = null ,
        vg.cng_estado = if(_detalle.monto= ROUND(vg.cng_monto_cuota+vg.cng_interes,2), 2, 1)
        where
        vg.tipo_cuota<>2 and
        vg.cng_estado <> 3 and
        vg.id_venta = prtransaccion ;
    end if;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarclientedireccion`(IN `prid` INT)
    MODIFIES SQL DATA
update
cliente_direccion
set
drc_estado=0
WHERE
idcliente_direccion=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarclientetelefono`(IN `prid` INT)
    MODIFIES SQL DATA
update
cliente_telefono
set
tlf_estado=0
where
idcliente_telefono=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpresupuestocronograma`(IN `prpresupuesto` INT, IN `prcapital` FLOAT, IN `printeres` FLOAT, IN `praporte` INT, IN `prfecha` DATE)
    MODIFIES SQL DATA
insert into
presupuesto_cronograma
set
id_presupuesto=prpresupuesto,
pspc_capital=ROUND(prcapital,2),
pspc_interes=ROUND(printeres,2),
pspc_aporte=praporte,
pspc_fecha=prfecha$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarinstitucion`(IN `prid` INT)
    NO SQL
begin

	UPDATE
    institucion
    set
    institucion.inst_estado=0
    where
    institucion.id_institucion=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearretornovendedorproducto`(IN `pridserie` INT, IN `prsalida` INT, IN `pralmacen` INT, IN `precio` FLOAT, IN `prfecha` DATE, IN `prdocumento` INT)
    MODIFIES SQL DATA
BEGIN

insert into
transaccion_cabecera
set
id_almacen=pralmacen,
id_tipo_transaccion=6,
tsccab_referencia=3,
id_salida_venta=prsalida,
tsccab_fecha=prfecha,
tsccab_documento_referencia=prdocumento,
tsccab_observacion="AJUSTE DE SALIDA DE VENTA";

select @id:=LAST_INSERT_ID();

insert into
transaccion_detalle
set
id_movimiento_cabecera=@id,
id_producto_serie=pridserie,
tscdet_cantidad=1,
tscdet_precio=precio;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearsalidavendedortalonario`(IN `prtalonario` INT, IN `prsalida` INT, IN `prfecha` DATE)
    MODIFIES SQL DATA
begin

update
talonario
set
id_salida_cabecera=prsalida,
tln_estado=3
where
id_talonario=prtalonario;

insert into
salida_detalle_talonario
set
id_salida_cabecera=prsalida,
id_talonario=prtalonario,
sdt_fecha_entrega=prfecha;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprocesojudicialtraslado`(IN `prprocesoantiguo` INT, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prinstancia` VARCHAR(50) CHARSET utf8, IN `prjuez` INT(50), IN `prespecialista` INT(50), IN `prsumilla` VARCHAR(50) CHARSET utf8)
    NO SQL
begin
   
    select
    @fecha:=pja.fecha_inicio,
    @venta:=pja.id_venta,
    @credito:=pja.id_credito,
    @id_cliente:=pja.id_cliente,
    @numerocuotas:=pja.numero_cuotas,
    @total:=pja.total
    from
    proceso_judicial as pja
    where
    pja.id_proceso_judicial=prprocesoantiguo;
    
	insert into
    proceso_judicial
    set
    id_cliente=@id_cliente,
    id_venta=@venta,
    id_credito=@credito,
    expediente=prexpediente,
    id_instancia_judicial=prinstancia,
    juez=prjuez,
    especialista=prespecialista,
    fecha_inicio=@fecha,
    sumilla=prsumilla,
    numero_cuotas=@numerocuotas,
    total=@total;
    select @id:=last_insert_id() as id;

	insert into
    proceso_judicial_transferencia
    set
    id_proceso_antiguo=prprocesoantiguo,
    id_proceso_nuevo=@id;
    
    insert into
    proceso_judicial_transacciones(id_proceso, tipo_transaccion, id_transaccion)
    select
    @id,
    pjt2.tipo_transaccion,
    pjt2.id_transaccion
    from
    proceso_judicial_transacciones as pjt2
    where
    pjt2.id_proceso=prprocesoantiguo ;
    
    update
    proceso_judicial
    set
    estado=4
    where
    id_proceso_judicial=prprocesoantiguo;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartareo`(IN `prtrabajador` INT, IN `prfecha` DATE, IN `prhoraingreso` TIME, IN `pringreso` TIME, IN `prhorasalida` TIME, IN `prsalida` TIME)
    NO SQL
begin

delete from
trabajadores_tareo
where
id_trabajador=prtrabajador
and
fecha=prfecha;

insert into
trabajadores_tareo
set
id_trabajador=prtrabajador,
fecha=prfecha,
hora_ingreso=prhoraingreso,
ingreso=pringreso,
hora_salida=prhorasalida,
salida=prsalida,
horas_Trabajadas=IF(
    				TIME_TO_SEC(prsalida)>0,
    				ROUND( ( TIME_TO_SEC(salida)-TIME_TO_SEC(ingreso) )/3600 , 2 )
    				,0
				  );

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarrelevanciatelefono`(IN `prid` INT)
    NO SQL
begin

select
@id:=id_cliente
from
cliente_telefono
where
idcliente_telefono=prid;

update
cliente_telefono
set
tlf_relevancia=2
where
id_cliente=@id;

update
cliente_telefono
set
tlf_relevancia=1
where
idcliente_telefono=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarrelevanciacuenta`(IN `prid` INT)
    NO SQL
begin

select
@id:=id_cliente
from
cliente_cuenta
where
id_cuenta=prid;

update
cliente_cuenta
set
cnt_relevancia=2
where
id_cliente=@id;

update
cliente_cuenta
set
cnt_relevancia=1
where
id_cuenta=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarclientecargo`(IN `prcargo` INT)
    NO SQL
update
cargo
set
crg_estado=0
where id_cargo=prcargo$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpresupuestogarante`(IN `prpresupuesto` INT, IN `prcliente` INT, IN `prpdfautorizacion` VARCHAR(50) CHARSET utf8, IN `prpdfddjj` VARCHAR(50) CHARSET utf8, IN `prpdfcarta` VARCHAR(50) CHARSET utf8, IN `prpdfcompromiso` VARCHAR(50) CHARSET utf8)
    NO SQL
insert into
presupuesto_garante
set
id_presupuesto=prpresupuesto,
id_cliente=prcliente,
pdf_autorizacion=prpdfautorizacion,
pdf_ddjj=prpdfddjj,
pdf_carta=prpdfcarta,
pdf_compromiso=prpdfcompromiso$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsalidacabecera`(IN `prid` INT, IN `prfecha` DATE, IN `prdestino` VARCHAR(100) CHARSET utf8, IN `prguia` VARCHAR(10) CHARSET utf8, IN `prvehiculoplaca` VARCHAR(10) CHARSET utf8, IN `prchoferdni` VARCHAR(10) CHARSET utf8, IN `prchofernombre` VARCHAR(50) CHARSET utf8, IN `probservacion` VARCHAR(100) CHARSET utf8)
    NO SQL
BEGIN

UPDATE
salida_cabecera
SET
sc_fecha=prfecha,
sc_destino=prdestino,
sc_guia=prguia,
sc_vehiculo_placa=prvehiculoplaca,
sc_chofer_dni=prchoferdni,
sc_chofer_nombre=prchofernombre,
sc_observacion=probservacion
where
idsalida_vendedor=prid;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventa`(IN `pracreedor` INT, IN `prfecha` DATE, IN `prtipo` INT, IN `prsucursal` INT, IN `prsalida` INT, IN `prtalonario` INT, IN `prcliente` INT, IN `prclientedireccion` VARCHAR(100) CHARSET utf8, IN `prclientelefono` VARCHAR(15) CHARSET utf8, IN `prclientecargo` VARCHAR(40) CHARSET utf8, IN `prclientetrabajo` VARCHAR(100) CHARSET utf8, IN `prlugar` VARCHAR(100) CHARSET utf8, IN `prvendedor` INT, IN `prautorizador` INT, IN `prtipopago` INT, IN `prinicial` FLOAT, IN `prcuotas` INT, IN `prtotal` FLOAT, IN `prfechainicio` DATE, IN `prfoto` VARCHAR(255) CHARSET utf8, IN `prcontrato` VARCHAR(255) CHARSET utf8, IN `prpdfdni` VARCHAR(255) CHARSET utf8, IN `prpdfcip` VARCHAR(255) CHARSET utf8, IN `prpdfplanilla` VARCHAR(255) CHARSET utf8, IN `prpdfletra` VARCHAR(255) CHARSET utf8, IN `prpdfvoucher` VARCHAR(255) CHARSET utf8, IN `prpdfautorizacion` VARCHAR(255) CHARSET utf8, IN `proficio` VARCHAR(100) CHARSET utf8, IN `protros` VARCHAR(200) CHARSET utf8, IN `probservacion` VARCHAR(300) CHARSET utf8)
    MODIFIES SQL DATA
BEGIN

INSERT INTO
venta
SET
id_acreedor=pracreedor,
id_talonario = prtalonario,
id_sucursal=prsucursal,
id_autorizador=prautorizador,
id_cliente = prcliente,
vnt_cliente_direccion=prclientedireccion,
vnt_cliente_telefono=prclientelefono,
vnt_cliente_cargo=prclientecargo,
vnt_cliente_trabajo=prclientetrabajo,
vnt_fecha = prfecha,
id_vendedor = prvendedor,
vnt_foto=prfoto,
vnt_contrato_pdf = prcontrato,
vnt_dni_pdf = prpdfdni,
vnt_cip_pdf = prpdfcip,
vnt_planilla_pdf = prpdfplanilla,
vnt_letra_pdf= prpdfletra,
vnt_voucher_pdf = prpdfvoucher,
vnt_autorizacion_pdf = prpdfautorizacion,
vnt_oficio_pdf=proficio,
otros_pdf=protros,
vnt_fecha_inicio = prfechainicio,
vnt_inicial = prinicial,
vnt_numero_cuota = prcuotas,
id_tipopago = prtipopago,
vnt_total = prtotal,
vnt_tipoventa = prtipo,
id_salida_venta=case prtipo when 2 then prsalida else null end,
vnt_lugarventa = prlugar,
vnt_observaciones=probservacion;
 
SELECT @id:=LAST_INSERT_ID() as id;
 
#Actualizar estado del talonario
UPDATE
talonario
SET
tln_estado=2
WHERE
id_talonario=prtalonario;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprocesojudicialdetalle`(IN `prproceso` INT, IN `prdocumento` VARCHAR(20) CHARSET utf8, IN `prfecha` DATE, IN `prtrabajador` INT, IN `prestado` INT, IN `prnumero` INT, IN `prsumilla` TEXT CHARSET utf8, IN `prarchivo` VARCHAR(50) CHARSET utf8, IN `prcomentarios` TEXT, IN `prfechanotificaciondemandado` DATE, IN `prfechanotificacioncooperativa` DATE, IN `prfechanotificacionretorno` DATE)
    NO SQL
begin

insert into
proceso_judicial_detalle
set
id_proceso=prproceso,
tipo_documento=prdocumento,
fecha=prfecha,
id_trabajador=prtrabajador,
id_estado=prestado,
numero=prnumero,
sumilla=prsumilla,
archivo=prarchivo,
comentarios=prcomentarios,
fecha_notificacion_demandado=prfechanotificaciondemandado,
fecha_notificacion_cooperativa=prfechanotificacioncooperativa,
fecha_notificacion_retorno=prfechanotificacionretorno;

select LAST_INSERT_ID() as id ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartipoproducto`(IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prtieneserie` INT, IN `idunidadmedida` INT)
    MODIFIES SQL DATA
begin

INSERT tipo_producto 
SET tprd_nombre= TRIM(prnombre),
tiene_serie = prtieneserie ,
id_unidad_medida = idunidadmedida;

select last_insert_id() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventavendedores`(IN `prventa` INT, IN `prvendedor` INT)
    NO SQL
begin

	set @total = (
    	select
        	count(*)
        from
        	venta_vendedores as vv
        where
        	vv.id_venta=prventa
        and
        	vv.id_vendedor=prvendedor
    );
    
    if @total > 0 then
    	update
        venta_vendedores
        set
        estado=1
        where
        id_venta=prventa
        and
        id_vendedor=prvendedor ;
    else
    	insert into
        venta_vendedores
        set
        id_venta=prventa,
        id_vendedor=prvendedor ;
    end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcobranzamanualmasiva`(IN `prtipotransaccion` INT, IN `prtipocobranza` INT, IN `prtransaccion` INT, IN `prfecha` DATE)
    NO SQL
begin

	DECLARE V_id_cobranza_manual INT unsigned ;
	DECLARE finished INT unsigned default 0 ;
    
	DEClARE cursor_cobranzas CURSOR FOR
    (
        select
        	cm0.id_cobranza_manual
        from
        	cobranza_manual as cm0
       	where
        	cm0.id_tipo_cobranza_manual = prtipocobranza
        and
        	cm0.id_transaccion = prtransaccion
        and
        	cm0.fecha = prfecha
    );

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursor_cobranzas;

	eliminarCobranzaMasiva:LOOP
		FETCH cursor_cobranzas INTO V_id_cobranza_manual;

		IF finished = 1 THEN 
			LEAVE eliminarCobranzaMasiva;
		END IF;
		
        update
        cobranza_manual as cm
        set
        cm.estado = 0
        where
        cm.id_cobranza_manual=V_id_cobranza_manual;

        update
        cobranza_detalle as cd
        set
        cd.estado=0
        where
        cd.id_cobranza_manual=V_id_cobranza_manual;
        
        if prtipotransaccion = 1 then 
                update credito_cronograma as cg
                inner join (
                    select
                    cd1.id_credito_cronograma as id_credito_cronograma ,
                    max(cm1.fecha) as fecha ,
                    coalesce(ROUND(sum(if(cd1.estado=1,cd1.monto,0)), 2),0) as monto
                    from
                    cobranza_detalle as cd1
                    inner join cobranza_manual as cm1 on
                    cd1.id_cobranza_manual = cm1.id_cobranza_manual
                    group by
                    cd1.id_credito_cronograma
                ) as _detalle on
                cg.id_credito_cronograma = _detalle.id_credito_cronograma
                set
                cg.monto_pagado = _detalle.monto ,
                cg.fecha_cancelacion = if(_detalle.monto= ROUND(cg.monto_capital+cg.monto_interes+cg.interes,2), _detalle.fecha, null) ,
                cg.estado = if(_detalle.monto=ROUND(cg.monto_capital+cg.monto_interes+cg.interes,2), 2, 1)
                where
                cg.id_credito = prtransaccion ;
                
         elseif prtipotransaccion = 2 then 
         
                update venta_cronograma as vg
                inner join (
                    select
                    cd1.id_venta_cronograma as id_venta_cronograma ,
                    max(cm1.fecha) as fecha ,
                    coalesce(ROUND(sum(if(cd1.estado=1,cd1.monto,0)), 2),0) as monto
                    from
                    cobranza_detalle as cd1
                    inner join cobranza_manual as cm1 on
                    cd1.id_cobranza_manual = cm1.id_cobranza_manual
                    group by
                    cd1.id_venta_cronograma
                ) as _detalle on
                vg.id_venta_cronograma = _detalle.id_venta_cronograma
                set
                vg.cng_monto_pagado = _detalle.monto ,
                vg.cng_fecha_cancelacion = if(_detalle.monto= ROUND(vg.cng_monto_cuota+vg.cng_interes,2), _detalle.fecha, null) ,
                vg.cng_estado = if(_detalle.monto= ROUND(vg.cng_monto_cuota+vg.cng_interes,2), 2, 1)
                where
                vg.id_venta = prtransaccion ;
         end if;
        
	END LOOP eliminarCobranzaMasiva;
	CLOSE cursor_cobranzas;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarclientespendientes`()
    MODIFIES SQL DATA
update
cliente
set
clt_estado=0
where
clt_estado=5$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarjuzgadodistrito`(IN `prid` INT)
    MODIFIES SQL DATA
update
juzgado_distrito
set
estado=0
where
id_juzgado_distrito=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventacanjetransaccion`(IN `prtransaccion` INT, IN `prfecha` DATE)
    NO SQL
begin

select
@id_almacen:=id_almacen,
@id_venta:=id_venta,
@documento_referencia:=tsccab_documento_referencia
from
transaccion_cabecera
where
idtransaccion_cabecera=prtransaccion;

insert into
transaccion_cabecera
set
id_almacen=@id_almacen,
id_tipo_transaccion=2,
tsccab_referencia=2,
id_venta=@id_venta,
tsccab_fecha=prfecha,
tsccab_documento_referencia=@documento_referencia,
tsccab_observacion="AJUSTE POR CANJE";

select @id:=LAST_INSERT_ID();

select
@serie:=id_producto_serie,
@precio:=tscdet_precio
from
transaccion_detalle
where
id_movimiento_cabecera=prtransaccion;

insert into
transaccion_detalle
set
id_movimiento_cabecera=@id,
id_producto_serie=@serie,
tscdet_cantidad=1,
tscdet_precio=@precio;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcentrotrabajopnp`(IN `pridcentrotrabajo` INT)
    NO SQL
update
centro_trabajo_pnp
set
estado = 0
WHERE
id_centro_trabajo_pnp = pridcentrotrabajo$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventaproducto`(IN `prventa` INT, IN `prproductoserie` INT, IN `prventaprecio` FLOAT)
    MODIFIES SQL DATA
BEGIN

INSERT INTO
venta_producto
SET
id_venta=prventa,
id_producto_serie= prproductoserie,
vprd_precio=prventaprecio;

select
@almacen:=tc.id_almacen,
@precio:=td.tscdet_precio
from
transaccion_detalle as td
inner join transaccion_cabecera as tc on
td.id_movimiento_cabecera=tc.idtransaccion_cabecera
inner join tipo_transaccion as t on
tc.id_tipo_transaccion=t.idtipo_transaccion
where
t.ttsc_tipo=1
and
td.id_producto_serie=prproductoserie
order by tc.tsccab_fecha desc
limit 1;

select
@fecha:=v.vnt_fecha,
@cliente:=v.id_cliente,
@documento:=concat(t.tln_serie,"-",t.tln_numero)
from
venta as v
inner join talonario as t on
v.id_talonario=t.id_talonario
where
v.idventa=prventa;

insert into
transaccion_cabecera
set
id_almacen=@almacen,
id_tipo_transaccion=3,
tsccab_referencia=2,
id_venta=prventa,
tsccab_fecha=CONVERT(@fecha,char),
tsccab_documento_referencia=CONVERT(@documento,char),
tsccab_observacion="AJUSTE DE VENTA";

select @id:=LAST_INSERT_ID();

insert into
transaccion_detalle
set
id_movimiento_cabecera=@id,
id_producto_serie=prproductoserie,
tscdet_cantidad=-1,
tscdet_precio=@precio;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventacronograma`(IN `prventa` INT, IN `prtipopago` INT, IN `prmonto` FLOAT, IN `prvencimiento` DATE, IN `prestado` INT)
    MODIFIES SQL DATA
insert into
venta_cronograma
set
id_venta=prventa,
id_tipo_pago=prtipopago,
cng_monto_cuota=prmonto,
cng_fecha_vencimiento=prvencimiento,
cng_monto_pagado=IF(prestado=2,prmonto,0),
cng_fecha_cancelacion=IF(prestado=2,prvencimiento,NULL),
cng_estado=IF(prestado=2,2,1)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsalidadetalleproducto_venta`(IN `prid` INT, IN `prventa` INT, IN `prprecio` FLOAT)
    NO SQL
begin

UPDATE
salida_detalle_producto
set
id_venta=prventa,
sdp_precio_venta=prprecio,
sdp_estado=2
where
id_salida_detalle_producto=prid;

# Se obtiene el id de la serie para insertarla en la tabla de venta_producto
select
@id:=id_producto_serie
from
salida_detalle_producto
where
id_salida_detalle_producto=prid;

INSERT INTO
venta_producto
SET
id_venta=prventa,
id_producto_serie= @id,
vprd_precio=prprecio;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_buscarcobranzadirecta`(IN `properacion` VARCHAR(50) CHARSET utf8)
    NO SQL
begin

	select
    count(id_cobranza_directa) as total
    from
    cobranza_directa
    where
    numero_operacion=properacion
    and
    estado=1;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarsede`(IN `prid` INT)
    NO SQL
begin

	update
    sede
    set
    sede.sd_estado=0
    where
    sede.id_sede=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcliente`(IN `pidcliente` INT)
    MODIFIES SQL DATA
UPDATE cliente
SET clt_estado = 0
WHERE idcliente = pidcliente$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearproducto`(IN `prmodelo` INT, IN `prdescripcion` VARCHAR(255) CHARSET utf8, IN `prprecio` FLOAT, IN `prcuotas` INT)
    MODIFIES SQL DATA
insert into producto
set
id_modelo=prmodelo,
prd_descripcion=prdescripcion,
prd_precio=prprecio,
prd_maximo_cuotas=prcuotas$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarclientecuenta`(IN `prid` INT)
    NO SQL
update
cliente_cuenta as c
set
c.cnt_estado=0
where
c.id_cuenta=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsalidadetalleproducto_anular`(IN `prid` INT, IN `prestado` INT)
    NO SQL
update
salida_detalle_producto
set
sdp_estado=prestado
where
id_salida_detalle_producto=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsalidadetalletalonario_anular`(IN `prid` INT, IN `prestado` INT)
    NO SQL
update
salida_detalle_talonario
set
sdt_estado=prestado
where
id_salida_detalle_talonario=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarjuzgadojuez`(IN `pridjugadojuez` INT)
    MODIFIES SQL DATA
update
juzgado_juez
set
estado=0
where
id_juzgado_juez=pridjugadojuez$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarjuzgadoinstancia`(IN `pridjuzgadoinstancia` INT)
    MODIFIES SQL DATA
update
juzgado_instancia
set
estado=0
where
id_juzgado_instancia=pridjuzgadoinstancia$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarprocesojudicialcabecera`(IN `prid` INT)
    NO SQL
begin

update
proceso_judicial
set
estado=3
where
id_proceso_judicial=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcourier`(IN `prid` INT)
    NO SQL
begin

	update
    courier
    set
    estado=0
    where
    id_courier=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_buscarclientexcodigoinstitucion`(IN `prcodigo` VARCHAR(20) CHARSET utf8, IN `prinstitucion` INT)
    NO SQL
begin

    select
    c.idcliente as id,
    c.clt_dni as dni,
    c.clt_nombre as nombre,
    c.clt_codigo as codigo,
    c.clt_cip as cip
    /*inst.id_institucion as id_institucion,
    s.id_sede as id_sede,
    s.sd_nombre as sede,
    s.plantilla_tarjeta_socio as plantilla_tarjeta,
    s.plantilla_ddjj as plantilla_ddjj,
    s.plantilla_autorizacion as plantilla_autorizacion,
    s.plantilla_transaccion as plantilla_transaccion,
    s.plantilla_compromiso as plantilla_compromiso,*/
    /*ssd.id_subsede as id_subsede,
    ssd.ssd_nombre as subsede,
    cr.id_cargo as id_cargo,
    cr.crg_nombre as cargo_nombre,
    c.id_cargo_estado as id_cargo_estado,
    cg.cstd_nombre as cargo_estado,
    c.clt_cip as cip,
    c.clt_email as email,
    c.clt_casilla as casilla,
    c.clt_trabajo as trabajo,
    c.id_distrito_trabajo as id_trabajo_distrito,
    dd.dst_nombre as trabajo_distrito,
    dp.id_provincia as id_trabajo_provincia,
    dp.prv_nombre as trabajo_provincia,
    dt.id_departamento as id_trabajo_departamento,
    dt.dpt_nombre as trabajo_departamento,
    c.clt_foto as foto*/
    FROM cliente as c
    INNER JOIN subsede as ssd on
    c.id_sub_sede = ssd.id_subsede
    INNER JOIN sede as s on
    ssd.id_sede = s.id_sede
    /*inner join cargo_estado as cg on
    c.id_cargo_estado=cg.id_cargo_estado
    inner join cargo as cr on
    cg.id_cargo=cr.id_cargo
    INNER JOIN institucion as inst on
    s.id_institucion = inst.id_institucion
    inner join distrito as dd on
    c.id_distrito_trabajo=dd.id_distrito
    inner join provincia as dp on
    dd.id_provincia=dp.id_provincia
    inner join departamento as dt on
    dp.id_departamento=dt.id_departamento*/
    where
    c.clt_codigo=prcodigo
    and
    s.id_institucion=prinstitucion
    limit 1;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearusuario`(IN `pusr_nombre` VARCHAR(45) CHARSET utf8, IN `pusr_usuario` VARCHAR(15) CHARSET utf8, IN `pusr_clave` VARCHAR(150) CHARSET utf8, IN `pidperfil` INT)
    MODIFIES SQL DATA
INSERT INTO usuario SET usr_nombre=pusr_nombre, usr_usuario=pusr_usuario,
usr_clave=pusr_clave,idperfil=pidperfil$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartransaccioncabecera`(IN `pralmacen` INT, IN `prtipo` INT, IN `prreferencia` INT, IN `prproveedor` INT, IN `prventa` INT, IN `prsalida` INT, IN `prsucursal` INT, IN `prvendedor` INT, IN `prfecha` DATE, IN `prdocumento` VARCHAR(40) CHARSET utf8, IN `prnumerodoc` INT, IN `prarchivo` VARCHAR(100) CHARSET utf8, IN `probservaciones` VARCHAR(200) CHARSET utf8)
    NO SQL
BEGIN

INSERT INTO
transaccion_cabecera
SET
id_almacen=pralmacen,
id_tipo_transaccion=prtipo,
tsccab_referencia=prreferencia,
id_proveedor=prproveedor,
id_venta=prventa,
id_salida_venta=prsalida,
id_sucursal=prsucursal,
id_vendedor=prvendedor,
tsccab_fecha=prfecha,
numero_documento=prnumerodoc,
tsccab_documento_referencia=prdocumento,
archivo=prarchivo,
tsccab_observacion=probservaciones;
select LAST_INSERT_ID() as idtransaccion;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarmarca`(IN `id` INT)
    MODIFIES SQL DATA
UPDATE marca
SET marca.estado = 0
WHERE marca.id_marca = id$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcreditocuotasxfecha`(IN `prcredito` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
begin

	DECLARE V_id_detalle INT unsigned ;
    DECLARE V_monto_total FLOAT unsigned ;

	DECLARE finished INT unsigned default 0 ;
    
	DEClARE cursor_cuotas CURSOR FOR
    (
        select 
            resultado.id_cobranza_detalle as id_cobranza_detalle ,
            round(sum(resultado.monto_total),2) as total_pagos
        from
        (       
            # Los pagos manuales
            SELECT
                cdm.id_cobranza_detalle as id_cobranza_detalle ,
                sum(cdm.monto) as monto_total
            from
                cobranza_detalle as cdm
            inner join
                cobranza_manual as c1
            on
                (cdm.id_cobranza_manual=c1.id_cobranza_manual)
            inner join
                credito_cronograma as cc
            on
            (cdm.id_credito_cronograma=cc.id_credito_cronograma)
            where
                cc.id_credito=prcredito
            and
                c1.estado=1
            and
                cdm.estado=1
            and
                cc.tipo_cuota<>2
            and
                cc.estado<3
            and
                ( prfechainicio is null or c1.fecha > prfechainicio )
            and
                ( prfechafin is null or c1.fecha < prfechafin )
            group BY
                cdm.id_cobranza_detalle

            UNION

            # Los pagos directos
            SELECT
                cd.id_cobranza_detalle as id_cobranza_detalle ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_directa as c2
            on
                (cd.id_cobranza_directa=c2.id_cobranza_directa)
            inner join
                credito_cronograma as cc
            on
                (cd.id_credito_cronograma=cc.id_credito_cronograma)
            inner join
                cooperativa_cuenta as ccnt
            ON
                c2.id_cooperativa_cuenta = ccnt.id_cooperativa_cuenta
            where
                cd.estado=1
            and
                c2.estado=1
            AND
                cc.id_credito=prcredito
            and
                cc.tipo_cuota<>2
            and
                cc.estado<3
            and
                ( prfechainicio is null or c2.fecha_referencia > prfechainicio )
            and
                ( prfechafin is null or c2.fecha_referencia < prfechafin )
            GROUP by
                cd.id_cobranza_detalle

            UNION

            # Los pagos por planilla
            SELECT 
                cd.id_cobranza_detalle as id_cobranza_detalle ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_archivos_detalle as cad
            on
                (cd.id_cobranza_archivos=cad.id_cobranza_detalle )
            inner join
                cobranza_archivos_cabecera as cac
            on
                ( cad.id_cobranza=cac.id_cobranza )
            inner join
                credito_cronograma as cc
            on
                (cd.id_credito_cronograma=cc.id_credito_cronograma)
            where
                cd.estado=1
            and
                cad.estado=1
            and
                cac.estado=1
            and
                cc.id_credito=prcredito
            and
                cc.tipo_cuota<>2
            and
                cc.estado<3
            and
                ( prfechainicio is null or cac.fecha_fin > prfechainicio )
            and
                ( prfechafin is null or cac.fecha_fin < prfechafin )
            group by
                cd.id_cobranza_detalle
        ) as resultado
        group by
        resultado.id_cobranza_detalle
    );
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursor_cuotas;
    
    anularCronograma:LOOP
		FETCH cursor_cuotas INTO V_id_detalle, V_monto_total ;
        
		IF finished = 1 THEN 
			LEAVE anularCronograma;
		END IF;
        
        update cobranza_detalle set estado = 0 where id_cobranza_detalle = V_id_detalle ;
        
    END LOOP anularCronograma;
	CLOSE cursor_cuotas;
    
    -- Se calculan los montos de pago del credito
    call sp_actualizarcreditocronogramamontopagado(prcredito) ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_editarreglaevaluacion`(IN `prid` INT, IN `prtipo` INT, IN `prdesde` INT, IN `prhasta` INT)
    MODIFIES SQL DATA
update
regla_evaluacion
set
rgl_tipo=prtipo,
rgl_desde=prdesde,
rgl_hasta=prhasta
where
id_regla=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearvendedor`(IN `prdocumento` VARCHAR(10) CHARSET utf8, IN `prnombre` VARCHAR(80) CHARSET utf8, IN `prcargo` VARCHAR(50) CHARSET utf8, IN `premail` VARCHAR(45) CHARSET utf8, IN `prcomision` FLOAT)
    MODIFIES SQL DATA
insert into
vendedor
set
vnd_dni=prdocumento,
vnd_nombre=prnombre,
id_cargo=prcargo,
vnd_email=premail,
vnd_comision=prcomision$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarprovincia`(IN `prid` INT)
    MODIFIES SQL DATA
update
provincia
set
prv_estado=0
where
id_provincia = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearvendedorcomision`(IN `prsalida` INT, IN `prvendedor` INT, IN `prcomisionefectivaporcentaje` FLOAT, IN `prcomisionefectiva` FLOAT, IN `prcomisionretenidaporcentaje` FLOAT, IN `prcomisionretenida` FLOAT)
    MODIFIES SQL DATA
begin

insert into
vendedor_comision
set
id_salida=prsalida,
id_vendedor=prvendedor,
comision_efectiva_porcentaje=prcomisionefectivaporcentaje,
comision_efectiva=prcomisionefectiva,
comision_retenida_porcentaje=prcomisionretenidaporcentaje,
comision_retenida=prcomisionretenida;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarpenalidadcredito`(IN `prcredito` INT)
    NO SQL
begin

	-- Se verifica si se han pagado alguna cuota de la penalidad
/*	set @pagado = (
        select
            sum(cc.monto_pagado)
        from
            creditos as c
        inner join
            credito_cronograma as cc
        on
            c.id_credito = cc.id_credito
        WHERE
            c.estado_penalidad = 3
        and
            cc.id_credito = prcredito
        and
            cc.tipo_cuota = 1
        group by
            c.id_credito
	); */
        
    -- Si se ha pagado alguna cuota de la penalidad, no se hace nada y se retorna 0
   /* if @pagado > 0 then
    	select 0 as resultado;
    -- Si no se han hecho pagos, se anula la penalidad
    else */
    	-- El crédito tendrá estado 2 
    	UPDATE
        creditos
        set
        estado_penalidad = 2
        where
        id_credito = prcredito ;
        
        -- Se desactivan las cuotas de la penalidad en el cronograma
        update
        credito_cronograma as cc
        set
        cc.estado=3
        where
        cc.tipo_cuota=1
        and
        cc.id_credito = prcredito ;
        
        -- Las cuotas con tipo de estado 2 (secundarias) vueven a se las principales
        update
        credito_cronograma as cc
        set
        cc.tipo_cuota=1
        where
        cc.tipo_cuota=2
        and
        cc.id_credito = prcredito ;
        
        -- Las cuotas con tipo de estado 3 (intereses) se anulan
        update
        credito_cronograma as cc
        set
        cc.estado=3
        where
        cc.tipo_cuota=3
        and
        cc.id_credito = prcredito ;
        
        select 1 as resultado ;
   -- end if ;
    	

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcobranzaarchivos`(IN `prcobranza` INT)
    NO SQL
begin

    update
    cobranza_archivos_cabecera
    set
    estado=3
    where
    id_cobranza=prcobranza;

	update
    cobranza_archivos_detalle
    set
    estado=0
    where
    id_cobranza=prcobranza;
	
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarpenalidadcreditonueva`(IN `prcredito` INT)
    NO SQL
begin

	-- Se consulta la fecha de la primera cuota de la penalidad
	set @fecha = (
        select
            min(cc.fecha_vencimiento)
        from
            creditos as c
        inner join
            credito_cronograma as cc
        on
            c.id_credito = cc.id_credito
        WHERE
            c.estado_penalidad = 3
        and
            cc.id_credito = prcredito
        and
            cc.tipo_cuota = 1
        group by
            c.id_credito
	);
    
    -- Se eliminan los pagos de esa fecha en adelante
    call sp_eliminarcreditocuotasxfecha(prcredito, @fecha, null) ;
    
    -- Se elimina la penalidad
    call sp_eliminarpenalidadcredito(prcredito) ;
    
    -- Se recalculan los pagos en adelante
    call sp_recalcularpagoscredito(prcredito, @fecha, null) ;
       

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminardistrito`(IN `prid` INT)
    MODIFIES SQL DATA
update
distrito
set
dst_estado=0
where
id_distrito=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcooperativadireccion`(IN `prid` INT)
    NO SQL
update
cooperativa_direccion
set
estado=0
where
id_cooperativa_direccion=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarbanco`(IN `prid` INT)
    NO SQL
update
banco
set
bnc_estado=0
where
id_banco=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcredito`(IN `prid` INT)
    NO SQL
begin

update
creditos
set
creditos.estado=3
where
creditos.id_credito=prid;

UPDATE
creditos
set
creditos.estado=1,
creditos.id_credito_refinanciado=NULL
where
creditos.id_credito_refinanciado=prid;

update
venta
set
venta.vnt_estado=1,
venta.id_credito_refinanciado=NULL
where
venta.id_credito_refinanciado=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarpenalidadventanueva`(IN `prventa` INT)
    NO SQL
begin

	-- Se consulta la fecha de la primera cuota de la penalidad
	set @fecha = (
        select
            min(vc.cng_fecha_vencimiento)
        from
            venta as v
        inner join
            venta_cronograma as vc
        on
            v.idventa = vc.id_venta
        WHERE
            v.estado_penalidad = 3
        and
            vc.id_venta = prventa
        and
            vc.tipo_cuota = 1
        group by
            v.idventa
	);
    
    -- Se eliminan los pagos de esa fecha en adelante
    call sp_eliminarventacuotasxfecha(prventa, @fecha, null) ;
    
    -- Se elimina la penalidad
    call sp_eliminarpenalidadventa(prventa) ;
    
    -- Se recalculan los pagos en adelante
    call sp_recalcularpagosventa(prventa, @fecha, null) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminaralmacen`(IN `pidalmacen` INT)
    MODIFIES SQL DATA
UPDATE almacen 
SET alm_estado = 0
WHERE idalmacen = pidalmacen$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearvendedorcargo`(IN `prnombre` VARCHAR(50) CHARSET utf8)
    MODIFIES SQL DATA
insert into
vendedor_cargo
set
nombre=prnombre$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarproveedor`(IN `pidproveedor` INT)
    MODIFIES SQL DATA
    COMMENT 'Elimina Proveedor'
UPDATE proveedor
SET prv_estado = 0
WHERE idproveedor = pidproveedor$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminartrabajador`(IN `prtrabajador` INT)
    NO SQL
update
trabajadores
set
estado=0
where
id_trabajador=prtrabajador$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminartransaccioncabecera`(IN `prid` INT)
    NO SQL
begin
	UPDATE
    transaccion_cabecera
    SET
    tsccab_estado=0
    WHERE
    idtransaccion_cabecera=prid ;

    update
    transaccion_detalle as tdet
    set
    tdet.tscdet_estado=0
    where
    tdet.id_movimiento_cabecera=prid ;
    
    update
    producto_serie
    set
    producto_serie.ps_estado=0
    where
    producto_serie.id_producto_serie in
    (
    	select
        tdet.id_producto_serie
        from
        transaccion_detalle as tdet
        WHERE
        tdet.id_movimiento_cabecera=prid
    ) ;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarplantilla`(IN `prid` INT)
    NO SQL
update
plantillas
set
estado=0
where
id_plantilla=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarvendedorcargo`(IN `prid` INT)
    MODIFIES SQL DATA
update
vendedor_cargo
set
estado=0
where
id_vendedor_cargo=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarprocesojudicialestado`(IN `prestado` INT)
    NO SQL
update
proceso_judicial_estado
set
estado=0
where
id_proceso_judicial_estado=prestado$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarvendedor`(IN `prid` INT)
    MODIFIES SQL DATA
update
vendedor
set
vnd_estado=0
where
idvendedor=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarclienteobservacion`(IN `prid` INT)
    NO SQL
update
cliente_observacion as c
set
c.cobs_estado=0
where
c.id_cliente_observacion=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminardepartamento`(IN `prid` INT)
    MODIFIES SQL DATA
update
departamento
set
dpt_estado=0
where
id_departamento = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearalmacen`(IN `prsucursal` INT, IN `palm_nombre` VARCHAR(45) CHARSET utf8, IN `palm_descripcion` VARCHAR(80) CHARSET utf8, IN `palm_documento_ingreso` VARCHAR(10) CHARSET utf8, IN `palm_documento_salida` VARCHAR(10) CHARSET utf8)
    MODIFIES SQL DATA
INSERT INTO almacen SET
id_sucursal=prsucursal,
alm_nombre=palm_nombre,
alm_descripcion=palm_descripcion,
alm_documento_ingreso = palm_documento_ingreso,
alm_documento_estado = palm_documento_estado,
alm_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listaravalxId`(IN `pidaval` INT)
    READS SQL DATA
SELECT a.avl_dni, a.avl_nombre, a.avl_apellido, a.avl_institucion,
a.avl_observacion, c.clt_dni
FROM aval a
INNER JOIN cliente c on a.idcliente =c.idcliente
WHERE a.idaval = pidaval$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventacuotasxfecha`(IN `prventa` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
begin


	DECLARE V_id_detalle INT unsigned ;
    DECLARE V_monto_total FLOAT unsigned ;

	DECLARE finished INT unsigned default 0 ;
    
	DEClARE cursor_cuotas CURSOR FOR
    (
        select 
            resultado.id_cobranza_detalle as id_cobranza_detalle ,
            round(sum(resultado.monto_total),2) as total_pagos
        from
        (       
            # Los pagos manuales
            SELECT
                cdm.id_cobranza_detalle as id_cobranza_detalle ,
                sum(cdm.monto) as monto_total
            from
                cobranza_detalle as cdm
            inner join
                cobranza_manual as c1
            on
                (cdm.id_cobranza_manual=c1.id_cobranza_manual)
            inner join
                venta_cronograma as vc
            on
            (cdm.id_venta_cronograma=vc.id_venta_cronograma)
            where
                vc.id_venta=prventa
            and
                c1.estado=1
            and
                cdm.estado=1
            and
                vc.tipo_cuota<>2
            and
                vc.cng_estado<3
            and
                ( prfechainicio is null or c1.fecha > prfechainicio )
            and
                ( prfechafin is null or c1.fecha < prfechafin )
            group BY
                cdm.id_cobranza_detalle

            UNION

            # Los pagos directos
            SELECT
                cd.id_cobranza_detalle as id_cobranza_detalle ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_directa as c2
            on
                (cd.id_cobranza_directa=c2.id_cobranza_directa)
            inner join
                venta_cronograma as vc
            on
                (cd.id_venta_cronograma=vc.id_venta_cronograma)
            where
                cd.estado=1
            and
                c2.estado=1
            AND
                vc.id_venta=prventa
            and
                vc.tipo_cuota<>2
            and
                vc.cng_estado<3
            and
                ( prfechainicio is null or c2.fecha_referencia > prfechainicio )
            and
                ( prfechafin is null or c2.fecha_referencia < prfechafin )
            GROUP by
                cd.id_cobranza_detalle

            UNION

            # Los pagos por planilla
            SELECT 
                cd.id_cobranza_detalle as id_cobranza_detalle ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_archivos_detalle as cad
            on
                ( cd.id_cobranza_archivos=cad.id_cobranza_detalle )
            inner join
                cobranza_archivos_cabecera as cac
            on
                ( cad.id_cobranza=cac.id_cobranza )
            inner join
                venta_cronograma as vc
            on
                (cd.id_credito_cronograma=vc.id_venta_cronograma)
            where
                cd.estado=1
            and
                cad.estado=1
            and
                cac.estado=1
            and
                vc.id_venta=prventa
            and
                vc.tipo_cuota<>2
            and
                vc.cng_estado<3
            and
                ( prfechainicio is null or cac.fecha_fin > prfechainicio )
            and
                ( prfechafin is null or cac.fecha_fin < prfechafin )
            group by
                cd.id_cobranza_detalle
        ) as resultado
        group by
        resultado.id_cobranza_detalle
    );
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursor_cuotas;
    
    anularCronograma:LOOP
		FETCH cursor_cuotas INTO V_id_detalle, V_monto_total ;
        
		IF finished = 1 THEN 
			LEAVE anularCronograma;
		END IF;
        
        update cobranza_detalle set estado = 0 where id_cobranza_detalle = V_id_detalle ;
        
    END LOOP anularCronograma;
	CLOSE cursor_cuotas;
    
    -- Se calculan los montos de pago de la venta
    call sp_actualizarventacronogramamontopagado(prventa) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarsalidadetallegasto`(IN `prid` INT)
    NO SQL
delete from
salida_detalle_gasto
where
id_salida_detalle_gasto=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventa`(IN `prid` INT, IN `probservacion` VARCHAR(255) CHARSET utf8, IN `prmonto` INT)
    MODIFIES SQL DATA
begin

UPDATE
venta
SET
vnt_estado=2,
vnt_anulacion_observacion=probservacion,
vnt_anulacion_monto=prmonto
WHERE
idventa=prid;

update
venta_cronograma
set
cng_estado=3
where
id_venta=prid;

update
venta_producto
set
vprd_estado=0
where
id_venta=prid;

# Se hace en el componente
# porque se debe crear otro movimiento
/*
update
transaccion_cabecera
set
tsccab_estado=0
where
id_venta=prid;

update
transaccion_detalle as td
inner join transaccion_cabecera as tc on
td.id_movimiento_cabecera=tc.idtransaccion_cabecera
set
td.tscdet_estado=0
where
tc.id_venta=prid;
*/
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarsubsede`(IN `prid` INT)
    NO SQL
begin

	update
    subsede
    set
    subsede.ssd_estado=0
    where
    subsede.id_subsede=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsalidadetalletalonario_venta`(IN `prid` INT, IN `prventa` INT)
    NO SQL
update
salida_detalle_talonario
set
id_venta=prventa,
sdt_estado=2
where
id_salida_detalle_talonario=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminartransacciondetallecompra`(IN `prdetalle` INT, IN `prserie` INT)
    NO SQL
begin

    update
    transaccion_detalle
    set
    tscdet_estado=0
    where
    idtransaccion_detalle=prdetalle;
    
    update
    producto_serie
    set
    ps_estado=0
    where
    id_producto_serie=prserie;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarperfil`(IN `prid` INT)
    NO SQL
update
perfil
set
estado=0
where
id_perfil=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarpenalidadventa`(IN `prventa` INT)
    NO SQL
begin

	-- Se verifica si se han pagado alguna cuota de la penalidad
	set @pagado = (
        select
            sum(vc.cng_monto_pagado)
        from
            venta as v
        inner join
            venta_cronograma as vc
        on
            v.idventa = vc.id_venta
        WHERE
            v.estado_penalidad = 3
        and
            vc.id_venta = prventa
        and
            vc.tipo_cuota = 1
        group by
            v.idventa
	);
        
    -- Si se ha pagado alguna cuota de la penalidad, no se hace nada y se retorna 0
    if @pagado > 0 then
    	select 0 as resultado;
    -- Si no se han hecho pagos, se anula la penalidad
    else
    	-- El crédito tendrá estado 2 
    	UPDATE
        venta as v
        set
        v.estado_penalidad = 2
        where
        v.idventa = prventa ;
        
        -- Se desactivan las cuotas de la penalidad en el cronograma
        update
        venta_cronograma as vc
        set
        vc.cng_estado=3
        where
        vc.tipo_cuota=1
        and
        vc.id_venta = prventa ;
        
        -- Las cuotas con tipo de estado 2 (secundarias) vueven a se las principales
        update
        venta_cronograma as vc
        set
        vc.tipo_cuota=1
        where
        vc.tipo_cuota=2
        and
        vc.id_venta = prventa ;
        
        select 1 as resultado ;
    end if ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventaproductos`(IN `prid` INT, IN `prserie` INT)
    NO SQL
begin

select
@id_detalle:=td.idtransaccion_detalle,
@idcabecera:=td.id_movimiento_cabecera
from
transaccion_detalle as td
inner join transaccion_cabecera as tc on
td.id_movimiento_cabecera=tc.idtransaccion_cabecera
where
tc.id_venta=prid
and
td.id_producto_serie=prserie;

update
transaccion_detalle
set
tscdet_estado=0
where
idtransaccion_detalle=@id_detalle;

update
transaccion_cabecera
set
tsccab_estado=0
where
idtransaccion_cabecera=@idcabecera;

update
venta_producto
set
vprd_estado=0
where
id_venta=prid
and
id_producto_serie=prserie;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsede`(IN `prid` INT,IN `prinstitucion` INT, IN `prnombre` VARCHAR(60) CHARSET utf8, IN `prabreviatura` VARCHAR(40) CHARSET utf8, IN `prrepresentante` VARCHAR(40) CHARSET utf8, IN `prdistrito` INT, IN `prdireccion` VARCHAR(60) CHARSET utf8, IN `prtelefono` VARCHAR(20) CHARSET utf8, IN `prcodigocooperativa` VARCHAR(20) CHARSET utf8, IN `prplantillatarjeta` VARCHAR(40) CHARSET utf8, IN `prplantillaautorizacion` VARCHAR(40) CHARSET utf8, IN `prplantilladdjj` VARCHAR(40) CHARSET utf8, IN `prplantillacompromiso` VARCHAR(40) CHARSET utf8, IN `prplantillattransaccion` VARCHAR(40) CHARSET utf8)
    NO SQL
update
sede
set
id_institucion=prinstitucion,
sd_nombre=prnombre,
sd_abreviatura=prabreviatura,
sd_representante_legal=prrepresentante,
id_distrito=prdistrito,
sd_direccion=prdireccion,
sd_telefono=prtelefono,
sd_codigo_cooperativa=prcodigocooperativa,
plantilla_tarjeta_socio=prplantillatarjeta,
plantilla_autorizacion=prplantillaautorizacion,
plantilla_ddjj=prplantilladdjj,
plantilla_compromiso=prplantillacompromiso,
plantilla_transaccion=prplantillattransaccion
where
id_sede=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarprocesojudicialdetalle`(IN `prid` INT)
    NO SQL
begin

update
proceso_judicial_detalle
set
estado=3
where
id_proceso_judicial_detalle=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarseguimiento`(IN `prid` INT)
    NO SQL
update
seguimiento_documentos
set
estado=0
where
id_seguimiento=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listaraval`(IN `pavl_dni` VARCHAR(8) CHARSET utf8, IN `pclt_dni` VARCHAR(8) CHARSET utf8)
    READS SQL DATA
SELECT a.avl_dni, a.avl_nombre, a.avl_apellido, a.avl_institucion,
a.avl_observacion, c.clt_dni
FROM aval a
INNER JOIN cliente c on a.idcliente =c.idcliente
WHERE (pavl_dni IS NULL OR a.avl_dni LIKE
       CONCAT('%',pavl_dni,'%')) AND
(pclt_cliente IS NULL OR c.clt_dni LIKE
       CONCAT('%',pclt_dni,'%'))$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarusuario`(IN `pidusuario` INT)
    MODIFIES SQL DATA
UPDATE usuario
SET usr_estado = 0
WHERE idusuario = pidusuario$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarproducto`(IN `idpr` INT)
    MODIFIES SQL DATA
update producto
set
prd_estado=2
where
idproducto=idpr$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecuentacontar`(IN `prcliente` INT)
    NO SQL
BEGIN

select
count(c.id_cuenta) as total
from
cliente_cuenta as c
inner join banco as b on
c.id_banco=b.id_banco
where
c.cnt_estado=1
and
c.id_cliente=prcliente;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarmodelo`(IN `id` INT)
    MODIFIES SQL DATA
UPDATE modelo
SET estado = 0
WHERE id_modelo = id$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearaval`(IN `pavl_dni` VARCHAR(8) CHARSET utf8, IN `pavl_nombre` VARCHAR(45) CHARSET utf8, IN `pavl_apellido` VARCHAR(45) CHARSET utf8, IN `pavl_institucion` VARCHAR(100) CHARSET utf8, IN `pavl_observacion` VARCHAR(45) CHARSET utf8, IN `pid_cliente` INT)
    MODIFIES SQL DATA
INSERT INTO aval
SET avl_dni = pavl_dni,
	avl_nombre = pavl_nombre,
	avl_apellido = pavl_apellido,
	avl_institucion = pavl_institucion,
	avl_observacion = pavl_observacion,
	id_cliente = pid_cliente$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcentrotrabajopnpxId`(IN `prid` int)
    NO SQL
SELECT
    ct.id_centro_trabajo_pnp as id_centro_trabajo_pnp ,
    coalesce(d.id_distrito, 0) as id_distrito ,
    coalesce(d.dst_nombre, '') as distrito ,
    coalesce(p.id_provincia, 0) as id_provincia ,
    coalesce(p.prv_nombre, '') as provincia ,
    coalesce(dp.id_departamento, 0) as id_departamento ,
    coalesce(dp.dpt_nombre, '') as departamento ,
    ct.comisaria as comisaria ,
    ct.division as division ,
    ct.telefono as telefono ,
    ct.direccion as direccion
    from
    centro_trabajo_pnp as ct
    left join distrito as d on
    ct.id_distrito = d.id_distrito
    left join provincia as p on
    d.id_provincia = p.id_provincia
    left join departamento as dp on
    p.id_departamento = dp.id_departamento
    where
    id_centro_trabajo_pnp = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcooperativacuenta`(IN `prid` INT)
    NO SQL
UPDATE
cooperativa_cuenta
set
estado=0
WHERE
id_cooperativa_cuenta=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsedeparametros`(IN `prsede` INT, IN `prcondicion` VARCHAR(50) CHARSET utf8, IN `prdomicilio` VARCHAR(255) CHARSET utf8, IN `prautorizacion1` TEXT CHARSET utf8, IN `prautorizacion2` TEXT CHARSET utf8)
    NO SQL
update
sede
set
parametro_condicion=prcondicion,
parametro_domicilio=prdomicilio,
parametro_autorizacion_1=prautorizacion1,
parametro_autorizacion_2=prautorizacion2
where
id_sede=prsede$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecargoestado`(IN `prsede` INT)
    NO SQL
select
id_cargo_estado as id,
cstd_nombre as nombre
from
cargo_estado
where
id_sede=prsede
and
cstd_estado=1
order by cstd_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearautorizador`(IN `prsucursal` INT, IN `prdni` VARCHAR(11) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8)
    MODIFIES SQL DATA
insert into
autorizador
set
id_sucursal=prsucursal,
atz_dni=prdni,
atz_nombre=prnombre$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarautorizador`(IN `prsucursal` INT, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    MODIFIES SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
a.id_autorizador as id,
a.id_sucursal as id_sucursal,
s.scs_nombre as nombre_sucursal,
a.atz_dni as dni,
a.atz_nombre as nombre
from
autorizador as a
inner join sucursal as s on
a.id_sucursal=s.idsucursal
where
a.atz_estado=1
and
prsucursal is null or a.id_sucursal=prsucursal
and
a.atz_nombre like concat ('%',prnombre,'%')
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearavalxventa`(IN `pid_venta` INT, IN `pid_aval` INT)
    MODIFIES SQL DATA
INSERT INTO avalxventa
SET id_venta = pid_venta,
id_aval = pid_aval$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecargo`(IN `prsede` INT)
    NO SQL
select
id_cargo as id,
crg_nombre as nombre
from
cargo
where
id_sede=prsede
and
crg_estado=1
order by
crg_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientepreciso`(IN `prdni` VARCHAR(20) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8)
    READS SQL DATA
select
c.idcliente as id,
inst.inst_nombre as institucion,
s.sd_nombre as sede,
ssd.ssd_nombre as subsede,
cr.id_cargo as id_cargo,
cr.crg_nombre as cargo,
cg.id_cargo_estado as id_cargo_estado,
cg.cstd_nombre as cargo_estado,
c.clt_codigo as codofin,
c.clt_dni as dni,
UPPER(c.clt_nombre) as nombre,
c.clt_cip as cip,
c.clt_email as email,
c.clt_aporte as aporte
FROM cliente c
inner join cargo_estado as cg on
c.id_cargo_estado=cg.id_cargo_estado
inner join cargo as cr on
cg.id_cargo=cr.id_cargo
INNER JOIN subsede as ssd on
c.id_subsede = ssd.id_subsede
INNER JOIN sede as s on
ssd.id_sede = s.id_sede
INNER JOIN institucion as inst on
s.id_institucion = inst.id_institucion
where
c.clt_dni like concat('%',prdni,'%')
and
c.clt_nombre like concat('%',prnombre,'%')
order by c.clt_nombre asc
limit 0 ,5$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarbanco`(IN `prbanco` VARCHAR(70) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
begin

	declare IP int unsigned ;
    declare TP int unsigned ;

	set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

    select
    id_banco as id,
    UPPER(bnc_nombre) as nombre
    from
    banco
    where
    bnc_estado=1
    and
    bnc_nombre like concat(prbanco, '%')
    limit IP, TP ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecargos`(IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prcargo` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

    select
    cargo.id_cargo as id_cargo,
    institucion.id_institucion as id_institucion,
    institucion.inst_nombre as institucion,
    sede.id_sede as id_sede,
    sede.sd_nombre as sede,
    cargo.crg_nombre as cargo
    from
    cargo
    inner join sede on
    sede.id_sede=cargo.id_sede
    inner join institucion on
    sede.id_institucion=institucion.id_institucion
    where
    cargo.crg_estado = 1
    and
    sede.sd_estado=1
    and
    institucion.inst_estado=1
    and
    institucion.inst_nombre like concat('%',prinstitucion,'%')
    and
    sede.sd_nombre like concat('%',prsede,'%')
    and
    cargo.crg_nombre like concat('%',prcargo,'%')
    order by 
	cargo.crg_nombre asc, sede.sd_nombre asc
    limit IP, TP ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listaralmacen`()
    READS SQL DATA
SELECT 
idalmacen,
alm_nombre,
alm_descripcion, 
alm_documento_ingreso,
alm_documento_salida
FROM almacen
WHERE alm_estado =1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearbanco`(IN `prbanco` VARCHAR(100) CHARSET utf8)
    NO SQL
BEGIN

	set @repetido = (
        select 
        count(*)
        from
        banco
        where
        bnc_estado=1
        and
        bnc_nombre="prbanco"
    ) ;
    
    if @repetido = 0 then
        insert into
        banco
        set
        bnc_nombre = prbanco ;
    end if ;


end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventasalidaproductos`(IN `prsalida` INT, IN `prventaproducto` INT, IN `prproducto` INT)
    NO SQL
begin

update
salida_detalle_producto
set
id_venta=NULL,
sdp_precio_venta=NULL,
sdp_estado=1
where
id_salida_cabecera=prsalida
and
id_producto_serie=prproducto;

update
venta_producto
set
vprd_estado=0
where
id_venta_producto=prventaproducto;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientedireccion`(IN `pid_cliente` INT, IN `pdrc_relevancia` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT
drc.idcliente_direccion as id,
c.idcliente,
CONCAT(c.clt_nombre) as 'cliente',
drc.drc_nombre as 'direccion',
de.id_departamento,
upper(de.dpt_nombre) as dpt_nombre,
p.id_provincia,
upper(p.prv_nombre) as prv_nombre,
d.id_distrito,
upper(d.dst_nombre) as dst_nombre,
CONCAT(de.dpt_nombre, ' - ' , p.prv_nombre,' - ', d.dst_nombre, ' - ' , drc.drc_nombre) as direccioncompleta,
concat(drc.drc_nombre,
       ", distrito de ", CONCAT(UCASE(LEFT(d.dst_nombre, 1)), LCASE(SUBSTRING(d.dst_nombre, 2))),
       ", provincia de ", CONCAT(UCASE(LEFT(p.prv_nombre, 1)), LCASE(SUBSTRING(p.prv_nombre, 2))),
       " del departamento de ", CONCAT(UCASE(LEFT(de.dpt_nombre, 1)), LCASE(SUBSTRING(de.dpt_nombre, 2)))
) as direccion_formateada,
drc.drc_relevancia
FROM cliente_direccion drc
INNER JOIN cliente c on
drc.id_cliente = c.idcliente
INNER JOIN distrito d on
drc.id_distrito = d.id_distrito
INNER JOIN provincia p on
d.id_provincia = p.id_provincia
INNER JOIN departamento de on
p.id_departamento = de.id_departamento
WHERE
drc.drc_estado= 1
AND
(pid_cliente is null or c.idcliente = pid_cliente)
AND
(pdrc_relevancia is null or drc.drc_relevancia = pdrc_relevancia)
order by drc.drc_relevancia asc, drc.idcliente_direccion asc
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventacomision`(IN `prid` INT)
    NO SQL
update
vendedor_comision
set
vndcms_estado=3
where
id_venta=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listaralmacenxId`(IN `pidalmacen` INT)
    READS SQL DATA
SELECT alm_nombre,alm_descripcion, 
alm_documento_ingreso, alm_documento_Salida
FROM almacen
WHERE idalmacen = pidalmacen$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecargosestadocontar`(IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prcargoestado` VARCHAR(50) CHARSET utf8)
    NO SQL
begin

	select
    count(cargo_estado.id_cargo_estado) as total
    from
    cargo_estado
    inner join sede on
    sede.id_sede=cargo_estado.id_sede
    inner join institucion on
    sede.id_institucion=institucion.id_institucion
    where
    cargo_estado.cstd_estado = 1
    and
    sede.sd_estado=1
    and
    institucion.inst_estado=1
    and
    institucion.inst_nombre like concat('%',prinstitucion,'%')
    and
    sede.sd_nombre like concat('%',prsede,'%')
    and
    cargo_estado.cstd_nombre like concat('%',prcargoestado,'%');


end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarautorizadorcontar`(IN `prsucursal` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    MODIFIES SQL DATA
BEGIN

select
count(a.id_autorizador) as total
from
autorizador as a
inner join sucursal as s on
a.id_sucursal=s.idsucursal
where
a.atz_estado=1
and
a.atz_nombre like concat ('%',prnombre,'%')
and
prsucursal is null or a.id_sucursal=prsucursal;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsalidadetallevendedor`(IN `prsalidavendedor` INT, IN `prcomisionefectiva` FLOAT, IN `prcomisionretenida` FLOAT)
    NO SQL
update
salida_detalle_vendedor
set
sdv_comision_efectiva=prcomisionefectiva,
sdv_comision_retenida=prcomisionretenida
where
id_salida_detalle_vendedor=prsalidavendedor$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminartipoproducto`(IN `id` INT)
    MODIFIES SQL DATA
UPDATE tipo_producto
SET estado = 0
WHERE tipo_producto.id_tipo_producto = id$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarseguimientoentrega`(IN `prid` INT, IN `prfecha` DATE, IN `prusuario` VARCHAR(30) CHARSET utf8)
    NO SQL
update
seguimiento_documentos
set
fecha_recepcion=prfecha,
usuario_recepcion=prusuario,
estado=2
where
id_seguimiento=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminartransacciondetalle`(IN `prid` INT)
    NO SQL
update
transaccion_detalle
SET
tscdet_cantidad=0,
tscdet_estado=0
where
idtransaccion_detalle=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcliente`(IN `prcodigo` VARCHAR(45) CHARSET utf8, IN `prcip` VARCHAR(20) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(100) CHARSET utf8, IN `prinstitucion` INT, IN `prsede` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `prestado` INT)
    READS SQL DATA
BEGIN
DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT
c.idcliente as id,
c.clt_codigo as codigo,
c.clt_dni as dni,
c.clt_nombre as nombre,
c.clt_cip as cip,
c.clt_email as email,
cg.crg_nombre as cargo,
c.clt_casilla as casilla,
i.inst_nombre as institucion,
c.id_sede as id_sede,
s.sd_nombre as sede,
ssd.ssd_nombre as subsede,
c.clt_trabajo as trabajo,
c.id_distrito_trabajo as id_distrito_trabajo,
c.clt_capacidad_pago as capacidad_pago,
c.clt_maximo_descuento as maximo_descuento,
c.clt_calificacion_personal as calificacion_personal,
c.clt_aporte as aporte,
c.clt_fecharegistro as fecha_registro,
c.clt_foto as foto,
coalesce(_creditos.total,0) as total_creditos ,
coalesce(_ventas.total,0) as total_ventas ,
coalesce(_creditos.total,0) +coalesce( _ventas.total,0) as total_transacciones
FROM cliente as c
inner join subsede as ssd on
c.id_sub_sede=ssd.id_subsede
inner join cargo as cg on
c.id_cargo=cg.id_cargo
inner join sede as s on
c.id_sede=s.id_sede
inner join institucion as i on
c.id_institucion=i.id_institucion
left join
(
	select
    c2.id_cliente as id_cliente,
    count(distinct c2.id_credito) as total
    from
    creditos as c2
    where
    c2.estado=1
    group by
    c2.id_cliente
) as _creditos on
( c.idcliente = _creditos.id_cliente )
left join
(
	select
    v2.id_cliente as id_cliente,
    count(distinct v2.idventa) as total
    from
    venta as v2
    where
    v2.vnt_estado=1
    group by
    v2.id_cliente
) as _ventas on
( c.idcliente = _ventas.id_cliente )
WHERE
c.clt_estado = prestado
AND
( c.clt_dni LIKE CONCAT(prdni,'%') )
AND
( c.clt_nombre LIKE CONCAT(prnombre,'%') )
and
( c.clt_codigo like concat(prcodigo,'%') )
and
( c.clt_cip like concat(prcip,'%') )
and
( prinstitucion=0 or i.id_institucion=prinstitucion )
and
( prsede=0 or s.id_sede=prsede )
order BY
c.clt_nombre asc
LIMIT IP, TP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcentrotrabajopnpcontar`(IN `prdepartamento` VARCHAR(100) CHARSET utf8, IN `prprovincia` VARCHAR(100) CHARSET utf8, IN `prdistrito` VARCHAR(100) CHARSET utf8, IN `prcomisaria` VARCHAR(100) CHARSET utf8, IN `prdivision` VARCHAR(100) CHARSET utf8, IN `prtelefono` VARCHAR(100) CHARSET utf8, IN `prdireccion` VARCHAR(100) CHARSET utf8)
    NO SQL
BEGIN
    SELECT
    count(ct.id_centro_trabajo_pnp) as total
    from
    centro_trabajo_pnp as ct
    left join distrito as d on
    ct.id_distrito = d.id_distrito
    left join provincia as p on
    d.id_provincia = p.id_provincia
    left join departamento as dp on
    p.id_departamento = dp.id_departamento
    where
    estado = 1
    and
    (
        ( prdistrito='' ) or
        ( dp.dpt_nombre like concat(prdistrito, "%") ) or
        ( p.prv_nombre like concat(prdistrito, "%") ) or
        ( d.dst_nombre like concat(prdistrito, "%") )
    )
    AND
    ( prcomisaria='' or ct.comisaria like concat("%", prcomisaria, "%") )
    AND
    ( prdivision='' or ct.division like concat("%",prdivision, "%") )
    AND
    ( prtelefono='' or ct.telefono like concat(prtelefono, "%") )
    AND
    ( prdireccion='' or ct.direccion like concat(prdireccion, "%") ) ;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclienteestrictounlimited`(IN `prcodigo` VARCHAR(45) CHARSET utf8, IN `prcip` VARCHAR(20) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(100) CHARSET utf8, IN `prinstitucion` INT, IN `prsede` INT, IN `prestado` INT)
    READS SQL DATA
BEGIN

    SELECT
    resultado.id as id,
    resultado.codigo as codigo,
    resultado.dni as dni,
    resultado.nombre as nombre,
    resultado.cip as cip,
    resultado.email as email,
    resultado.cargo as cargo,
    resultado.cargo_estado as cargo_estado,
    resultado.casilla as casilla,
    resultado.institucion as institucion,
	resultado.sede as sede,
    resultado.subsede as subsede,
    resultado.distrito as distrito,
    resultado.provincia as provincia,
    resultado.departamento as departamento,
    resultado.trabajo as trabajo,
    COALESCE(sum(resultado.cuotas_vencidas),0) as cuotas_vencidas
    FROM
    (
        select
        c2v.idcliente as id,
        c2v.clt_codigo as codigo,
        c2v.clt_dni as dni,
        c2v.clt_nombre as nombre,
        c2v.clt_cip as cip,
        c2v.clt_email as email,
        cg2v.crg_nombre as cargo,
        cgs2v.cstd_nombre as cargo_estado,
        c2v.clt_casilla as casilla,
        i2.inst_nombre as institucion,
        s2.sd_nombre as sede,
        ssd2v.ssd_nombre as subsede,
        distrito.dst_nombre as distrito,
        provincia.prv_nombre as provincia,
        departamento.dpt_nombre as departamento,
        c2v.clt_trabajo as trabajo,
   	 	_cronograma.cuotas_vencidas as cuotas_vencidas
        from
        venta as vt2
        inner join cliente as c2v on
        vt2.id_cliente=c2v.idcliente
        inner join subsede as ssd2v on
        c2v.id_sub_sede=ssd2v.id_subsede
        inner join cargo as cg2v on
        c2v.id_cargo=cg2v.id_cargo
        inner join cargo_estado as cgs2v on
        c2v.id_cargo_estado =  cgs2v.id_cargo_estado
        inner join sede as s2 on
        c2v.id_sede=s2.id_sede
        inner join institucion as i2 on
        c2v.id_institucion=i2.id_institucion
        left join distrito on
        c2v.id_distrito_trabajo = distrito.id_distrito
        left join provincia on
        distrito.id_provincia = provincia.id_provincia
        left join departamento on
        provincia.id_departamento = departamento.id_departamento
    	left JOIN
        (
            select
            v3.id_cliente as id_cliente,
            count(vc2.id_venta_cronograma) as cuotas_vencidas
            FROM
            venta_cronograma as vc2
            inner join venta as v3 on
            vc2.id_venta=v3.idventa
            where
            vc2.cng_estado=1
            and
            v3.vnt_estado=1
            and
            vc2.cng_fecha_vencimiento<CURRENT_DATE
            group by
            v3.id_cliente
        ) as _cronograma on
        vt2.id_cliente=_cronograma.id_cliente
        where
        vt2.vnt_estado=1
        and
        c2v.clt_estado = prestado
        AND
        (c2v.clt_dni LIKE CONCAT(prdni,'%'))
        AND
        (c2v.clt_nombre LIKE CONCAT(prnombre,'%'))
        and
        (c2v.clt_codigo like concat(prcodigo,'%'))
        and
        (c2v.clt_cip like concat(prcip,'%'))
        and
        ( prinstitucion=0 or i2.id_institucion=prinstitucion )
        and
        ( prsede=0 or s2.id_sede=prsede )
        group by vt2.id_cliente

        UNION

        select
        c2c.idcliente as id,
        c2c.clt_codigo as codigo,
        c2c.clt_dni as dni,
        c2c.clt_nombre as nombre,
        c2c.clt_cip as cip,
        c2c.clt_email as email,
        cg2c.crg_nombre as cargo,
        cgs2c.cstd_nombre as cargo_estado,
        c2c.clt_casilla as casilla,
        i2.inst_nombre as institucion,
    	s2.sd_nombre as sede,
        ssd2c.ssd_nombre as subsede,
        distrito.dst_nombre as distrito,
        provincia.prv_nombre as provincia,
        departamento.dpt_nombre as departamento,
        c2c.clt_trabajo as trabajo,
    	_cronograma.cuotas_vencidas as cuotas_vencidas
        from
        creditos as ct2
        inner join cliente as c2c on
        ct2.id_cliente=c2c.idcliente
        inner join subsede as ssd2c on
        c2c.id_sub_sede=ssd2c.id_subsede
        inner join cargo as cg2c on
        c2c.id_cargo=cg2c.id_cargo
        inner join cargo_estado as cgs2c on
        c2c.id_cargo_estado =  cgs2c.id_cargo_estado
        inner join sede as s2 on
        c2c.id_sede=s2.id_sede
        inner join institucion as i2 on
        c2c.id_institucion=i2.id_institucion
        left join distrito on
        c2c.id_distrito_trabajo = distrito.id_distrito
        left join provincia on
        distrito.id_provincia = provincia.id_provincia
        left join departamento on
        provincia.id_departamento = departamento.id_departamento
        left JOIN
        (
            select
            c3.id_cliente as id_cliente,
            count(cc2.id_credito_cronograma) as cuotas_vencidas
            FROM
            credito_cronograma as cc2
            inner join creditos as c3 on
            cc2.id_credito=c3.id_credito
            where
            cc2.estado=1
            and
            c3.estado=1
            and
            cc2.fecha_vencimiento<CURRENT_DATE
            group by
            c3.id_cliente
        ) as _cronograma on
        ct2.id_cliente=_cronograma.id_cliente
        where
        ct2.estado=1
        and
        c2c.clt_estado = prestado
        AND
        (c2c.clt_dni LIKE CONCAT(prdni,'%'))
        AND
        (c2c.clt_nombre LIKE CONCAT(prnombre,'%'))
        and
        (c2c.clt_codigo like concat(prcodigo,'%'))
        and
        (c2c.clt_cip like concat(prcip,'%'))
        and
        ( prinstitucion=0 or i2.id_institucion=prinstitucion )
        and
        ( prsede=0 or s2.id_sede=prsede )
        group by ct2.id_cliente

    ) as resultado
    group by
    resultado.id
    order BY
    resultado.nombre asc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzaarchivosdetalle`(IN `prcabecera` INT)
    NO SQL
select
cd.id_cliente as id_cliente,
cl.clt_dni as cliente_dni,
cl.clt_nombre as cliente,
case cd.id_credito_cronograma
when 0 then vt.idventa
else ct.id_credito
end as id_transaccion,
case cd.id_credito_cronograma
when 0 then 3
else 
    case ct.tipo
    when 1 then 1
    else 2
	end
end as id_tipo,
case cd.id_credito_cronograma
when 0 then "Venta"
else 
    case ct.tipo
    when 1 then "Afiliaci�n"
    else "Pr�stamo"
	end
end as tipo,
case cd.id_credito_cronograma
when 0 then CONCAT(t.tln_serie,"-",t.tln_numero)
else 
    case ct.tipo
    when 1 then ct.codigo
    else CONCAT(ct.codigo,"-",LPAD(ct.numero,3,"0"))
	end
end as documento,
ROUND(cd.monto,2) as monto_enviado,
ROUND(COALESCE(cbd.monto,0),2) as monto_pagado,
ROUND(cd.monto,2)-ROUND(COALESCE(cbd.monto,0),2) as diferencia
from
cobranza_archivos_detalle as cd
left join cobranza_detalle as cbd on
cd.id_cobranza_detalle=cbd.id_cobranza_archivos
inner join cliente as cl on
cd.id_cliente=cl.idcliente
left join credito_cronograma as cg on
cd.id_credito_cronograma=cg.id_credito_cronograma
left join creditos as ct on
cg.id_credito=ct.id_credito
left join venta_cronograma as vg on
cd.id_venta_cronograma=vg.id_venta_cronograma
left join venta as vt on
vg.id_venta=vt.idventa
left join talonario as t on
vt.id_talonario=t.id_talonario
where
cd.id_cobranza=prcabecera
and
cd.estado=1
/*and
cbd.estado=1*/
order by 
cl.clt_nombre asc, diferencia asc, id_tipo asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxclienteperiodoscontar`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prtipocomparacion` INT, IN `prlimite` INT)
    NO SQL
BEGIN

select
count(*) as total
from 
(
select
id_cliente,
cliente_dni,
cliente,
case prtipopago
	when 0 then "Todos"
    else tipo_pago
end as tipo_pago,
subsede,
sede,
institucion,
sum(monto_pendiente) as monto_pendiente,
count(*) as total_deudas,
min(fecha_vencimiento) as primera_fecha_vencimiento,
max(ultima_fecha_pago) as ultima_fecha_pago ,
max(meses_sin_pagar) as meses_sin_pagar ,
identificador
from
(
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente ,
    min(vg.cng_fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago ,
    GROUP_CONCAT(DISTINCT concat('Venta: ', t.tln_serie,'-',t.tln_numero) SEPARATOR ', ') as identificador ,
    case 
	when max(detalle_pagos_adjunto.fecha) is not null then TIMESTAMPDIFF(MONTH, max(detalle_pagos_adjunto.fecha), now() )
    else TIMESTAMPDIFF(MONTH, min(vg.cng_fecha_vencimiento), now() )
end as meses_sin_pagar
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join liquidaciones as lq on
    v.idventa = lq.id_venta
    left join
    (
        select
        cd.id_venta_cronograma as id_venta_cronograma,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        	cd.id_venta_cronograma
    )  as detalle_pagos_adjunto on
    vg.id_venta_cronograma = detalle_pagos_adjunto.id_venta_cronograma
    where
    v.vnt_estado=1
    and
    vg.cng_estado=1
    and
    vg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) > 0
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
    group by
    	v.id_cliente
    having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
union
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente ,
    min(cg.fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago,
    GROUP_CONCAT(
        DISTINCT
        case c.tipo
            when 1 then concat('Afiliacion: ', c.codigo)
            else CONCAT('Prestamo: ', c.codigo,"-",LPAD(c.numero,3,"0"))
        end
        SEPARATOR ', '
    ) as identificador ,
        case 
	when max(detalle_pagos_adjunto.fecha) is not null then TIMESTAMPDIFF(MONTH, max(detalle_pagos_adjunto.fecha), now() )
    else TIMESTAMPDIFF(MONTH, min(cg.fecha_vencimiento), now() )
end as meses_sin_pagar
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join liquidaciones as lq on
    c.id_credito = lq.id_credito
	left join
    (
        select
        cd.id_credito_cronograma as id_credito_cronograma ,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        cd.id_credito_cronograma
    ) as detalle_pagos_adjunto on
    cg.id_credito_cronograma = detalle_pagos_adjunto.id_credito_cronograma
    where
    c.estado=1
    and
    cg.estado=1
    and
    cg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) > 0
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
    group by
    	c.id_cliente
    having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
) as resultado
group by resultado.id_cliente
having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
and
(
	(prtipocomparacion=0) or
    (prtipocomparacion=1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) <= prlimite ) or
    (prtipocomparacion=-1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) >= prlimite )
)
) as resultado_2 ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientetelefononumeros`(IN `prid` INT)
    NO SQL
select tlf_numero as numero from cliente_telefono where id_cliente=prid and tlf_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcreditogarante`(IN `prcredito` INT, IN `prcliente` INT, IN `prclientetelefono` VARCHAR(11) CHARSET utf8, IN `prclientedireccion` VARCHAR(100) CHARSET utf8, IN `prpdfdni` VARCHAR(100) CHARSET utf8, IN `prpdfcip` VARCHAR(100) CHARSET utf8, IN `prpdfplanilla` VARCHAR(100) CHARSET utf8)
    NO SQL
insert into
credito_garante
set
id_credito=prcredito,
id_cliente=prcliente,
cliente_telefono=prclientetelefono,
cliente_direccion=prclientedireccion,
dni_adjunto=prpdfdni,
cip_adjunto=prpdfcip,
planilla_virtual_adjunto=prpdfplanilla$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzadirecta`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prbanco` INT, IN `properacion` VARCHAR(20) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prvalidado` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `orden` VARCHAR(20) CHARSET utf8)
    READS SQL DATA
BEGIN

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    DECLARE VCLIENTE VARCHAR(255);
    DECLARE VBANCO VARCHAR(255);
    DECLARE VOPERACION VARCHAR(255);
    DECLARE VFECHA VARCHAR(255);
	DECLARE VVALIDADO varchar(255);

    set IP = (prpagina-1)*prtotalpagina;
    set TP = prtotalpagina;

    SET VCLIENTE = concat(" AND (ct.clt_nombre like CONCAT('", prcliente,"', '%')) ");

	IF prbanco=0 THEN set VBANCO="" ;
    ELSE SET VBANCO=concat(" AND (cc.id_banco =", prbanco,") ");
    END IF;
    
    SET VOPERACION = concat(" AND (cd.numero_operacion like CONCAT('", properacion,"', '%')) ");
    
    IF (isnull(prfechainicio) and isnull(prfechafin)) then set VFECHA="";
    ELSEIF (isnull(prfechafin)) then set VFECHA=CONCAT("AND (DATE(cd.fecha)>='",prfechainicio,"') ");
    ELSEIF (isnull(prfechainicio)) then set VFECHA=CONCAT("AND (DATE(cd.fecha)<='",prfechafin,"') ");
    ELSE set VFECHA=CONCAT("AND (DATE(cd.fecha) between '",prfechainicio,"' and '",prfechafin,"') ");
    END IF;

	if prvalidado = -1 then set VVALIDADO='' ;
    else set VVALIDADO=concat(" AND (cd.validado =", prvalidado,") ");
    end if ;

    set @Statement=concat("
        select
        cd.id_cobranza_directa as id,
        cd.fecha as fecha,
        cd.id_cliente as id_cliente,
        ct.clt_nombre as cliente,
        cd.id_cooperativa_cuenta as cooperativa_cuenta,
		cc.alias as cooperativa_cuenta_alias,
		b.bnc_nombre as banco,
        cd.fecha_referencia as fecha_referencia,
        cd.numero_operacion as numero_operacion,
        cd.monto as monto ,
        cd.validado as validado
        from cobranza_directa as cd
        inner join cliente as ct on
        cd.id_cliente=ct.idcliente
        inner join cooperativa_cuenta as cc on
        cd.id_cooperativa_cuenta=cc.id_cooperativa_cuenta
        inner join banco as b on
        cc.id_banco=b.id_banco
        WHERE
        cd.estado=1 ",
        VCLIENTE,
        VBANCO,
        VOPERACION,
        VFECHA,
		VVALIDADO,
        " order by ",
        orden,
        ", cd.fecha desc, id desc",
        " limit ",IP,",",TP
    );

    PREPARE stmt FROM @Statement;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzamanualtipo`(IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

    DECLARE IP  INT unsigned;
    DECLARE TP  INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

    SELECT
    id_cobranza_manual_tipo as id,
    nombre as nombre
    from
    cobranza_manual_tipo
    where
    nombre like concat(prnombre,'%')
    order by nombre asc
    limit IP,TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcobranzaarchivosdetalle`(IN `prcobranza` INT, IN `prcliente` INT, IN `prcreditocronograma` INT, IN `prventacronograma` INT, IN `prmonto` FLOAT)
    NO SQL
insert into
cobranza_archivos_detalle
set
id_cobranza=prcobranza,
id_cliente=prcliente,
id_credito_cronograma=prcreditocronograma,
id_venta_cronograma=prventacronograma,
monto=prmonto$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecuenta`(IN `prcliente` INT, IN `prrelevancia` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
c.id_cuenta as id,
c.id_cliente as id_cliente,
c.id_banco as id_banco,
UPPER(b.bnc_nombre) as nombre_banco,
CONCAT_WS('-', SUBSTR(c.cnt_numero,1,2), SUBSTR(c.cnt_numero,3,3), 
SUBSTR(c.cnt_numero,6)) as cuenta_numero ,
CONCAT_WS('-', SUBSTR(c.cnt_cci,1,3),SUBSTR(c.cnt_cci,4,3),SUBSTR(c.cnt_cci,7,11),
RIGHT(c.cnt_cci,3)) as cuenta_cci,
c.cnt_relevancia as relevancia
from
cliente_cuenta as c
inner join banco as b on
c.id_banco=b.id_banco
where
c.cnt_estado=1
and
c.id_cliente=prcliente
AND
(prrelevancia is null or c.cnt_relevancia = prrelevancia)
order by c.cnt_relevancia asc, c.id_cuenta asc
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzaplanillacabecera`(IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

select
c.id_cobranza as id,
c.fecha_creacion as fecha_creacion,
s.sd_nombre as sede,
tp.tpag_nombre as tipo_pago,
c.fecha_inicio as fecha_inicio,
c.fecha_fin as fecha_fin,
c.cantidad as cantidad,
c.monto as monto,
c.nombre_archivo as archivo,
case c.estado
when 1 then "Pendiente"
when 2 then "Pagado"
end as estado,
c.estado as id_estado
from
cobranza_archivos_cabecera as c
inner join sede as s on
c.id_sede=s.id_sede
inner join tipo_pago as tp on
c.id_tipo_pago=tp.idtipo_pago
where
c.estado<3
order by c.fecha_creacion desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasrealizadasplanilla`(IN `prcabecera` INT, IN `prcliente` INT)
    NO SQL
begin

	SELECT
    
    cd.id_cliente as id_cliente,
    
    cd.id_cobranza_detalle as id,
    
    case cd.id_venta_cronograma
    when 0 then cg.id_credito_cronograma
    else vg.id_venta_cronograma
    end as id_cronograma,
	
    case cd.id_venta_cronograma
    when 0 then if(c.tipo=1,1,2)
    else 3
    end as id_tipo,
    
    case cd.id_venta_cronograma
    when 0 then if(c.tipo=1,"Afiliaci�n","Pr�stamo")
    else "Venta"
    end as tipo,
    
    case cd.id_venta_cronograma
    when 0 then if(c.tipo=1,c.codigo,CONCAT(c.codigo,"-",LPAD(c.numero,3,"0")))
    else CONCAT(t.tln_serie,"-",t.tln_numero)
    end as codigo,
    
    case cd.id_venta_cronograma
    when 0 then ROUND(cg.monto_capital,2)
    else ROUND(vg.cng_monto_cuota,2)
    end as capital,
    
    case cd.id_venta_cronograma
    when 0 then ROUND(cg.monto_interes+cg.interes,2)
    else ROUND(vg.cng_interes,2)
    end as interes,

    case cd.id_venta_cronograma
    when 0 then ROUND(cg.monto_capital+cg.monto_interes+cg.interes,2)
    else ROUND(vg.cng_monto_cuota+vg.cng_interes,2)
    end as monto_total,

    case cd.id_venta_cronograma
    when 0 then ROUND(cg.monto_capital+cg.monto_interes+cg.interes-	cg.monto_pagado,2)
    else ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2)
    end as monto_pendiente,
    
    case cd.id_venta_cronograma
    when 0 then cg.fecha_vencimiento
    else vg.cng_fecha_vencimiento
    end as fecha_vencimiento,
    
    case cd.id_venta_cronograma
    when 0 then cg.fecha_cancelacion
    else vg.cng_fecha_cancelacion
    end as fecha_cancelacion,

    case cd.id_venta_cronograma
    when 0 then if(cg.estado=1,"Pendiente","Pagado")
    else if(vg.cng_estado=1,"Pendiente","Pagado")
    end as estado,

    
    case cd.id_venta_cronograma
    when 0 then cg.estado
    else vg.cng_estado
    end as id_estado
    
    from
    cobranza_archivos_detalle as cd
    left join venta_cronograma as vg on
    cd.id_venta_cronograma=vg.id_venta_cronograma
    left join venta as v on
    vg.id_venta=v.idventa
    left join talonario as t on
    v.id_talonario=t.id_talonario
	left join credito_cronograma as cg on
    cd.id_credito_cronograma=cg.id_credito_cronograma
    left join creditos as c on
    cg.id_credito=c.id_credito
    where
    cd.id_cobranza=prcabecera
    and
    cd.id_cliente=prcliente
    and
    (v.vnt_estado<>3 or c.estado<>3)
    and
    (v.id_tipopago=1 or c.id_tipo_pago=1)
    and
    (vg.cng_estado=1 or cg.estado=1)
	order by
    fecha_vencimiento,id_tipo;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcapacidadpago`(IN `prcliente` INT, IN `prmonto` FLOAT, IN `prtipo` INT, IN `prfecha` DATE)
    READS SQL DATA
begin

insert into
capacidad_pago
set id_cliente=prcliente,
cpg_monto=prmonto,
cpg_tipo=prtipo,
cpg_fecha=prfecha;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxclienteperiodosdetalladocontar`(IN `prcliente` INT, IN `prtipocomparacion` INT, IN `prlimite` INT)
    NO SQL
BEGIN

select
count(*) as total
from
(
    select
    tipo_transaccion ,
    id_transaccion ,
    identificador ,
    fecha_transaccion ,
    sum(monto_pendiente) as monto_pendiente,
    min(fecha_vencimiento) as primera_fecha_vencimiento,
    max(ultima_fecha_pago) as ultima_fecha_pago ,
    case 
    when ultima_fecha_pago is not null then TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now() )
    else TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now() )
    end as meses_sin_pagar
    from
    (
        select
        2 as tipo_transaccion ,
        v.idventa as id_transaccion ,
        GROUP_CONCAT(concat(t.tln_serie,'-',t.tln_numero)) as identificador ,
        v.vnt_fecha as fecha_transaccion ,
        ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente ,
        min(vg.cng_fecha_vencimiento) as fecha_vencimiento ,
        max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago
        from
        venta_cronograma as vg
        inner join venta as v on
        vg.id_venta=v.idventa
        inner join talonario as t on
        v.id_talonario=t.id_talonario
        inner join cliente as cl on
        v.id_cliente=cl.idcliente
        inner join tipo_pago as tp on
        vg.id_tipo_pago=tp.idtipo_pago
        inner join subsede as ssd on
        cl.id_sub_sede=ssd.id_subsede
        inner join sede as sd on
        ssd.id_sede=sd.id_sede
        inner join institucion as ins on
        sd.id_institucion=ins.id_institucion
        left join liquidaciones as lq on
        v.idventa = lq.id_venta
        left join
        (
            select
            cd.id_venta_cronograma as id_venta_cronograma,
            if(
                cd.id_cobranza_directa>0,
                max(cbd.fecha),
                if(
                    cd.id_cobranza_archivos>0,
                    cac.fecha_pago,
                    if(
                        cd.id_cobranza_manual>0,
                        cbm.fecha,
                        null
                    )
                )
            ) as fecha
            from
            cobranza_detalle as cd
            left join cobranza_directa as cbd on
            cd.id_cobranza_directa=cbd.id_cobranza_directa
            left join cobranza_archivos_detalle as cad on
            cd.id_cobranza_archivos=cad.id_cobranza_detalle
            left join cobranza_archivos_cabecera as cac on
            cad.id_cobranza=cac.id_cobranza
            left join cobranza_manual as cbm on
            cd.id_cobranza_manual=cbm.id_cobranza_manual
            where
            cd.estado=1
            and
            ( 
                (cd.id_cobranza_archivos=0) or
                (cd.id_cobranza_archivos>0 and cac.estado=2)
            )
            and
            (
                (cd.id_cobranza_directa=0) or
                (cd.id_cobranza_directa>0 and cbd.estado=1)
            )
            and
            (
                (cd.id_cobranza_manual=0) or
                (cd.id_cobranza_manual>0 and cbm.estado=1)
            )
            group by
            cd.id_venta_cronograma
        )  as detalle_pagos_adjunto on
        vg.id_venta_cronograma = detalle_pagos_adjunto.id_venta_cronograma
        where
        v.vnt_estado=1
        and
        vg.cng_estado=1
        and
        vg.tipo_cuota<>2
        and
        lq.id_liquidacion is null
        and
        cl.idcliente = prcliente
        group by
        v.idventa
        union
        select
        1 as tipo_transaccion ,
        c.id_credito as id_transaccion ,
        case c.tipo
        when 1 then c.codigo
        else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
        end as identificador ,
        c.fecha as fecha_transaccion ,
        ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente ,
        min(cg.fecha_vencimiento) as fecha_vencimiento ,
        max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago
        from
        credito_cronograma as cg
        inner join creditos as c on
        cg.id_credito=c.id_credito
        inner join tipo_pago as tp on
        cg.id_tipo_pago=tp.idtipo_pago
        inner join cliente as cl on
        c.id_cliente=cl.idcliente
        inner join subsede as ssd on
        cl.id_sub_sede=ssd.id_subsede
        inner join sede as sd on
        ssd.id_sede=sd.id_sede
        inner join institucion as ins on
        sd.id_institucion=ins.id_institucion
        left join liquidaciones as lq on
        c.id_credito = lq.id_credito
        left join
        (
            select
            cd.id_credito_cronograma as id_credito_cronograma ,
            if(
                cd.id_cobranza_directa>0,
                max(cbd.fecha),
                if(
                    cd.id_cobranza_archivos>0,
                    cac.fecha_pago,
                    if(
                        cd.id_cobranza_manual>0,
                        cbm.fecha,
                        null
                    )
                )
            ) as fecha
            from
            cobranza_detalle as cd
            left join cobranza_directa as cbd on
            cd.id_cobranza_directa=cbd.id_cobranza_directa
            left join cobranza_archivos_detalle as cad on
            cd.id_cobranza_archivos=cad.id_cobranza_detalle
            left join cobranza_archivos_cabecera as cac on
            cad.id_cobranza=cac.id_cobranza
            left join cobranza_manual as cbm on
            cd.id_cobranza_manual=cbm.id_cobranza_manual
            where
            cd.estado=1
            and
            ( 
                (cd.id_cobranza_archivos=0) or
                (cd.id_cobranza_archivos>0 and cac.estado=2)
            )
            and
            (
                (cd.id_cobranza_directa=0) or
                (cd.id_cobranza_directa>0 and cbd.estado=1)
            )
            and
            (
                (cd.id_cobranza_manual=0) or
                (cd.id_cobranza_manual>0 and cbm.estado=1)
            )
            group by
            cd.id_credito_cronograma
        ) as detalle_pagos_adjunto on
        cg.id_credito_cronograma = detalle_pagos_adjunto.id_credito_cronograma
        where
        c.estado=1
        and
        cg.estado=1
        and
        cg.tipo_cuota<>2
        and
        lq.id_liquidacion is null
        and
        cl.idcliente = prcliente
        group by
        c.id_credito
    ) as resultado
    group by resultado.id_transaccion, resultado.tipo_transaccion
    having
    if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
    and
    (
        (prtipocomparacion=0) or
        (prtipocomparacion=1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) <= prlimite ) or
        (prtipocomparacion=-1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) >= prlimite )
    )
    order by fecha_transaccion asc
) as resultado2 ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzadirectaxId`(IN `prcobranza` INT)
    NO SQL
BEGIN

        select
		cd.id_cobranza_directa as id,
        cd.fecha as fecha,
        cd.id_cliente as id_cliente,
        ct.clt_nombre as cliente,
        cd.id_cooperativa_cuenta as cooperativa_cuenta,
        cc.id_banco as id_banco,
        b.bnc_nombre as banco,
        cd.numero_operacion as numero_operacion,
        cd.monto as monto,
        cd.id_transaccion as id_transaccion,
        cd.solo_directas as solo_directas,
        cd.archivo as archivo,
        cd.fecha_referencia as fecha_referencia,
        cd.observaciones as observaciones,
        cd.id_vendedor as id_vendedor ,
        coalesce(v.vnd_nombre,"SIN ESPECIFICAR") as vendedor
        from cobranza_directa as cd
        inner join cliente as ct on
        cd.id_cliente=ct.idcliente
        inner join cooperativa_cuenta as cc on
        cd.id_cooperativa_cuenta=cc.id_cooperativa_cuenta
        inner join banco as b on
        cc.id_banco=b.id_banco
        left join vendedor as v on
        cd.id_vendedor=v.idvendedor
        WHERE
        cd.id_cobranza_directa=prcobranza;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarbancocontar`(IN `prbanco` VARCHAR(70) CHARSET utf8)
    READS SQL DATA
select
    count(id_banco) as total
    from
    banco
    where
    bnc_estado=1
    and
    bnc_nombre like concat(prbanco, '%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientexcelular`(IN `prnumero` VARCHAR(15) CHARSET utf8)
    NO SQL
SELECT
c.idcliente as id,
c.clt_dni as dni,
c.clt_nombre as nombre
from
cliente_telefono as ct
INNER join cliente as c ON
ct.id_cliente=c.idcliente
WHERE
ct.tlf_numero=prnumero$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzadetalleplanillaconsolidadoxcliente`(IN `prcabecera` INT)
    NO SQL
select
c.clt_codigo as codigo,
ROUND(sum(cd.monto),2) as monto
from
cobranza_archivos_detalle as cd
inner join cliente as c on
c.idcliente=cd.id_cliente
where
(prcabecera=0 or cd.id_cobranza=prcabecera)
group by
cd.id_cliente$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarseguimiento`(IN `prid` INT, IN `prcourier` INT, IN `prfecha` DATE, IN `prnumero` VARCHAR(20) CHARSET utf8, IN `prfoto` VARCHAR(100) CHARSET utf8, IN `probservacion` VARCHAR(255) CHARSET utf8)
    NO SQL
BEGIN

update
seguimiento_documentos
set
id_courier=prcourier,
fecha=prfecha,
numero_seguimiento=prnumero,
foto=prfoto,
observacion=probservacion
where
id_seguimiento=prid;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcolores`(IN `prnombre` VARCHAR(20) CHARSET utf8)
    READS SQL DATA
select
id,
nombre
from colores
where
nombre like concat('%',prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasposiblescuotasSINdirecta`(IN `prcliente` INT, IN `prmonto` FLOAT, IN `prtransaccion` INT, IN `prestricto` INT, IN `prfecha` DATE, IN `prcobranza` INT)
    NO SQL
BEGIN

    select
    *,
    if(
        @total<prmonto*2,	
        @total:=@total+resultado.monto_pendiente,
        null)
    as acumulado
    from
    (SELECT @total:=0) AS t,
    (
        select
        v.idventa as id,
        vg.id_venta_cronograma as id_cronograma,
        3 as id_tipo,
        "Venta" as tipo,
        CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
        vg.cng_monto_cuota as capital,
        vg.cng_interes as interes,
        case
            # Si no se pasa parámetro, se considera el interés como está
            when prfecha is null then vg.cng_interes
            else 
                # Si la fecha de pago se da en el mes anterior o antes de la fecha de vencimiento, el interés es 0
                case
                    when prfecha <= date_sub(last_day(vg.cng_fecha_vencimiento), interval 1 month) then 0
                    else vg.cng_interes
                end
        end as interes_considerado,
        # Se considera el interes_considerado para los cálculos
        vg.cng_monto_cuota + 
        (
            case
                when prfecha is null then vg.cng_interes
                else 
                    case
                        when prfecha <= date_sub(last_day(vg.cng_fecha_vencimiento), interval 1 month) then 0
                        else vg.cng_interes
                    end
            end
        )
        as monto_total,
        SUM(if(cd.id_cobranza_directa=prcobranza,cd.monto,0)) as monto_pagado_cobranza,
        ROUND(
            vg.cng_monto_cuota+
            (
                case
                    when prfecha is null then vg.cng_interes
                    else 
                        case
                            when prfecha <= date_sub(last_day(vg.cng_fecha_vencimiento), interval 1 month) then 0
                            else vg.cng_interes
                        end
                end
            )
            -vg.cng_monto_pagado
            +SUM(if(cd.id_cobranza_directa=prcobranza,cd.monto,0))
        ,2) as monto_pendiente,
        vg.cng_fecha_vencimiento as fecha_vencimiento,
        vg.cng_fecha_cancelacion as fecha_cancelacion,
        case vg.cng_estado
        when 1 then "PENDIENTE"
        when 2 then "PAGADO"
        end as estado,
        vg.cng_estado as id_estado
        from
        venta_cronograma as vg
        inner join venta as v on
        vg.id_venta=v.idventa
        inner join talonario as t on
        v.id_talonario=t.id_talonario
        left join cobranza_detalle as cd on
        vg.id_venta_cronograma=cd.id_venta_cronograma
        where
        v.vnt_estado<>3
        and
        v.id_cliente=prcliente
        and
        (
        	(prtransaccion=0) or
            (v.idventa = prtransaccion)
        )
        and
        (
            (prestricto=0) or
            (prestricto=1 and vg.id_tipo_pago=2)
        )
        and
        vg.cng_estado>0
        and
        vg.tipo_cuota<>2
        group by vg.id_venta_cronograma
    union
        select
        c.id_credito as id,
        cg.id_credito_cronograma as id_cronograma,
        case c.tipo
        when 1 then 1
        else 2
        end as id_tipo,
        case c.tipo
        when 1 then "Afiliación"
        else "Préstamo"
        end as tipo,
        case c.tipo
        when 1 then c.codigo
        else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
        end as codigo,
        cg.monto_capital as capital,
        cg.monto_interes+cg.interes as interes,
        case
            # Si no se pasa parámetro, se considera el interés como está
            when prfecha is null then cg.monto_interes+cg.interes
            else 
                # Si la fecha de pago se da en el mes anterior o antes de la fecha de vencimiento, el interés es 0
                case
                    when prfecha <= date_sub(last_day(cg.fecha_vencimiento), interval 1 month) then 0
                    else cg.monto_interes+cg.interes
                end
        end as interes_considerado,
        # Se considera el interes_considerado para los cálculos
        cg.monto_capital + 
        (
            case
                when prfecha is null then cg.monto_interes+cg.interes
                else 
                    case
                        when prfecha <= date_sub(last_day(cg.fecha_vencimiento), interval 1 month) then 0
                        else cg.monto_interes+cg.interes
                    end
            end
        )
        as monto_total,
        SUM(if(cd.id_cobranza_directa=prcobranza,cd.monto,0)) as monto_pagado_cobranza,
        ROUND(
            cg.monto_capital+
            (
                case
                    when prfecha is null then cg.monto_interes+cg.interes
                    else 
                        case
                            when prfecha <= date_sub(last_day(cg.fecha_vencimiento), interval 1 month) then 0
                            else cg.monto_interes+cg.interes
                        end
                end
            ) 
            -cg.monto_pagado
            +SUM(if(cd.id_cobranza_directa=prcobranza,cd.monto,0))
        ,2) as monto_pendiente,
        cg.fecha_vencimiento as fecha_vencimiento,
        cg.fecha_cancelacion as fecha_cancelacion,
        case cg.estado
        when 1 then "PENDIENTE"
        when 2 then "PAGADO"
        end as estado,
        cg.estado as id_estado
        from
        credito_cronograma as cg
        inner join creditos as c on
        cg.id_credito=c.id_credito
        left join cobranza_detalle as cd on
        cg.id_credito_cronograma=cd.id_credito_cronograma
        where
        c.estado<>3
        and
        c.id_cliente=prcliente
        and
        (
        	(prtransaccion=0) or
            (c.id_credito = prtransaccion)
        )
        and
        (
            (prestricto=0) or
            (prestricto=1 and cg.id_tipo_pago=2)
        )
        and
        cg.estado>0
        and
        cg.tipo_cuota<>2
        group by cg.id_credito_cronograma
    ) as resultado
    having (acumulado is not null and resultado.monto_pendiente>0)
    order by
        resultado.fecha_vencimiento asc,
        resultado.id_tipo asc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventagarante`(IN `prventagarante` INT)
    NO SQL
update
venta_garante
set
vtg_estado=0
where
id_ventagarante=prventagarante$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclienteobservacion`(IN `prcliente` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    MODIFIES SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
id_cliente_observacion as id,
cobs_observacion as observacion,
archivo as archivo,
cobs_fecha as fecha
from
cliente_observacion
where
id_cliente=prcliente
and
cobs_estado=1
order by id_cliente_observacion desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasmanualescontar`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prdni` VARCHAR(10) CHARSET utf8, IN `prvendedor` VARCHAR(50) CHARSET utf8, IN `prtipo` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
BEGIN

    select
    count(cm.id_cobranza_manual) as total
    from
    cobranza_manual as cm
    inner join cliente as c on
    cm.id_cliente=c.idcliente
    inner join cobranza_manual_tipo as t on
    cm.id_tipo_cobranza_manual=t.id_cobranza_manual_tipo
    left join vendedor as v on
    cm.id_vendedor=v.idvendedor
    where
    cm.estado=1
    and
    c.clt_nombre like concat(prcliente,'%')
    and
    c.clt_dni like concat(prdni,'%')
    and
    v.vnd_nombre like concat(prvendedor,'%')
    and
    ( prtipo=0 or t.id_cobranza_manual_tipo=prtipo )
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (cm.fecha BETWEEN prfechainicio and prfechafin)
    );

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclienteestrictocontar`(IN `prcodigo` VARCHAR(45) CHARSET utf8, IN `prcip` VARCHAR(20) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(100) CHARSET utf8, IN `prinstitucion` INT, IN `prsede` INT, IN `prestado` INT)
    READS SQL DATA
BEGIN

    SELECT
    count(*) as total
    FROM
    (
        select
        c2v.idcliente as id
        from
        venta as vt2
        inner join cliente as c2v on
        vt2.id_cliente=c2v.idcliente
        inner join subsede as ssd2v on
        c2v.id_sub_sede=ssd2v.id_subsede
        inner join cargo as cg2v on
        c2v.id_cargo=cg2v.id_cargo
        inner join sede as s2 on
        c2v.id_sede=s2.id_sede
        inner join institucion as i2 on
        c2v.id_institucion=i2.id_institucion
        where
        vt2.vnt_estado<>2
        and
        c2v.clt_estado = prestado
        AND
        (c2v.clt_dni LIKE CONCAT(prdni,'%'))
        AND
        (c2v.clt_nombre LIKE CONCAT(prnombre,'%'))
        and
        (c2v.clt_codigo like concat(prcodigo,'%'))
        and
        (c2v.clt_cip like concat(prcip,'%'))
        and
        ( prinstitucion=0 or i2.id_institucion=prinstitucion )
        and
        ( prsede=0 or s2.id_sede=prsede )
        group by vt2.id_cliente

        UNION

        select
        c2c.idcliente as id
        from
        creditos as ct2
        inner join cliente as c2c on
        ct2.id_cliente=c2c.idcliente
        inner join subsede as ssd2c on
        c2c.id_sub_sede=ssd2c.id_subsede
        inner join cargo as cg2c on
        c2c.id_cargo=cg2c.id_cargo
        inner join sede as s2 on
        c2c.id_sede=s2.id_sede
        inner join institucion as i2 on
        c2c.id_institucion=i2.id_institucion
        where
        ct2.estado<>3
        and
        c2c.clt_estado = prestado
        AND
        (c2c.clt_dni LIKE CONCAT(prdni,'%'))
        AND
        (c2c.clt_nombre LIKE CONCAT(prnombre,'%'))
        and
        (c2c.clt_codigo like concat(prcodigo,'%'))
        and
        (c2c.clt_cip like concat(prcip,'%'))
        and
        ( prinstitucion=0 or i2.id_institucion=prinstitucion )
        and
        ( prsede=0 or s2.id_sede=prsede )
        group by ct2.id_cliente

    ) as resultado;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasposiblescuotas`(IN `prcliente` INT, IN `prmonto` FLOAT, IN `prtransaccion` INT, IN `prestricto` INT, IN `prfecha` DATE)
    NO SQL
BEGIN

# prfecha indica:
# null. Se considera la cuota como está
# fecha. No se consideran los intereses si el mes de vencimiento es anterior a la fecha

select
*,
if(
    @total<prmonto*2,	
    @total:=@total+resultado.monto_pendiente,
    null)
as acumulado
from
(SELECT @total:=0) AS t,
(
    select
    v.idventa as id,
    vg.id_venta_cronograma as id_cronograma,
    3 as id_tipo,
    "Venta" as tipo,
    CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
    vg.cng_monto_cuota as capital,
    vg.cng_interes as interes,
    case
    	# Si no se pasa parámetro, se considera el interés como está
    	when prfecha is null then vg.cng_interes
    	else 
    		# Si la fecha de pago se da en el mes anterior o antes de la fecha de vencimiento, el interés es 0
    		case
    			when prfecha <= date_sub(last_day(vg.cng_fecha_vencimiento), interval 1 month) then 0
    			else vg.cng_interes
    		end
    end as interes_considerado,
    # Se considera el interes_considerado para los cálculos
    vg.cng_monto_cuota + 
	(
        case
            when prfecha is null then vg.cng_interes
            else 
                case
                    when prfecha <= date_sub(last_day(vg.cng_fecha_vencimiento), interval 1 month) then 0
                    else vg.cng_interes
                end
        end
    )
    as monto_total,
    ROUND(
        vg.cng_monto_cuota+
        (
            case
                when prfecha is null then vg.cng_interes
                else 
                    case
                        when prfecha <= date_sub(last_day(vg.cng_fecha_vencimiento), interval 1 month) then 0
                        else vg.cng_interes
                    end
            end
        )
        -vg.cng_monto_pagado
	,2) as monto_pendiente,
    vg.cng_fecha_vencimiento as fecha_vencimiento,
    vg.cng_fecha_cancelacion as fecha_cancelacion,
    case vg.cng_estado
    when 1 then "PENDIENTE"
    when 2 then "PAGADO"
    end as estado,
    vg.cng_estado as id_estado
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    where
    v.vnt_estado<>3
    and
    v.id_cliente=prcliente
    AND
    (
    	(prtransaccion=0) or
        (v.idventa = prtransaccion)
    )
    and
    (
        (prestricto=0) or
        (prestricto=1 and vg.id_tipo_pago=2)
    )
    and
    vg.cng_estado=1
    and
    vg.tipo_cuota<>2
union
    select
    c.id_credito as id,
    cg.id_credito_cronograma as id_cronograma,
    case c.tipo
    when 1 then 1
    else 2
    end as id_tipo,
    case c.tipo
    when 1 then "Afiliación"
    else "Préstamo"
    end as tipo,
    case c.tipo
    when 1 then c.codigo
    else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as codigo,
    cg.monto_capital as capital,
    cg.monto_interes+cg.interes as interes,
    case
    	# Si no se pasa parámetro, se considera el interés como está
    	when prfecha is null then cg.monto_interes+cg.interes
    	else 
    		# Si la fecha de pago se da en el mes anterior o antes de la fecha de vencimiento, el interés es 0
    		case
    			when prfecha <= date_sub(last_day(cg.fecha_vencimiento), interval 1 month) then 0
    			else cg.monto_interes+cg.interes
    		end
    end as interes_considerado,
    # Se considera el interes_considerado para los cálculos
    cg.monto_capital + 
	(
        case
            when prfecha is null then cg.monto_interes+cg.interes
            else 
                case
                    when prfecha <= date_sub(last_day(cg.fecha_vencimiento), interval 1 month) then 0
                    else cg.monto_interes+cg.interes
                end
        end
    )
    as monto_total,
    ROUND(
        cg.monto_capital+
        (
            case
                when prfecha is null then cg.monto_interes+cg.interes
                else 
                    case
                        when prfecha <= date_sub(last_day(cg.fecha_vencimiento), interval 1 month) then 0
                        else cg.monto_interes+cg.interes
                    end
            end
        ) 
        -cg.monto_pagado
	,2) as monto_pendiente,
    cg.fecha_vencimiento as fecha_vencimiento,
    cg.fecha_cancelacion as fecha_cancelacion,
    case cg.estado
    when 1 then "PENDIENTE"
    when 2 then "PAGADO"
    end as estado,
    cg.estado as id_estado
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    where
    c.estado<>3
    and
    c.id_cliente=prcliente
    AND
    (
    	(prtransaccion=0) or
        (c.id_credito = prtransaccion)
    )
    and
    (
        (prestricto=0) or
        (prestricto=1 and cg.id_tipo_pago=2)
    )
    and
    cg.estado=1
    and
    cg.tipo_cuota<>2
) as resultado
having acumulado is not null
order by
	resultado.fecha_vencimiento asc,
    resultado.id_tipo asc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientexId`(IN `pidcliente` INT)
    READS SQL DATA
SELECT
c.idcliente,
c.idcliente,
inst.id_institucion,
s.id_sede,
s.sd_nombre as sede,
ssd.id_subsede,
cr.id_cargo,
cr.crg_nombre,
cg.cstd_nombre as cargo_estado,
c.id_cargo_estado,
c.clt_codigo,
c.clt_dni,
c.clt_nombre,
c.clt_cip,
c.clt_email,
c.clt_casilla,
c.clt_trabajo,
c.id_distrito_trabajo,
dd.dst_nombre,
dp.id_provincia,
dp.prv_nombre,
dt.id_departamento,
dt.dpt_nombre,
c.clt_capacidad_pago,
c.clt_maximo_descuento,
c.clt_calificacion_personal,
c.clt_foto,
c.clt_aporte,
c.clt_fecharegistro,
s.plantilla_tarjeta_socio as plantilla_tarjeta,
s.plantilla_ddjj as plantilla_ddjj,
s.plantilla_autorizacion as plantilla_autorizacion,
s.plantilla_transaccion as plantilla_transaccion,
s.plantilla_compromiso as plantilla_compromiso,
c.clt_estado as estado,
c.id_centro_trabajo as id_centro_trabajo
FROM cliente as c
inner join cargo_estado as cg on
c.id_cargo_estado=cg.id_cargo_estado
inner join cargo as cr on
c.id_cargo=cr.id_cargo
INNER JOIN subsede as ssd on c.id_sub_sede = ssd.id_subsede
INNER JOIN sede as s on ssd.id_sede = s.id_sede
INNER JOIN institucion as inst on s.id_institucion = inst.id_institucion
left join distrito as dd on c.id_distrito_trabajo=dd.id_distrito
left join provincia as dp on dd.id_provincia=dp.id_provincia
left join departamento as dt on dp.id_departamento=dt.id_departamento
WHERE c.idcliente = pidcliente$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxclientecontar`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prnivelmora` INT)
    NO SQL
BEGIN

select
COUNT(*) as total
from
(
    select
    id_cliente,
    cliente_dni,
    cliente,
    case prtipopago
        when 0 then "Todos"
        else tipo_pago
    end as tipo_pago,
    subsede,
    sede,
    institucion,
    sum(monto_pendiente) as monto_pendiente,
    count(*) as total_deudas
    from
    (
        select
        cl.idcliente as id_cliente,
        cl.clt_dni as cliente_dni,
        cl.clt_nombre as cliente,
        tp.tpag_nombre as tipo_pago,
        ssd.ssd_nombre as subsede,
        sd.sd_nombre as sede,
        ins.inst_nombre as institucion,
        ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente
        from
        venta_cronograma as vg
        inner join venta as v on
        vg.id_venta=v.idventa
        inner join cliente as cl on
        v.id_cliente=cl.idcliente
        inner join tipo_pago as tp on
        vg.id_tipo_pago=tp.idtipo_pago
        inner join subsede as ssd on
        cl.id_sub_sede=ssd.id_subsede
        inner join sede as sd on
        ssd.id_sede=sd.id_sede
        inner join institucion as ins on
        sd.id_institucion=ins.id_institucion
        where
        v.vnt_estado=1
        and
        vg.cng_estado=1
        and
        vg.tipo_cuota<>2
        and
        cl.clt_nombre like concat(prcliente,'%')
        and
        (ssd.ssd_nombre like concat(prsubsede,'%'))
        and
        (sd.sd_nombre like concat(prsede, '%'))
        and
        (ins.id_institucion like concat(prinstitucion, '%'))
        and
        (
            (prfechainicio is null and prfechafin is null) or
            (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
            (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
            (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
        )
        and
        ( 
            (prtipopago=0) OR
            (prtipopago=tp.idtipo_pago)
        )
    union
        select
        cl.idcliente as id_cliente,
        cl.clt_dni as cliente_dni,
        cl.clt_nombre as cliente,
        tp.tpag_nombre as tipo_pago,
        ssd.ssd_nombre as subsede,
        sd.sd_nombre as sede,
        ins.inst_nombre as institucion,
        ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente
        from
        credito_cronograma as cg
        inner join creditos as c on
        cg.id_credito=c.id_credito
        inner join tipo_pago as tp on
        cg.id_tipo_pago=tp.idtipo_pago
        inner join cliente as cl on
        c.id_cliente=cl.idcliente
        inner join subsede as ssd on
        cl.id_sub_sede=ssd.id_subsede
        inner join sede as sd on
        ssd.id_sede=sd.id_sede
        inner join institucion as ins on
        sd.id_institucion=ins.id_institucion
        where
        c.estado=1
        and
        cg.estado=1
        and
        cg.tipo_cuota<>2
        and
        cl.clt_nombre like concat(prcliente,'%')
        and
        (ssd.ssd_nombre like concat(prsubsede,'%'))
        and
        (sd.sd_nombre like concat(prsede, '%'))
        and
        (ins.inst_nombre like concat(prinstitucion, '%'))
        and
        (
            (prfechainicio is null and prfechafin is null) or
            (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
            (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
            (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
        )
        and
        ( 
            (prtipopago=0) OR
            (prtipopago=tp.idtipo_pago)
        )
    ) as resultado
    group by resultado.id_cliente
    having
    (
        (prnivelmora=0) or
        (prnivelmora=1 and count(*)<=3) or
        (prnivelmora=2 and count(*)>3)
    )
) as resultado_conteo;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxcuota`(IN `prtipo` INT, IN `prcuota` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

	DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;
   
   	select
    cd.id_cobranza_detalle as id_detalle,
    cd.id_cobranza_directa as id_cobranza_directa,
    cd.id_cobranza_archivos as id_cobranza_archivos,
    cd.id_cobranza_judicial as id_cobranza_judicial,
    cd.id_cobranza_manual as id_cobranza_manual,
    cd.monto as monto,
    case
	when cd.id_cobranza_directa>0 then c1.fecha
    when cd.id_cobranza_archivos>0 then c2c.fecha_pago
	when cd.id_cobranza_judicial>0 then "Judicial"
    when cd.id_cobranza_manual>0 then cbm.fecha
    end as fecha_pago,
    case
	when cd.id_cobranza_directa>0 then c1.numero_operacion
    when cd.id_cobranza_archivos>0 then DATE_FORMAT(c2c.fecha_fin, "%m/%Y")
	when cd.id_cobranza_judicial>0 then "Judicial"
    when cd.id_cobranza_manual>0 then cbm.comprobante
    end as documento,
    case
	when cd.id_cobranza_directa>0 then 2
    when cd.id_cobranza_archivos>0 then 1
	when cd.id_cobranza_judicial>0 then 4
    when cd.id_cobranza_manual>0 then 5
    end as id_tipo,
    case
	when cd.id_cobranza_directa>0 then "Directo"
    when cd.id_cobranza_archivos>0 then "Planilla"
	when cd.id_cobranza_judicial>0 then "Judicial"
    when cd.id_cobranza_manual>0 then 'Manual'
    end as tipo
    from
    cobranza_detalle as cd
    left join credito_cronograma as cg on
    cd.id_credito_cronograma=cg.id_credito_cronograma
    left join venta_cronograma as vg on
    cd.id_venta_cronograma=vg.id_venta_cronograma
    left join cobranza_directa as c1 on
    cd.id_cobranza_directa=c1.id_cobranza_directa
    left join cobranza_archivos_detalle as c2d on
    cd.id_cobranza_archivos=c2d.id_cobranza_detalle
    left join cobranza_archivos_cabecera as c2c on
    c2d.id_cobranza=c2c.id_cobranza
    left join cobranza_manual as cbm on
    cd.id_cobranza_manual=cbm.id_cobranza_manual
    where
    cd.estado=1
    and
    (
        (prtipo=1 and cd.id_credito_cronograma=prcuota) or
        (prtipo=2 and cd.id_venta_cronograma=prcuota)
    )
    limit IP, TP;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxclienteperiodosdetallado`(IN `prcliente` INT, IN `prtipocomparacion` INT, IN `prlimite` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN


-- prtipocomparacion = 0: nada, 1: mayor o igual, -1: menor o igual

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
tipo_transaccion ,
id_transaccion ,
identificador ,
fecha_transaccion ,
sum(monto_pendiente) as monto_pendiente,
min(fecha_vencimiento) as primera_fecha_vencimiento,
max(ultima_fecha_pago) as ultima_fecha_pago ,
case 
	when ultima_fecha_pago is not null then TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now() )
    else TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now() )
end as meses_sin_pagar
from
(
    select
    # Se les asigna 3 o 4 porque los créditos tienen 1 y 2
    v.vnt_tipoventa+2 as tipo_transaccion ,
    v.idventa as id_transaccion ,
    concat(t.tln_serie,'-',t.tln_numero) as identificador ,
    v.vnt_fecha as fecha_transaccion ,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente ,
    min(vg.cng_fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join liquidaciones as lq on
    v.idventa = lq.id_venta
    left join
    (
        select
        cd.id_venta_cronograma as id_venta_cronograma,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        	cd.id_venta_cronograma
    )  as detalle_pagos_adjunto on
    vg.id_venta_cronograma = detalle_pagos_adjunto.id_venta_cronograma
    where
    v.vnt_estado=1
    and
    vg.cng_estado=1
    and
    vg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    cl.idcliente = prcliente
    group by
    	v.idventa
union
    select
    c.tipo as tipo_transaccion ,
    c.id_credito as id_transaccion ,
	case c.tipo
        when 1 then c.codigo
        else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as identificador ,
    c.fecha as fecha_transaccion ,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente ,
    min(cg.fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join liquidaciones as lq on
    c.id_credito = lq.id_credito
	left join
    (
        select
        cd.id_credito_cronograma as id_credito_cronograma ,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        cd.id_credito_cronograma
    ) as detalle_pagos_adjunto on
    cg.id_credito_cronograma = detalle_pagos_adjunto.id_credito_cronograma
    where
    c.estado=1
    and
    cg.estado=1
    and
    cg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    cl.idcliente = prcliente
    group by
    	c.id_credito
) as resultado
group by resultado.id_transaccion, resultado.tipo_transaccion
having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
and
(
	(prtipocomparacion=0) or
    (prtipocomparacion=1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) <= prlimite ) or
    (prtipocomparacion=-1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) >= prlimite )
)
order by fecha_transaccion asc
limit IP, TP;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientetelefono`(IN `pidcliente` INT, IN `ptlf_relevancia` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT
tel.idcliente_telefono,
c.idcliente,
c.clt_nombre as 'cliente',
tel.tlf_numero,
tel.id_tipo,
case tel.id_tipo
when 1 then "Celular"
when 2 then "casa"
when 3 then "trabajo"
end as tipo,
tel.tlf_relevancia,
tel.tlf_estado
FROM cliente_telefono tel
INNER JOIN cliente c on tel.id_cliente = c.idcliente
WHERE (pidcliente IS NULL OR c.idcliente = pidcliente) AND
(ptlf_relevancia IS NULL OR tel.tlf_relevancia = ptlf_relevancia)
and
tel.tlf_estado=1
order by tel.tlf_relevancia asc, tel.idcliente_telefono asc
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcooperativacuentadepositosunlimited`(IN `prcuenta` INT)
    NO SQL
select
cd.fecha as fecha ,
ct.clt_dni as cliente_dni ,
ct.clt_nombre as cliente_nombre ,
cd.numero_operacion as numero_operacion ,
cd.monto as monto ,
cd.validado as validado ,
if(cd.archivo<>'', 1, 0) as voucher
from cobranza_directa as cd
inner join cliente as ct on
cd.id_cliente=ct.idcliente
inner join cooperativa_cuenta as cc on
cd.id_cooperativa_cuenta=cc.id_cooperativa_cuenta
inner join banco as b on
cc.id_banco=b.id_banco
WHERE
cd.estado=1
and
cd.id_cooperativa_cuenta=prcuenta
order by
cd.fecha desc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzadirectacontar`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prbanco` INT, IN `properacion` VARCHAR(20) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prvalidado` INT)
    READS SQL DATA
BEGIN

        select
        count(cd.id_cobranza_directa) as total
        from cobranza_directa as cd
        inner join cliente as ct on
        cd.id_cliente=ct.idcliente
        inner join cooperativa_cuenta as cc on
        cd.id_cooperativa_cuenta=cc.id_cooperativa_cuenta
        inner join banco as b on
        cc.id_banco=b.id_banco
        WHERE
        cd.estado=1
        AND
        ( ct.clt_nombre like CONCAT(prcliente,'%') )
        AND
        ( 
            (prbanco=0) or
            (cc.id_banco=prbanco)
        )
        AND
        ( cd.numero_operacion like CONCAT(properacion,'%') )
        AND
        (
            ( isnull(prfechainicio) and isnull(prfechafin) ) or
            ( isnull(prfechafin) and cd.fecha>=prfechainicio ) or
            ( isnull(prfechainicio) and cd.fecha<=prfechafin ) or
            ( cd.fecha BETWEEN prfechainicio and prfechafin ) 
        )
        and
        ( prvalidado=-1 or cd.validado=prvalidado ) ;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcourier`(IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
id_courier as id,
nombre as nombre,
url as url,
estado as estado
from
courier
where
estado=1
and
nombre like concat(prnombre,'%')
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearjuzgadojuez`(IN `prinstanciajudicial` INT, IN `prjueztipo` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    MODIFIES SQL DATA
insert into
juzgado_juez
set
id_juzgado_instancia=prinstanciajudicial,
id_tipo=prjueztipo,
nombre=prnombre$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzadetallexdirecta`(IN `prcobranza` INT)
    NO SQL
begin

	select
    cd.id_cobranza_detalle as id_detalle,
    if(
        cd.id_credito_cronograma=0,
        "Venta",
        if(
            c.tipo=1,
            "Afiliación",
            "Préstamo"
        )
    ) as tipo,
    if(
        cd.id_credito_cronograma=0,
        CONCAT(t.tln_serie,"-",t.tln_numero),
        if(
            c.tipo=1,
            c.codigo,
            CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
        )
    ) as codigo,
    if(
        cd.id_credito_cronograma=0,
        vg.id_venta_cronograma,
        cg.id_credito_cronograma
    ) as id_cronograma,
    if(
        cd.id_credito_cronograma=0,
        vg.cng_fecha_vencimiento,
        cg.fecha_vencimiento
    ) as fecha_vencimiento,
    if(
        cd.id_credito_cronograma=0,
        vg.cng_estado,
        cg.estado
    ) as id_estado,
    if(
        cd.id_credito_cronograma=0,
        vg.cng_monto_cuota+vg.cng_interes,
        cg.monto_capital+cg.monto_interes+cg.interes
    ) as monto_total,
	if(
        cd.id_credito_cronograma=0,
        vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,
        cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado
    ) as monto_pendiente,
	if(
        cd.id_credito_cronograma=0,
        v.idventa,
        c.id_credito
    ) as id_transaccion,
    cd.monto as monto
    from
    cobranza_detalle as cd
    left join credito_cronograma as cg on
    cd.id_credito_cronograma=cg.id_credito_cronograma
    left join creditos as c on
    cg.id_credito=c.id_credito
    left join venta_cronograma as vg on
    cd.id_venta_cronograma=vg.id_venta_cronograma
    left join venta as v on
    vg.id_venta=v.idventa
    left join talonario as t on
    v.id_talonario=t.id_talonario
    where
    cd.id_cobranza_directa=prcobranza
    and
    cd.estado=1
    order by cd.id_cobranza_detalle asc;
    
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclienteobservacioncontar`(IN `prcliente` INT)
    MODIFIES SQL DATA
BEGIN

select
COUNT(id_cliente_observacion) as total
from
cliente_observacion
where
id_cliente=prcliente
and
cobs_estado=1;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcomisionesxvendedorcontar`(IN `prvendedor` INT)
    NO SQL
select
count(c.id_vendedor_comision) as total
from
vendedor_comision as c
inner join salida_cabecera as s on
s.idsalida_vendedor=c.id_salida
inner join vendedor as vd on
c.id_vendedor=vd.idvendedor
where
c.id_vendedor=prvendedor
and
c.vndcms_estado<>3$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizartransaccioncabecera`(IN `prid` INT, IN `pralmacen` INT, IN `prtipo` INT, IN `prreferencia` INT, IN `prproveedor` INT, IN `prcliente` INT, IN `prsalida` INT, IN `prsucursal` INT, IN `prvendedor` INT, IN `prfecha` DATE, IN `prdocumento` VARCHAR(40) CHARSET utf8)
    NO SQL
update
transaccion_cabecera
SET
id_almacen=pralmacen,
id_tipo_transaccion=prtipo,
tsccab_referencia=prreferencia,
id_proveedor=prproveedor,
id_cliente=prcliente,
id_salida_venta=prsalida,
id_sucursal=prsucursal,
id_vendedor=prvendedor,
tsccab_fecha=prfecha,
tsccab_documento_referencia=prdocumento
WHERE
idtransaccion_cabecera=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarsubsede`(IN `prid` INT,IN `prsede` INT, IN `prnombre` VARCHAR(60) CHARSET utf8, IN `prabreviatura` VARCHAR(40) CHARSET utf8, IN `prrepresentante` VARCHAR(40) CHARSET utf8, IN `prdistrito` INT, IN `prdireccion` VARCHAR(60) CHARSET utf8, IN `prtelefono` VARCHAR(20) CHARSET utf8, IN `prcodigocooperativa` VARCHAR(25) CHARSET utf8)
    NO SQL
update
subsede
set
id_sede=prsede,
ssd_nombre=prnombre,
ssd_abreviatura=prabreviatura,
ssd_representante_legal=prrepresentante,
id_distrito=prdistrito,
ssd_direccion=prdireccion,
ssd_telefono=prtelefono,
ssd_codigo_cooperativa=prcodigocooperativa
where
id_subsede=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecargosestado`(IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prcargoestado` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

    select
    cargo_estado.id_cargo_estado as id_cargo_estado,
    institucion.id_institucion as id_institucion,
    institucion.inst_nombre as institucion,
    sede.id_sede as id_sede,
    sede.sd_nombre as sede,
    cargo_estado.cstd_nombre as cargo_estado
    from
    cargo_estado
    inner join sede on
    sede.id_sede=cargo_estado.id_sede
    inner join institucion on
    sede.id_institucion=institucion.id_institucion
    where
    cargo_estado.cstd_estado = 1
    and
    sede.sd_estado=1
    and
    institucion.inst_estado=1
    and
    institucion.inst_nombre like concat('%',prinstitucion,'%')
    and
    sede.sd_nombre like concat('%',prsede,'%')
    and
    cargo_estado.cstd_nombre like concat('%',prcargoestado,'%')
    order by 
	cargo_estado.cstd_nombre asc, sede.sd_nombre asc
    limit IP, TP ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditocronogramaxId`(IN `prcredito` INT, IN `orden` VARCHAR(30) CHARSET utf8)
    NO SQL
begin

DECLARE CID VARCHAR(255);

SET CID = concat(" id_credito=",prcredito);

set @Statement = CONCAT("select
cc.id_credito_cronograma as id_cronograma,
cc.id_tipo_pago as id_tipo_pago,
cc.tp.tpag_nombre as tipo_pago,
cc.monto_capital as capital,
cc.monto_interes as interes,
cc.monto_capital+monto_interes as monto_cuota,
cc.fecha_vencimiento as fecha_vencimiento,
IFNULL(cc.monto_pagado,0) as monto_pagado,
cc.interes as monto_interes,
cc.monto_cuota-IFNULL(cc.monto_pagado,0)+cc.interes as monto_pendiente,
cc.fecha_cancelacion as fecha_cancelacion,
cc.estado as estado
from
credito_cronograma as cc
inner join tipo_pago as tp on
cc.id_tipo_pago=tp.idtipo_pago
where
estado<>3
and ",
CID,
" order by ",
orden);

PREPARE stmt FROM @Statement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizartransaccionrefinanciada`(IN `pridnuevo` INT, IN `prtipo` INT, IN `prtransaccion` INT)
    NO SQL
if prtipo=1
then
    UPDATE
    creditos
    set
    creditos.estado=4,
    creditos.id_credito_refinanciado=pridnuevo
    where
    creditos.id_credito=prtransaccion;
elseif prtipo=2 then
	update
    venta
    set
    venta.vnt_estado=4,
    venta.id_credito_refinanciado=pridnuevo
    where
    venta.idventa=prtransaccion;
END IF$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasmanualesxid`(IN `prid` INT)
    NO SQL
BEGIN
	select
    cm.id_cobranza_manual as id ,
    cm.id_cliente as id_cliente ,
    c.clt_nombre as cliente ,
    cm.id_tipo_cobranza_manual as id_tipo ,
    t.nombre as tipo ,
    cm.fecha as fecha ,
    cm.comprobante as comprobante ,
    cm.id_vendedor as id_vendedor ,
    v.vnd_nombre as vendedor ,
    cm.total as total ,
    cm.observaciones as observaciones
    from
    cobranza_manual as cm
    inner join cliente as c on
    cm.id_cliente=c.idcliente
    inner join cobranza_manual_tipo as t on
    cm.id_tipo_cobranza_manual=t.id_cobranza_manual_tipo
    left join vendedor as v on
    cm.id_vendedor=v.idvendedor
    where
    cm.id_cobranza_manual=prid;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcomisionesxvendedor`(IN `prvendedor` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
c.id_vendedor_comision as id,
c.id_salida as id_salida,
s.sc_codigo as pecosa,
s.sc_fecha as fecha_salida,
s.sc_fecha_llegada as fecha_retorno,
c.comision_efectiva as comision_efectiva,
c.comision_efectiva_porcentaje as comision_efectiva_porcentaje,
case 
when isnull(c.comision_efectiva_pago) then "Pendiente"
else "Pagado"
end as comision_efectiva_estado,
c.comision_retenida as comision_retenida,
c.comision_retenida_porcentaje as comision_retenida_porcentaje,
case 
when isnull(c.comision_retenida_pago) then "Pendiente"
else "Pagado"
end as comision_retenida_estado
from
vendedor_comision as c
inner join salida_cabecera as s on
s.idsalida_vendedor=c.id_salida
inner join vendedor as vd on
c.id_vendedor=vd.idvendedor
where
c.id_vendedor=prvendedor
and
c.vndcms_estado<>3
limit IP,TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditospagostotales`(IN `prcredito` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
select
	resultado.tipo_pago as tipo_pago,
    resultado.id_referencia as id_referencia,
    resultado.fecha as fecha ,
    round(sum(resultado.monto_total),2) as total_pagos
from
(       
    # Los pagos manuales
    # En este caso se considera el total como el monto total del pago_manual porque cada pago manual corresponde a una cuota del crongorama
	SELECT
    	1 as tipo_pago ,
    	c1.id_cobranza_manual as id_referencia ,
    	c1.fecha as fecha ,
		c1.total as monto_total
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual>0 and cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	credito_cronograma as cc
    on
    (cdm.id_credito_cronograma>0 and cdm.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cc.id_credito=prcredito
    and
    	c1.estado=1
    -- Se quita este campo porque el procedimiento que se utiliza antes elimina pagos de cobranza_detalle
    /*
    and
    	cdm.estado=1
    */
    -- Se quita este campo porque las cuotas se convierten en penalidad
    /*
    and
    	cc.tipo_cuota<>2
    */
    and
    	cc.estado<3
    and
    	( prfechainicio is null or c1.fecha > prfechainicio )
    and
    	( prfechafin is null or c1.fecha < prfechafin )
    group by
    	c1.id_cobranza_manual

    UNION
    
    # Los pagos directos
    SELECT
    	2 as tipo_pago ,
    	c2.id_cobranza_directa as id_referencia ,
    	c2.fecha_referencia as fecha ,
    	sum(cd.monto) as monto_total
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_directa as c2
    on
    	(cd.id_cobranza_directa> 0 and cd.id_cobranza_directa=c2.id_cobranza_directa)
    inner join
    	credito_cronograma as cc
    on
    	(cd.id_credito_cronograma>0 and cd.id_credito_cronograma=cc.id_credito_cronograma)
   	inner join
    	cooperativa_cuenta as ccnt
    ON
    	c2.id_cooperativa_cuenta = ccnt.id_cooperativa_cuenta
    where /*
    	cd.estado=1
    and */ /*
    	c2.estado=1
    AND */
    	cc.id_credito=prcredito
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    and
    	( prfechainicio is null or c2.fecha_referencia > prfechainicio )
    and
    	( prfechafin is null or c2.fecha_referencia < prfechafin )
    group BY
    	c2.id_cobranza_directa
    
    UNION
    
    # Los pagos por planilla
    SELECT 
    	3 as tipo_pago ,
    	cad.id_cobranza_detalle as id_referencia ,
    	cac.fecha_fin as fecha ,
    	sum(cd.monto) as monto_total
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_archivos_detalle as cad
    on
    	( cd.id_cobranza_archivos> 0 and cd.id_cobranza_archivos=cad.id_cobranza_detalle )
    inner join
    	cobranza_archivos_cabecera as cac
    on
    	( cad.id_cobranza=cac.id_cobranza )
    inner join
    	credito_cronograma as cc
    on
    	(cd.id_credito_cronograma>0 and cd.id_credito_cronograma=cc.id_credito_cronograma)
    where /*
    	cd.estado=1
    and */ /*
    	cad.estado=1
    and */
    	cac.estado=1
    and
    	cc.id_credito=prcredito
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    and
    	( prfechainicio is null or cac.fecha_fin > prfechainicio )
    and
    	( prfechafin is null or cac.fecha_fin < prfechafin )
    group by
    	cad.id_cobranza_detalle
) as resultado
group by
	resultado.tipo_pago, resultado.id_referencia$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecontar`(IN `prcodigo` VARCHAR(45) CHARSET utf8, IN `prcip` VARCHAR(20) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(100) CHARSET utf8, IN `prinstitucion` INT, IN `prsede` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `prestado` INT)
    READS SQL DATA
BEGIN

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina)*prtotalpagina;
    set TP=prtotalpagina;

    select 
        if(count(*)>0,1,2) as total
    from
    (
        SELECT
        c.idcliente as id
        FROM cliente as c
        inner join subsede as ssd on
        c.id_sub_sede=ssd.id_subsede
        inner join cargo as cg on
        c.id_cargo=cg.id_cargo
        inner join sede as s on
        c.id_sede=s.id_sede
        inner join institucion as i on
        c.id_institucion=i.id_institucion
        WHERE
        c.clt_estado = prestado
        AND
        ( c.clt_dni LIKE CONCAT(prdni,'%') )
        AND
        ( c.clt_nombre LIKE CONCAT(prnombre,'%') )
        and
        ( c.clt_codigo like concat(prcodigo,'%') )
        and
        ( c.clt_cip like concat(prcip,'%') )
        and
        ( prinstitucion=0 or i.id_institucion=prinstitucion )
        and
        ( prsede=0 or s.id_sede=prsede )
        order BY
        c.clt_nombre asc
        LIMIT IP, TP
    ) as conteo;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzamanualtipocontar`(IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
SELECT
    count(id_cobranza_manual_tipo) as total
    from
    cobranza_manual_tipo
    where
    nombre like concat(prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcomisiones`(IN `prvendedor` VARCHAR(25) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpecosa` VARCHAR(20) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    MODIFIES SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
c.id_vendedor_comision as id,
c.id_salida as id_salida,
s.sc_codigo as pecosa,
s.sc_fecha as fecha_salida,
s.sc_fecha_llegada as fecha_retorno,
c.id_vendedor as id_vendedor,
UCASE(vd.vnd_nombre) as nombre_vendedor,
c.comision_efectiva as comision_efectiva,
c.comision_retenida as comision_retenida
from
vendedor_comision as c
inner join salida_cabecera as s on
c.id_salida=s.idsalida_vendedor
inner join vendedor as vd on
c.id_vendedor=vd.idvendedor
where
s.sc_estado<>3
and
vd.vnd_nombre like concat('%',prvendedor,'%')
and
	( (prfechainicio is null and prfechafin is null) or
	  (s.sc_fecha between prfechainicio and prfechafin) )
AND
s.sc_codigo like concat('%',prpecosa,'%')
group by c.id_salida,c.id_vendedor
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarusuariopss`(IN `pidusuario` INT, IN `prpasword` VARCHAR(150) CHARSET utf8)
    NO SQL
UPDATE usuario 
SET
usr_clave=prpasword
WHERE idusuario = pidusuario$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpagoventa`(IN `prcobranzadirecta` INT, IN `prcobranzamanual` INT, IN `pridventa` INT, IN `prmonto` FLOAT, IN `prfecha` DATE)
    NO SQL
begin

	DECLARE V_id_cronograma INT unsigned ;
    DECLARE V_monto_total FLOAT unsigned ;
    DECLARE V_monto_pendiente2 FLOAT unsigned ;
    DECLARE V_monto_pendiente FLOAT unsigned ;
    DECLARE V_acumulado FLOAT unsigned ;
    DECLARE V_total FLOAT unsigned ;
    DECLARE V_amortizado FLOAT unsigned ;
    
	DECLARE finished INT unsigned default 0 ;

	DEClARE cursor_transaccion CURSOR FOR
    (
		select
        resultado.id_cronograma,
        ROUND(resultado.monto_total,2) ,
        ROUND(resultado.monto_pendiente) as monto_pendiente,
        ROUND(
            if(
                @total<prmonto*2,	
                @total:=@total+(resultado.monto_pendiente),
                null
            )
        ,2)
        as acumulado ,
        @pendiente:=ROUND(@pendiente+resultado.monto_pendiente,2),
        ROUND(@total,2),
        ROUND( 
            if(
                @total<prmonto*2,	
                resultado.monto_pendiente,
                resultado.monto_pendiente-(@pendiente-prmonto)
            )
        ,2)
        as saldo_amortizado
        from
        (SELECT @total:=0, @pendiente:=0) AS t,
        (
            select
            v.idventa as id,
            vg.id_venta_cronograma as id_cronograma,
            ROUND(vg.cng_monto_cuota,2) as capital,
            ROUND(vg.cng_interes,2) as interes,
            ROUND(vg.cng_monto_cuota + vg.cng_interes,2) as monto_total,
            ROUND(
                vg.cng_monto_cuota + vg.cng_interes-vg.cng_monto_pagado
                ,2) as monto_pendiente,
            vg.cng_fecha_vencimiento as fecha_vencimiento,
            vg.cng_estado as id_estado
            from
            venta_cronograma as vg
            inner join venta as v on
            v.idventa=vg.id_venta
            where
            v.vnt_estado=1
            and
            v.idventa=pridventa
            and
            vg.cng_estado<>3 and vg.tipo_cuota<>2
            group by vg.id_venta_cronograma
        ) as resultado
        having (acumulado is not null and monto_pendiente>0)
        order by
        resultado.fecha_vencimiento asc
    );

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursor_transaccion;

	crearDetalle:LOOP
		FETCH cursor_transaccion INTO V_id_cronograma, V_monto_total, V_monto_pendiente, V_acumulado, V_monto_pendiente2, V_total, V_amortizado;

		IF finished = 1 THEN 
			LEAVE crearDetalle;
		END IF;

		# Se inserta en la tabla de cobranza detalle
        insert into cobranza_detalle(id_cobranza_directa,id_cobranza_manual, id_venta_cronograma, monto) values (prcobranzadirecta,prcobranzamanual, V_id_cronograma,V_amortizado) ;
 
 		# Se actualiza el estado a pagado o pendiente de la cuota
        if V_monto_pendiente > V_amortizado then
            update
            venta_cronograma as vg
            set
            vg.cng_monto_pagado=round(V_monto_total-V_monto_pendiente+V_amortizado,2),
            vg.cng_fecha_cancelacion=null,
            vg.cng_estado=1
            where
            vg.id_venta_cronograma=V_id_cronograma;
        else
            update
            venta_cronograma as vg
            set
            vg.cng_monto_pagado=round(V_monto_total-V_monto_pendiente+V_amortizado,2),
            vg.cng_fecha_cancelacion=prfecha,
            vg.cng_estado=2
            where
            vg.id_venta_cronograma=V_id_cronograma;
        end if;
 
 		# Se actualiza la última fecha de pago del préstamo
        update venta set ultima_fecha_pago = prfecha where idventa=pridventa ;
	END LOOP crearDetalle;
	CLOSE cursor_transaccion;	

	# Al final se recalculan los intereses
    call sp_crearventacronogramainteres1(pridventa) ;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizartalonarios`(IN `prserie` VARCHAR(8) CHARSET utf8, IN `prestado` INT)
    NO SQL
BEGIN

select
@activos:=count(if(tln_estado=1,1,null)),
@inactivos:=count(if(tln_estado=0,1,null)),
@total:=count(tln_estado=0)
from
talonario
where
tln_serie=prserie;

if @total=@activos then

	/*
	update
	talonario
	set
	tln_estado=prestado
	where
	tln_serie=prserie;
    */
    delete
    from
    talonario
    where
    tln_serie=prserie;
    
END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizartransacciondetalle`(IN `prid` INT, IN `prproductoserie` INT, IN `prcantidad` INT)
    MODIFIES SQL DATA
update
transaccion_detalle
SET
id_producto_serie=prproductoserie,
tscdet_cantidad=prcantidad
where
idtransaccion_detalle=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxcuotaperiodos`(IN `prtipotransaccion` INT, IN `prtransaccion` INT, IN `prperiodo` VARCHAR(20) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

	DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;
   
   	set @fecha_mes = LEFT(prperiodo,2);
    set @fecha_ano = RIGHT(prperiodo,4);
   
   	select
    0 as id_detalle ,
    cd.id_cobranza_directa as id_cobranza_directa,
    cd.id_cobranza_archivos as id_cobranza_archivos,
    cd.id_cobranza_judicial as id_cobranza_judicial,
    cd.id_cobranza_manual as id_cobranza_manual,
    sum(cd.monto) as monto,
    case
	when cd.id_cobranza_directa>0 then c1.fecha
    when cd.id_cobranza_archivos>0 then c2c.fecha_pago
	when cd.id_cobranza_judicial>0 then "Judicial"
    when cd.id_cobranza_manual>0 then cbm.fecha
    end as fecha_pago,
    case
	when cd.id_cobranza_directa>0 then CONCAT(cc1.alias,"-",c1.numero_operacion)
    when cd.id_cobranza_archivos>0 then DATE_FORMAT(c2c.fecha_fin, "%m/%Y")
	when cd.id_cobranza_judicial>0 then "Judicial"
    when cd.id_cobranza_manual>0 then cbm.comprobante
    end as documento,
    case
	when cd.id_cobranza_directa>0 then 2
    when cd.id_cobranza_archivos>0 then 1
	when cd.id_cobranza_judicial>0 then 4
    when cd.id_cobranza_manual>0 then 5
    end as id_tipo,
    case
	when cd.id_cobranza_directa>0 then "Directo"
    when cd.id_cobranza_archivos>0 then "Planilla"
	when cd.id_cobranza_judicial>0 then "Judicial"
    when cd.id_cobranza_manual>0 then 'Manual'
    end as tipo
    from
    cobranza_detalle as cd
    left join credito_cronograma as cg on
    cd.id_credito_cronograma=cg.id_credito_cronograma
    left join venta_cronograma as vg on
    cd.id_venta_cronograma=vg.id_venta_cronograma
    left join cobranza_directa as c1 on
    cd.id_cobranza_directa=c1.id_cobranza_directa
    left join cooperativa_cuenta as cc1 on
    c1.id_cooperativa_cuenta = cc1.id_cooperativa_cuenta
    left join cobranza_archivos_detalle as c2d on
    cd.id_cobranza_archivos=c2d.id_cobranza_detalle
    left join cobranza_archivos_cabecera as c2c on
    c2d.id_cobranza=c2c.id_cobranza
    left join cobranza_manual as cbm on
    cd.id_cobranza_manual=cbm.id_cobranza_manual
    where 
    (
        ( prtipotransaccion = 1 and cg.id_credito = prtransaccion ) or
        ( prtipotransaccion = 2 and vg.id_venta = prtransaccion )
    )
    and
    (
        (
            ( cbm.tipo_transaccion = prtipotransaccion ) and
            ( cbm.id_transaccion = prtransaccion ) and 
            ( MONTH(cbm.fecha) = @fecha_mes ) and
            ( YEAR(cbm.fecha) = @fecha_ano ) and 
            ( cbm.estado = 1 )
        )
        or
        (
            /* ( c1.id_transaccion = prtransaccion ) and */
            ( MONTH(c1.fecha) = @fecha_mes ) and
            ( YEAR(c1.fecha) = @fecha_ano ) and 
            ( c1.estado = 1 )
        )
        or
        (
            ( MONTH(c2c.fecha_inicio) = @fecha_mes ) and
            ( YEAR(c2c.fecha_inicio) = @fecha_ano ) and 
            ( c2c.estado = 1 )
        )
    ) 
    and
    cd.estado=1
    group by cd.id_cobranza_directa ,
    cd.id_cobranza_archivos ,
    cd.id_cobranza_judicial ,
    cd.id_cobranza_manual
    limit IP, TP;
   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcooperativacuenta`(IN `prbanco` INT, IN `prtitular` VARCHAR(100) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

	declare IP int unsigned ;
    declare TP int unsigned ;

	set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

    select
    c.id_cooperativa_cuenta as id,
    c.id_banco as id_banco,
    b.bnc_nombre as banco,
    c.numero as numero_cuenta,
    c.cci as cci ,
    c.titular as titular ,
    c.alias as alias
    from
    cooperativa_cuenta as c
    inner join banco as b on
    c.id_banco=b.id_banco
    where
    c.estado=1 
    and
    (prbanco=0 or c.id_banco=prbanco)
    and
    c.titular like concat(prtitular,'%')
    limit IP, TP ;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizartalonarioestado`(IN `prid` INT, IN `prestado` INT)
    MODIFIES SQL DATA
UPDATE
talonario
SET
tln_estado=prestado
WHERE
id_talonario=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcooperativadireccioncontar`(IN `prdepartamento` VARCHAR(50) CHARSET utf8, IN `prprovincia` VARCHAR(50) CHARSET utf8, IN `prdistrito` VARCHAR(50) CHARSET utf8, IN `prdireccion` VARCHAR(100) CHARSET utf8, IN `prestado` INT)
    NO SQL
SELECT
    count(cd.id_cooperativa_direccion) as total
    from
    cooperativa_direccion as cd
    inner join distrito as d on
    cd.id_distrito = d.id_distrito
    inner join provincia as p on
    d.id_provincia = p.id_provincia
    inner join departamento as dp ON
    p.id_departamento = dp.id_departamento
    WHERE
    cd.estado = 1
    and
    dp.dpt_nombre like concat(prdepartamento,'%')
    and
    p.prv_nombre like concat(prprovincia,'%')
    and
    d.dst_nombre like concat(prdistrito,'%')
    and
    cd.direccion like concat(prdireccion,'%')
    and
    ( 
        (prestado = 0) or
        (prestado = 1 and cd.numero_orden > 0) or
        (prestado = 2 and cd.numero_orden = 0)
    )$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpresupuesto`(IN `prcliente` INT, IN `prtipo` INT, IN `prfecha` DATE, IN `prvendedor` INT, IN `prcuotas` INT, IN `prcapital` FLOAT, IN `prtasa` FLOAT, IN `prtotal` FLOAT, IN `pdfautorizacion` VARCHAR(70) CHARSET utf8, IN `pdfddjj` VARCHAR(70) CHARSET utf8, IN `pdftransaccion` VARCHAR(70) CHARSET utf8, IN `pdftarjeta` VARCHAR(70) CHARSET utf8, IN `pdfcompromiso` VARCHAR(70) CHARSET utf8)
    MODIFIES SQL DATA
begin

insert into
presupuesto_cabecera
set
id_cliente=prcliente,
id_tipo=prtipo,
psp_fecha=prfecha,
id_vendedor=If(prvendedor>0,prvendedor,null),
psp_cuotas=prcuotas,
psp_capital=prcapital,
psp_tasa=prtasa,
psp_total=prtotal,
pdf_autorizacion=pdfautorizacion,
pdf_ddjj=pdfddjj,
pdf_transaccion=pdftransaccion,
pdf_tarjeta=pdftarjeta,
pdf_compromiso=pdfcompromiso;

select LAST_INSERT_ID() as id;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramadetallado_reporte`(IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prtipo` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
begin

    select
    sd.sd_nombre as sede,
    ssd.ssd_nombre as subsede,
    cl.idcliente as id_cliente,
    cl.clt_codigo as codigo,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    sum(resultado.monto_pendiente) as monto_pendiente,
    tp.tpag_nombre as tipo_pago
    from
    (
        select
        v.idventa as id,
        v.id_cliente as id_cliente,
        vg.id_venta_cronograma as id_cronograma,
        3 as id_tipo,
        "Venta" as tipo,
        CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
        vg.cng_monto_cuota as capital,
        vg.cng_interes as interes,
        ROUND(vg.cng_monto_cuota+vg.cng_interes,2) as monto_total,
        ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente,
        vg.cng_fecha_vencimiento as fecha_vencimiento,
        vg.cng_fecha_cancelacion as fecha_cancelacion,
        vg.id_tipopago as id_tipo_pago,
        case vg.cng_estado
        when 1 then "PENDIENTE"
        when 2 then "PAGADO"
        end as estado,
        vg.cng_estado as id_estado
        from
        venta_cronograma as vg
        inner join venta as v on
        vg.id_venta=v.idventa
        inner join talonario as t on
        v.id_talonario=t.id_talonario
        where
        v.vnt_estado<>3
        and
        (prestado=0 or vg.cng_estado=prestado)
        and
        (
            (prfechainicio is null and prfechafin is null) or
            (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
        )
    union
        select
        c.id_credito as id,
        c.id_cliente as id_cliente,
        cg.id_credito_cronograma as id_cronograma,
        case c.tipo
        when 1 then 1
        else 2
        end as id_tipo,
        case c.tipo
        when 1 then "Afiliaci�n"
        else "Pr�stamo"
        end as tipo,
        case c.tipo
        when 1 then c.codigo
        else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
        end as codigo,
        cg.monto_capital as capital,
        cg.monto_interes+cg.interes as interes,
        ROUND(cg.monto_capital+cg.monto_interes+cg.interes,2) as monto_total,
        ROUND(cg.monto_capital+cg.monto_interes+cg.interes-	cg.monto_pagado,2) as monto_pendiente,
        cg.fecha_vencimiento as fecha_vencimiento,
        cg.fecha_cancelacion as fecha_cancelacion,
        cg.id_tipo_pago as id_tipo_pago,
        case cg.estado
        when 1 then "PENDIENTE"
        when 2 then "PAGADO"
        end as estado,
        cg.estado as id_estado
        from
        credito_cronograma as cg
        inner join creditos as c on
        cg.id_credito=c.id_credito
        where
        c.estado<>3
        and
        (prestado=0 or cg.estado=prestado)
        and
        (
            (prfechainicio is null and prfechafin is null) or
            (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
        )
    ) as resultado
    inner join tipo_pago as tp on
    resultado.id_tipo_pago = tp.idtipo_pago
    inner join cliente as cl on
    resultado.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    where
    (prtipo=0 or resultado.id_tipo=prtipo)
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    ssd.ssd_nombre like concat(prsubsede,'%')
    and
    sd.sd_nombre like concat(prsede,'%')
    and
    ins.inst_nombre like concat(prinstitucion,'%')
    group by resultado.id_cliente, tp.idtipo_pago
    order by
	cl.clt_nombre asc;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcooperativadireccionultimonumeroorden`()
    NO SQL
select
max(numero_orden) as numero_orden
from
cooperativa_direccion
where
estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramacreditopagosxmes`(IN `prcredito` INT)
    NO SQL
select 
    DATE_FORMAT(resultado.periodo,"%m/%Y") as periodo,
    ROUND( sum(resultado.monto_cuota_anterior) ,2) as monto_cuota_anterior ,
    ROUND( sum(resultado.monto_cuota) ,2) as monto_cuota ,
    ROUND( sum(resultado.monto_pago_manual) ,2) as monto_pago_manual ,
    ROUND( sum(resultado.monto_pago_manual_directo) ,2) as monto_pago_manual_directo ,
    ROUND( sum(resultado.monto_pago_manual_planilla) ,2) as monto_pago_manual_planilla ,
    ROUND( sum(resultado.monto_pago_manual_judicial) ,2) as monto_pago_manual_judicial ,
    ROUND( sum(resultado.monto_directo) ,2) as monto_directo ,
    GROUP_CONCAT(DISTINCT resultado.identificador_directo) as identificador_directo ,
    ROUND( sum(resultado.monto_planilla) ,2) as monto_planilla ,
    ROUND( sum(resultado.monto_pago_manual_planilla) ,2) + sum(resultado.monto_planilla) as total_planilla ,
    ROUND( sum(resultado.monto_pago_manual_directo) ,2) + sum(resultado.monto_directo) as total_directo ,
    ROUND( sum(resultado.monto_pago_manual_judicial) ,2) as total_judicial
from
(
    # Las fechas hasta hoy
    select
        uf.fecha as periodo ,
        0 as monto_cuota_anterior,
    	0 as monto_cuota,
        0 as monto_pago_manual ,
        0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
        0 as monto_directo ,
        null as identificador_directo ,
        0 as monto_planilla
    from
    	utilitarios_fecha as uf
    where
        uf.fecha >= (
            select
            min(ccf.fecha_vencimiento)
            from
            credito_cronograma as ccf
            WHERE
            ccf.id_credito=prcredito
            and
            ccf.estado<>3
            # Se retira esto para que tambien puedan aparecer las cuotas anteriores
            /* and
            ccf.tipo_cuota<>2 */
        )
    and
    	uf.fecha <= last_day(now())
    group by
    	YEAR(uf.fecha), MONTH(uf.fecha)
    
    UNION
    
    # Las fechas del cronograma anterior
    select
        LAST_DAY(cc.fecha_vencimiento) as periodo,
        round(sum(cc.monto_capital + cc.monto_interes + cc.interes),2) as monto_cuota_anterior,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
        null as identificador_directo ,
    	0 as monto_planilla
    from 
    	credito_cronograma as cc
    where
    	id_credito = prcredito
    and
    	cc.estado<3
    and
    	cc.tipo_cuota=2
    group by
    	YEAR(cc.fecha_vencimiento), MONTH(cc.fecha_vencimiento)
    
    union
    
    # Las fechas del cronograma
    select
        LAST_DAY(cc.fecha_vencimiento) as periodo,
    	0 as monto_cuota_anterior ,
        round(sum(cc.monto_capital + cc.monto_interes + cc.interes),2) as monto_cuota,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
        null as identificador_directo ,
    	0 as monto_planilla
    from 
    	credito_cronograma as cc
    where
    	id_credito = prcredito
    and
    	cc.estado<3
    and
    	cc.tipo_cuota<>2
    group by
    	YEAR(cc.fecha_vencimiento), MONTH(cc.fecha_vencimiento)

    UNION
    
    # Los pagos manuales asignados por el usuario
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
    	sum(cdm.monto) as monto_pago_manual ,
        0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
        null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	cobranza_manual_tipo as cdmt
    on
    	c1.id_tipo_cobranza_manual = cdmt.id_cobranza_manual_tipo
    inner join
    	credito_cronograma as cc
    on
    	(cdm.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cc.id_credito=prcredito
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	cdmt.estado=1
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    group BY
    	cc.id_credito,YEAR(c1.fecha), MONTH(c1.fecha)
    
    UNION
    
    # Los pagos manuales por regularización directa
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	sum(cdm.monto) as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
        null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	credito_cronograma as cc
    on
    	(cdm.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cc.id_credito=prcredito
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	c1.id_tipo_cobranza_manual=3
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    group BY
    	cc.id_credito,YEAR(c1.fecha), MONTH(c1.fecha)
    
    UNION
    
    # Los pagos manuales por regularización por planilla
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        sum(cdm.monto) as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	credito_cronograma as cc
    on
    	(cdm.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cc.id_credito=prcredito
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	c1.id_tipo_cobranza_manual=4
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    group BY
    	cc.id_credito,YEAR(c1.fecha), MONTH(c1.fecha)

    UNION
    
    # Los pagos manuales por regularización por judicial
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        sum(cdm.monto) as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	credito_cronograma as cc
    on
    	(cdm.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cc.id_credito=prcredito
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	c1.id_tipo_cobranza_manual=5
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    group BY
    	cc.id_credito,YEAR(c1.fecha), MONTH(c1.fecha)
    
    UNION
    
    # Los pagos directos
    SELECT 
    	LAST_DAY(c2.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	sum(cd.monto) as monto_directo ,
    	GROUP_CONCAT(DISTINCT ccnt.alias) as identificador_directo ,
    	0 as monto_planilla
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_directa as c2
    on
    	(cd.id_cobranza_directa=c2.id_cobranza_directa)
    inner join
    	credito_cronograma as cc
    on
    	(cd.id_credito_cronograma=cc.id_credito_cronograma)
   	inner join
    	cooperativa_cuenta as ccnt
    ON
    	c2.id_cooperativa_cuenta = ccnt.id_cooperativa_cuenta
    where
    	cd.estado=1
    and
    	c2.estado=1
    AND
    	cc.id_credito=prcredito
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    group by
    	cc.id_credito,YEAR(c2.fecha), MONTH(c2.fecha)
    
    UNION
    
    # Los pagos por planilla
    SELECT 
    	LAST_DAY(cac.fecha_fin) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	sum(cd.monto) as monto_planilla
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_archivos_detalle as cad
    on
    	( cd.id_cobranza_archivos=cad.id_cobranza_detalle )
    inner join
    	cobranza_archivos_cabecera as cac
    on
    	( cad.id_cobranza=cac.id_cobranza )
    inner join
    	credito_cronograma as cc
    on
    	(cd.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cd.estado=1
    and
    	cad.estado=1
    and
    	cac.estado=1
    and
    	cc.id_credito=prcredito
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    group by
    	cc.id_credito,YEAR(cac.fecha_fin), MONTH(cac.fecha_fin)
) as resultado
group by resultado.periodo
order by
resultado.periodo asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcouriercontar`(IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
select
count(id_courier) as total
from
courier
where
estado=1
and
nombre like concat(prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronograma`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipo` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

# prtipo puede ser 0: Todos, 1: Afiliación, 2: Préstamo, 3: Venta o 4: Judicial

select
*
from
(
    select
    vg.id_venta_cronograma as id_cronograma,
    3 as id_tipo,
    "Venta" as tipo,
    CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    cl.clt_nombre as cliente,
    ssd.id_subsede as id_subsede,
    ssd.ssd_nombre as subsede,
    sd.id_sede as id_sede,
    sd.sd_nombre as sede,
    ins.id_institucion as id_institucion,
    ins.inst_nombre as institucion,
    vg.cng_monto_cuota as monto_total,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente,
    vg.cng_fecha_vencimiento as fecha_vencimiento,
    vg.cng_fecha_cancelacion as fecha_cancelacion,
    case vg.cng_estado
    when 1 then "PENDIENTE"
    when 2 then "PAGADO"
    end as estado,
    vg.cng_estado as id_estado
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    where
    v.vnt_estado<>3
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipo=0) OR
        (prtipo=1 and vg.id_venta_cronograma=0) or
        (prtipo=2 and vg.id_venta_cronograma=0) or
        (prtipo=3) or
        (prtipo=4 and vg.id_venta_cronograma=0)
    )
    and
    (
    	(prestado=0 and vg.cng_estado<>3) OR
        (prestado=vg.cng_estado)
    )
union
    select
    cg.id_credito_cronograma as id_cronograma,
    case c.tipo
    when 1 then 1
    else 2
    end as id_tipo,
    case c.tipo
    when 1 then "Afiliación"
    when 2 then "Préstamo"
    end as tipo,
    case c.tipo
    when 1 then c.codigo
    when 2 then CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    cl.clt_nombre as cliente,
    ssd.id_subsede as id_subsede,
    ssd.ssd_nombre as subsede,
    sd.id_sede as id_sede,
    sd.sd_nombre as sede,
    ins.id_institucion as id_institucion,
    ins.inst_nombre as institucion,
    cg.monto_capital+cg.monto_interes as monto_total,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente,
    cg.fecha_vencimiento as fecha_vencimiento,
    cg.fecha_cancelacion as fecha_cancelacion,
    case cg.estado
    when 1 then "PENDIENTE"
    when 2 then "PAGADO"
    end as estado,
    cg.estado as id_estado
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    where
    c.estado<>3
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipo=0) OR
        (prtipo=1 and c.tipo=1) or
        (prtipo=2 and c.tipo=2) or
        (prtipo=3 and cg.id_credito_cronograma=0) or
        (prtipo=4 and cg.id_credito_cronograma=0)
    )
    and
    (
    	(prestado=0 and cg.estado<>3) OR
        (prestado=cg.estado)
    )
UNION
    select
    pjc.id_proceso_judicial_cronograma as id_cronograma,
    "4" as id_tipo,
    "Judicial" as tipo,
    pj.expediente as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    cl.clt_nombre as cliente,
    ssd.id_subsede as id_subsede,
    ssd.ssd_nombre as subsede,
    sd.id_sede as id_sede,
    sd.sd_nombre as sede,
    ins.id_institucion as id_institucion,
    ins.inst_nombre as institucion,
    pjc.monto_cuota as monto_total,
    ROUND(pjc.monto_cuota-pjc.monto_pagado,2) as monto_pendiente,
    pjc.fecha_vencimiento as fecha_vencimiento,
    pjc.fecha_cancelacion as fecha_cancelacion,
    case pjc.estado
    when 1 then "PENDIENTE"
    when 2 then "PAGADO"
    end as estado,
    pjc.estado as id_estado
    from
    proceso_judicial_cronograma as pjc
    inner join proceso_judicial as pj on
    pjc.id_proceso=pj.id_proceso_judicial
    inner join cliente as cl on
    pj.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    inner join tipo_pago as  tp on
    tp.idtipo_pago=4
    where
    pj.estado<>3
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (pjc.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipo=0) OR
        (prtipo=1 and pjc.id_proceso_judicial_cronograma=0) or
        (prtipo=2 and pjc.id_proceso_judicial_cronograma=0) or
        (prtipo=3 and pjc.id_proceso_judicial_cronograma=0) or
        (prtipo=4)
    )
    and
    (
    	(prestado=0 and pjc.estado<>3) OR
        (prestado=pjc.estado)
    )
) as resultado
order by resultado.fecha_vencimiento asc, resultado.cliente asc, resultado.id_tipo asc, resultado.id_cronograma desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramacontar`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipo` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
BEGIN


select
sum(total) as total
from
(
    select
    count(vg.id_venta_cronograma) as total    
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    where
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipo=0) OR
        (prtipo=1 and vg.id_venta_cronograma=0) or
        (prtipo=2 and vg.id_venta_cronograma=0) or
        (prtipo=3) or
        (prtipo=4 and vg.id_venta_cronograma=0)
    )
    and
    (
    	(prestado=0 and vg.cng_estado<>3) OR
        (prestado=vg.cng_estado)
    )
union
    select
    count(cg.id_credito_cronograma) as total
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    where
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipo=0) OR
        (prtipo=1 and c.tipo=1) or
        (prtipo=2 and c.tipo=2) or
        (prtipo=3 and cg.id_credito_cronograma=0) or
        (prtipo=4 and cg.id_credito_cronograma=0)
    )
    and
    (
    	(prestado=0 and cg.estado<>3) OR
        (prestado=cg.estado)
    )
union
    select
    count(pjc.id_proceso_judicial_cronograma) as total
    from
    proceso_judicial_cronograma as pjc
    inner join proceso_judicial as pj on
    pjc.id_proceso=pj.id_proceso_judicial
    inner join cliente as cl on
    pj.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    inner join tipo_pago as  tp on
    tp.idtipo_pago=4
    where
    pj.estado<>3
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (pjc.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipo=0) OR
        (prtipo=1 and pjc.id_proceso_judicial_cronograma=0) or
        (prtipo=2 and pjc.id_proceso_judicial_cronograma=0) or
        (prtipo=3 and pjc.id_proceso_judicial_cronograma=0) or
        (prtipo=4)
    )
    and
    (
    	(prestado=0 and pjc.estado<>3) OR
        (prestado=pjc.estado)
    )
) as resultado;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listardistrito`(IN `prdepartamento` VARCHAR(40) CHARSET utf8, IN `prprovincia` VARCHAR(40) CHARSET utf8, IN `prdistrito` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP  INT unsigned;
DECLARE TP  INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select 
d.id_distrito,
capitalize(dp.dpt_nombre) as dpt_nombre,
capitalize(p.prv_nombre) as prv_nombre,
capitalize(d.dst_nombre) as dst_nombre
from
distrito d
inner join provincia p on
d.id_provincia = p.id_provincia
inner join departamento dp on
p.id_departamento = dp.id_departamento
where
dp.dpt_estado=1
and
p.prv_estado=1 
and
d.dst_estado=1
and
(dp.dpt_nombre like CONCAT('%',prdepartamento,'%'))
and 
(p.prv_nombre like CONCAT('%',prprovincia,'%'))
and
(d.dst_nombre like CONCAT('%',prdistrito,'%'))
order by
dp.dpt_nombre asc,
p.prv_nombre asc,
d.dst_nombre asc

limit IP,TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizartransaccioncabeceracompra`(IN `prid` INT, IN `prproveedor` INT, IN `prfecha` DATE, IN `prdocumento` VARCHAR(50) CHARSET utf8, IN `prarchivo` VARCHAR(50) CHARSET utf8)
    NO SQL
update
transaccion_cabecera
set
id_proveedor=prproveedor,
tsccab_fecha=prfecha,
tsccab_documento_referencia=prdocumento,
archivo=prarchivo
where
idtransaccion_cabecera=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramavencidosxcliente`(IN `prcliente` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

# prtipo puede ser 0: Todos, 1: Afiliación, 2: Préstamo, 3: Venta o 4: Judicial

select
*
from
(
    select
    vg.id_venta_cronograma as id_cronograma,
    3 as id_tipo,
    "Venta" as tipo,
    CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    vg.cng_monto_cuota as monto_total,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente,
    vg.cng_fecha_vencimiento as fecha_vencimiento,
    vg.cng_estado as estado
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    where
    	v.vnt_estado=1
    and
		v.id_cliente=prcliente
    and
    	vg.cng_estado<>3 and vg.tipo_cuota<>2
    and
    	vg.cng_fecha_vencimiento<CURRENT_DATE
union
    select
    cg.id_credito_cronograma as id_cronograma,
    case c.tipo
    when 1 then 1
    else 2
    end as id_tipo,
    case c.tipo
    when 1 then "Afiliación"
    when 2 then "Préstamo"
    end as tipo,
    case c.tipo
    when 1 then c.codigo
    when 2 then CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    cg.monto_capital+cg.monto_interes as monto_total,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente,
    cg.fecha_vencimiento as fecha_vencimiento,
    cg.estado as estado
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    where
    	c.estado=1
    and
    	c.id_cliente=prcliente
    and
    	cg.estado<>3 and cg.tipo_cuota<>2
    and
    	cg.fecha_vencimiento<CURRENT_DATE
) as resultado
order by resultado.fecha_vencimiento desc, resultado.id_tipo asc, resultado.id_cronograma desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcomisionretenida`()
    NO SQL
select
id_comision_retenida as id,
comision as comision,
cms_fecha as fecha
from
comision_retenida
WHERE
cms_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcooperativacuentacontar`(IN `prbanco` INT, IN `prtitular` VARCHAR(100) CHARSET utf8)
    NO SQL
select
    count(c.id_cooperativa_cuenta) as total
    from
    cooperativa_cuenta as c
    inner join banco as b on
    c.id_banco=b.id_banco
    where
    c.estado=1 
    and
    (prbanco=0 or c.id_banco=prbanco)
    and
    c.titular like concat(prtitular,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxclienteperiodos`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prtipocomparacion` INT, IN `prlimite` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

-- prtipocomparacion = 0: nada, 1: mayor o igual, -1: menor o igual

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
id_cliente,
cliente_dni,
cliente,
case prtipopago
	when 0 then "Todos"
    else tipo_pago
end as tipo_pago,
subsede,
sede,
institucion,
sum(monto_pendiente) as monto_pendiente,
count(*) as total_deudas,
min(fecha_vencimiento) as primera_fecha_vencimiento,
max(ultima_fecha_pago) as ultima_fecha_pago ,
max(meses_sin_pagar) as meses_sin_pagar ,
identificador
from
(
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente ,
    min(vg.cng_fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago ,
    GROUP_CONCAT(DISTINCT concat('Venta: ', t.tln_serie,'-',t.tln_numero) SEPARATOR ', ') as identificador ,
    case 
	when max(detalle_pagos_adjunto.fecha) is not null then TIMESTAMPDIFF(MONTH, max(detalle_pagos_adjunto.fecha), now() )
    else TIMESTAMPDIFF(MONTH, min(vg.cng_fecha_vencimiento), now() )
end as meses_sin_pagar
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join liquidaciones as lq on
    v.idventa = lq.id_venta
    left join
    (
        select
        cd.id_venta_cronograma as id_venta_cronograma,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        	cd.id_venta_cronograma
    )  as detalle_pagos_adjunto on
    vg.id_venta_cronograma = detalle_pagos_adjunto.id_venta_cronograma
    where
    v.vnt_estado=1
    and
    vg.cng_estado=1
    and
    vg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) > 0
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
    group by
    	v.id_cliente
    having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
union
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente ,
    min(cg.fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago,
    GROUP_CONCAT(
        DISTINCT
        case c.tipo
            when 1 then concat('Afiliacion: ', c.codigo)
            else CONCAT('Prestamo: ', c.codigo,"-",LPAD(c.numero,3,"0"))
        end
        SEPARATOR ', '
    ) as identificador ,
        case 
	when max(detalle_pagos_adjunto.fecha) is not null then TIMESTAMPDIFF(MONTH, max(detalle_pagos_adjunto.fecha), now() )
    else TIMESTAMPDIFF(MONTH, min(cg.fecha_vencimiento), now() )
end as meses_sin_pagar
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join liquidaciones as lq on
    c.id_credito = lq.id_credito
	left join
    (
        select
        cd.id_credito_cronograma as id_credito_cronograma ,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        cd.id_credito_cronograma
    ) as detalle_pagos_adjunto on
    cg.id_credito_cronograma = detalle_pagos_adjunto.id_credito_cronograma
    where
    c.estado=1
    and
    cg.estado=1
    and
    cg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) > 0
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
    group by
    	c.id_cliente
    having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
) as resultado
group by resultado.id_cliente
having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
and
(
	(prtipocomparacion=0) or
    (prtipocomparacion=1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) <= prlimite ) or
    (prtipocomparacion=-1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) >= prlimite )
)
order by monto_pendiente desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearplantillas`(IN `prtipoplantilla` INT, IN `prfecha` DATE, IN `prusuario` INT, IN `prcomentarios` VARCHAR(255) CHARSET utf8, IN `prarchivos` VARCHAR(255) CHARSET utf8)
    NO SQL
insert into
plantillas
set
tipo_plantilla=prtipoplantilla,
fecha=prfecha,
usuario=prusuario,
comentarios=prcomentarios,
archivo=prarchivos$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditocronograma`(IN `prcredito` INT, IN `prestado` INT)
    NO SQL
select
cc.id_credito_cronograma as id,
tp.tpag_nombre as tipo_pago,
cc.fecha_vencimiento as fecha,
sum(cc.monto_capital) as capital,
sum(cc.monto_interes) as interes,
sum(cc.monto_capital+monto_interes) as monto,
sum(cc.interes) as interes_generado,
sum(cc.monto_pagado) as monto_pagado,
cc.fecha_cancelacion as fecha_cancelacion,
sum(cc.monto_capital+monto_interes+interes-monto_pagado) as monto_pendiente,
cc.estado as id_estado,
case cc.estado
when 1 then 'Por pagar'
when 2 then 'Pagado'
end as estado
from
credito_cronograma as cc
inner join tipo_pago as tp on
cc.id_tipo_pago=tp.idtipo_pago
where
cc.id_credito=prcredito
and
(
    (prestado=0 and cc.tipo_cuota<>2) or
    (cc.tipo_cuota=prestado)
)
and
cc.estado<>3
group by
cc.id_credito_cronograma
order by cc.fecha_vencimiento asc, monto asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzaarchivosxId`(IN `prid` INT)
    NO SQL
select
cc.id_cobranza as id,
i.inst_nombre as institucion,
s.sd_nombre as sede,
tp.tpag_nombre as tipo_pago,
cc.fecha_inicio as fecha_inicio,
cc.fecha_fin as fecha_fin,
cc.fecha_pago as fecha_pago,
cc.cantidad as cantidad,
cc.monto as monto,
cc.monto_pagado as monto_pagado,
cc.nombre_archivo as archivo,
cc.estado as id_estado,
case cc.estado
when 1 then 'Pendiente'
when 2 then 'Pagado'
when 3 then 'Anulado'
end as estado
from
cobranza_archivos_cabecera as cc
inner join sede as s on
cc.id_sede=s.id_sede
inner join institucion as i on
s.id_institucion=i.id_institucion
inner join tipo_pago as tp on
cc.id_tipo_pago=tp.idtipo_pago
where
cc.id_cobranza=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxcuotaperiodoscontar`(IN `prtipotransaccion` INT, IN `prtransaccion` VARCHAR(20) CHARSET utf8, IN `prperiodo` INT)
    NO SQL
BEGIN
  
	set @fecha_mes = LEFT(prperiodo,2);
    set @fecha_ano = RIGHT(prperiodo,4);
   
   	select
    count(*) as total
    from
    (
        select
        0 as id_detalle ,
        cd.id_cobranza_directa as id_cobranza_directa,
        cd.id_cobranza_archivos as id_cobranza_archivos,
        cd.id_cobranza_judicial as id_cobranza_judicial,
        cd.id_cobranza_manual as id_cobranza_manual,
        sum(cd.monto) as monto,
        case
        when cd.id_cobranza_directa>0 then c1.fecha
        when cd.id_cobranza_archivos>0 then c2c.fecha_pago
        when cd.id_cobranza_judicial>0 then "Judicial"
        when cd.id_cobranza_manual>0 then cbm.fecha
        end as fecha_pago,
        case
        when cd.id_cobranza_directa>0 then CONCAT(cc1.alias,"-",c1.numero_operacion)
        when cd.id_cobranza_archivos>0 then DATE_FORMAT(c2c.fecha_fin, "%m/%Y")
        when cd.id_cobranza_judicial>0 then "Judicial"
        when cd.id_cobranza_manual>0 then cbm.comprobante
        end as documento,
        case
        when cd.id_cobranza_directa>0 then 2
        when cd.id_cobranza_archivos>0 then 1
        when cd.id_cobranza_judicial>0 then 4
        when cd.id_cobranza_manual>0 then 5
        end as id_tipo,
        case
        when cd.id_cobranza_directa>0 then "Directo"
        when cd.id_cobranza_archivos>0 then "Planilla"
        when cd.id_cobranza_judicial>0 then "Judicial"
        when cd.id_cobranza_manual>0 then 'Manual'
        end as tipo
        from
        cobranza_detalle as cd
        left join credito_cronograma as cg on
        cd.id_credito_cronograma=cg.id_credito_cronograma
        left join venta_cronograma as vg on
        cd.id_venta_cronograma=vg.id_venta_cronograma
        left join cobranza_directa as c1 on
        cd.id_cobranza_directa=c1.id_cobranza_directa
        left join cooperativa_cuenta as cc1 on
        c1.id_cooperativa_cuenta = cc1.id_cooperativa_cuenta
        left join cobranza_archivos_detalle as c2d on
        cd.id_cobranza_archivos=c2d.id_cobranza_detalle
        left join cobranza_archivos_cabecera as c2c on
        c2d.id_cobranza=c2c.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where 
        (
            ( prtipotransaccion = 1 and cg.id_credito = prtransaccion ) or
            ( prtipotransaccion = 2 and vg.id_venta = prtransaccion )
        )
        and
        (
            (
                ( cbm.tipo_transaccion = prtipotransaccion ) and
                ( cbm.id_transaccion = prtransaccion ) and 
                ( MONTH(cbm.fecha) = @fecha_mes ) and
                ( YEAR(cbm.fecha) = @fecha_ano ) and 
                ( cbm.estado = 1 )
            )
            or
            (
                /* ( c1.id_transaccion = prtransaccion ) and */
                ( MONTH(c1.fecha) = @fecha_mes ) and
                ( YEAR(c1.fecha) = @fecha_ano ) and 
                ( c1.estado = 1 )
            )
            or
            (
                ( MONTH(c2c.fecha_inicio) = @fecha_mes ) and
                ( YEAR(c2c.fecha_inicio) = @fecha_ano ) and 
                ( c2c.estado = 1 )
            )
        ) 
        and
        cd.estado=1
        group by cd.id_cobranza_directa ,
        cd.id_cobranza_archivos ,
        cd.id_cobranza_judicial ,
        cd.id_cobranza_manual
    ) as conteo ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditogarante`(IN `prcredito` INT)
    NO SQL
select
c.id_credito_garante as id,
c.id_cliente as id_cliente,
cl.clt_dni as cliente_dni,
cl.clt_nombre as cliente_nombre,
c.cliente_telefono as cliente_telefono,
c.cliente_direccion as cliente_direccion,
c.dni_adjunto as dni_pdf,
c.cip_adjunto as cip_pdf,
c.planilla_virtual_adjunto as planilla_pdf
from
credito_garante as c
inner join cliente as cl on
c.id_cliente=cl.idcliente
where
c.id_credito=prcredito
and
c.estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxcuotacontar`(IN `prtipo` INT, IN `prcuota` INT)
    NO SQL
BEGIN

  
   	select
    count(cd.id_cobranza_detalle) as total
    from
    cobranza_detalle as cd
    left join credito_cronograma as cg on
    cd.id_credito_cronograma=cg.id_credito_cronograma
    left join venta_cronograma as vg on
    cd.id_venta_cronograma=vg.id_venta_cronograma
    left join cobranza_directa as c1 on
    cd.id_cobranza_directa=c1.id_cobranza_directa
    left join cobranza_manual as cm on
    cd.id_cobranza_manual=cm.id_cobranza_manual
    where
    cd.estado=1
    and
    (
        (prtipo=1 and cd.id_credito_cronograma=prcuota) or
        (prtipo=2 and cd.id_venta_cronograma=prcuota)
    );
   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadodistrito`(IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;
    
    select
    id_juzgado_distrito as id,
    nombre as nombre
    from
    juzgado_distrito
    where
    estado=1
    and
    nombre like concat(prnombre,'%')
    order by nombre asc
    limit IP, TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarhistorialserie`(IN `prserie` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
    COMMENT 'Historial de movimiento de productos por serie'
BEGIN
DECLARE IP int unsigned;
DECLARE TP int unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT 
	tc.tsccab_fecha AS fecha,
    ps.ps_serie AS serie,
    prd.prd_descripcion AS producto,
	tc.tsccab_documento_referencia AS documento,
	case tt.ttsc_tipo
	when 1 then a.alm_documento_ingreso
	when 2 then a.alm_documento_salida
	end as movimiento_serie,
	tc.numero_documento as movimiento_numero,
	tt.ttsc_nombre AS transaccion,
(CASE
	WHEN tt.idtipo_transaccion = 1 THEN prv.prv_nombre
	WHEN tt.idtipo_transaccion = 2 THEN	clt.clt_nombre
	WHEN tt.idtipo_transaccion = 3 THEN clt.clt_nombre
	WHEN tt.idtipo_transaccion = 4 THEN CONCAT("Pecosa ",sv.sc_codigo)
	WHEN tt.idtipo_transaccion = 5 THEN al2.alm_nombre
	WHEN tt.idtipo_transaccion = 6 THEN CONCAT("Pecosa ",sv.sc_codigo)
	WHEN tt.idtipo_transaccion = 7 THEN al2.alm_nombre
END) AS tenedor,
    ps.ps_serie AS serie
		
FROM transaccion_detalle as td

 INNER JOIN transaccion_cabecera AS tc ON
 tc.idtransaccion_cabecera = td.id_movimiento_cabecera
 INNER join almacen as a on
 tc.id_almacen=a.idalmacen
 left JOIN proveedor AS prv ON
 tc.id_proveedor  = prv.idproveedor
 left join venta as vt on
 tc.id_venta=vt.idventa
 left JOIN cliente AS clt ON
 vt.id_cliente = clt.idcliente
 left join salida_cabecera as sv on
 tc.id_salida_venta=sv.idsalida_vendedor
 left JOIN vendedor AS vnd ON
 tc.id_vendedor = vnd.idvendedor
 left JOIN almacen AS al2 ON
 tc.id_sucursal = al2.idalmacen
 left JOIN tipo_transaccion AS tt ON
 tc.id_tipo_transaccion = tt.idtipo_transaccion
 left JOIN producto_serie AS ps ON
 td.id_producto_serie  = ps.id_producto_serie
 INNER JOIN producto AS prd ON
 ps.id_producto = prd.idproducto
 
  WHERE
  (prserie="" or ps.ps_serie like concat('%',prserie,'%'))
  and
  tc.tsccab_estado=1
  and
  td.tscdet_estado=1
  ORDER BY tc.tsccab_fecha DESC, tc.idtransaccion_cabecera desc
  LIMIT IP, TP;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarvendedorfoto`(IN `prvendedor` INT, IN `prfoto` VARCHAR(100) CHARSET utf8)
    NO SQL
update
vendedor
set
foto=prfoto
where
idvendedor=prvendedor$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramaxcobrarpnp`(IN `prsede` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
BEGIN

select
resultado.id as id,
resultado.id_tipo as id_tipo,
resultado.tipo as tipo,
resultado.codigo as codigo,
resultado.codofin as codofin,
resultado.cip as cip,
resultado.id_cliente as id_cliente,
resultado.cliente as cliente,
resultado.fecha_vencimiento as fecha,
sum(resultado.monto_pendiente) as monto_pendiente/*,
CONCAT(
	LPAD(resultado.codofin,9," "),
    "14070000",
    LPAD(ROUND(sum(resultado.monto_pendiente)*100,0),12,0),
    "000000000000",
    LPAD(ROUND(sum(resultado.monto_pendiente)*100,0),12,0),
    DATE_FORMAT(resultado.fecha_vencimiento, "%d-%m-%Y"),
    LPAD(CEILING(sum(resultado.monto_pendiente))*100,12,0)
) as archivo*/
from
(
    select
    vg.id_venta_cronograma as id,
    3 as id_tipo,
    "Venta" as tipo,
    CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
    cl.clt_codigo as codofin,
    cl.clt_cip as cip,
    cl.idcliente as id_cliente,
    cl.clt_nombre as cliente,
    ssd.id_subsede as id_subsede,
    ssd.ssd_nombre as subsede,
    ROUND(SUM(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado),2) as monto_pendiente,
    vg.cng_fecha_vencimiento as fecha_vencimiento
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    where
    v.vnt_estado=1
    and
    v.id_tipopago=1
    and
    vg.cng_estado<>3
    and
    vg.tipo_cuota<>2
    and
    sd.id_sede=prsede
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    group by
    vg.id_venta_cronograma
union
    select
    cg.id_credito_cronograma as id,
    case c.tipo
    when 1 then 1
    else 2
    end as id_tipo,
    case c.tipo
    when 1 then "Afiliaci?n"
    else "Pr?stamo"
    end as tipo,
    case c.tipo
    when 1 then c.codigo
    else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as codigo,
    cl.clt_codigo as codofin,
    cl.clt_cip as cip,
    cl.idcliente as id_cliente,
    cl.clt_nombre as cliente,
    ssd.id_subsede as id_subsede,
    ssd.ssd_nombre as subsede,
    ROUND(SUM(cg.monto_capital+cg.interes-cg.monto_pagado),2) as monto_pendiente,
    cg.fecha_vencimiento as fecha_vencimiento
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    where
    c.estado=1
    and
    c.id_tipo_pago=1
    and
    cg.estado<>3
    and
    cg.tipo_cuota<>2
    and
    sd.id_sede=prsede
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    group by
    cg.id_credito_cronograma
) as resultado
where
resultado.monto_pendiente > 0
group by resultado.tipo, resultado.id
order by resultado.cliente asc, resultado.fecha_vencimiento asc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listardistritocontar`(IN `prdepartamento` VARCHAR(40) CHARSET utf8, IN `prprovincia` VARCHAR(40) CHARSET utf8, IN `prdistrito` VARCHAR(40) CHARSET utf8)
    READS SQL DATA
select count(*) as total
from
distrito d
inner join provincia p on
d.id_provincia = p.id_provincia
inner join departamento dp on
p.id_departamento = dp.id_departamento
where
dp.dpt_estado=1
and
p.prv_estado =1 
and
d.dst_estado = 1
and
(prdepartamento is null or dp.dpt_nombre like CONCAT('%',prdepartamento,'%'))
and 
(prprovincia is null or p.prv_nombre like CONCAT('%',prprovincia,'%'))
and
(prdistrito is null or d.dst_nombre like CONCAT('%',prdistrito,'%'))
order by
dp.dpt_nombre asc,
p.prv_nombre asc,
d.dst_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_creartransacciondetalle`(IN `prcabecera` INT, IN `prproductoserie` INT, IN `prcantidad` INT, IN `prprecio` FLOAT, IN `probservacion` VARCHAR(40) CHARSET utf8)
    NO SQL
insert into transaccion_detalle
SET
id_movimiento_cabecera=prcabecera,
id_producto_serie=prproductoserie,
tscdet_cantidad=prcantidad,
tscdet_precio=prprecio,
tscdet_observacion=probservacion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarusuario`(IN `pidusuario` INT, IN `pusr_nombre` VARCHAR(45) CHARSET utf8, IN `pusr_usuario` VARCHAR(15) CHARSET utf8, IN `pidperfil` INT)
    MODIFIES SQL DATA
UPDATE usuario 
SET usr_nombre = pusr_nombre,
	usr_usuario = pusr_usuario,
	idperfil = pidperfil
WHERE idusuario = pidusuario$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarvendedorcargo`(IN `prid` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    MODIFIES SQL DATA
update
vendedor_cargo
set
nombre=prnombre
where
id_vendedor_cargo=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listardocumentostransaccionxproceso`(IN `prid` INT)
    NO SQL
select
c.id_credito as id_credito,
case c.tipo
    when 1 then c.codigo
    else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
end as documento_credito,
c.tipo as credito_tipo,
c.foto_adjunto as pdf_foto_credito,
c.dni_adjunto as pdf_dni_credito,
c.cip_adjunto as pdf_cip_credito,
c.planilla_virtual_adjunto as pdf_planilla_credito,
c.voucher_bn_adjunto as pdf_voucher_credito,
c.recibo_servicios_adjunto as pdf_recibo_credito,
c.casilla_pj_adjunto as pdf_casilla_credito,
c.transaccion_adjunto as pdf_transaccion_credito,
c.autorizacion_adjunto as pdf_autorizacion_credito,
c.tarjeta_socio_adjunto as pdf_tarjeta_credito,
c.compromiso_pago_adjunto as pdf_compromiso_credito,
c.letra_cambio_adjunto as pdf_letra_credito,
c.declaracion_jurada_adjunto as pdf_ddjj_credito,
c.otros_adjunto as pdf_otros_credito,
v.idventa as id_venta,
CONCAT(t.tln_serie,"-", t.tln_numero) as documento_venta,
v.vnt_tipoventa as venta_tipo,
v.vnt_foto as foto_pdf_venta,
v.vnt_contrato_pdf as contrato_pdf_venta,
v.vnt_dni_pdf as dni_pdf_venta,
v.vnt_cip_pdf as cip_pdf_venta,
v.vnt_planilla_pdf as planilla_pdf_venta,
v.vnt_letra_pdf as letra_pdf_venta,
v.vnt_voucher_pdf as voucher_pdf_venta,
v.vnt_autorizacion_pdf as autorizacion_pdf_venta,
v.otros_pdf as otros_pdf_venta
from
proceso_judicial_transacciones as pjt
left join
creditos as c on
(pjt.tipo_transaccion=1 and pjt.id_transaccion=c.id_credito)
left join
venta as v on
(pjt.tipo_transaccion=2 and pjt.id_transaccion=v.idventa)
left join talonario as t on
v.id_talonario=t.id_talonario
where
id_proceso=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillacooperativacontacto`()
    NO SQL
select
if(
    count(distinct c.id_cooperativa_contacto) >1,
   	GROUP_CONCAT(c.numero SEPARATOR " / "),
   	c.numero
) as numero
from
cooperativa_contacto as c
where
c.estado=1
and
c.relevancia=2$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditocontar`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prdni` VARCHAR(10) CHARSET utf8, IN `prtipocredito` INT, IN `prestadopagos` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
SELECT
count( distinct c.id_credito) as total
from creditos as c
inner join cliente as cl ON
c.id_cliente=cl.idcliente
inner join tipo_pago as tp ON
c.id_tipo_pago=tp.idtipo_pago
INNER JOIN subsede as ssd on
cl.id_sub_sede = ssd.id_subsede
INNER JOIN sede as s on
ssd.id_sede = s.id_sede
INNER JOIN institucion as inst on
s.id_institucion = inst.id_institucion
left join credito_cronograma as cg on
c.id_credito=cg.id_credito
WHERE
(prestado=0 or c.estado=prestado)
and
(cl.clt_nombre like CONCAT(prcliente,'%'))
and
(cl.clt_dni like CONCAT(prdni,'%'))
and
(
    (prtipocredito=0) or
    (prtipocredito=99 and c.tipo>1) or
    (c.tipo=prtipocredito)
)
and
(
    ( isnull(prfechainicio) and isnull(prfechafin) ) or
    ( isnull(prfechafin) and c.fecha>=prfechainicio ) or
    ( isnull(prfechainicio) and c.fecha<=prfechafin ) or
    ( c.fecha BETWEEN prfechainicio and prfechafin ) 
)
/*and
(
	(prdocumentos=0)
    or
    (
        prdocumentos=1 and
        (
            IF(c.foto_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.dni_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.cip_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.casilla_pj_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.transaccion_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.autorizacion_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.tarjeta_socio_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.declaracion_jurada_adjunto<>'' and c.tipo>1,1,0) + 
            IF(c.compromiso_pago_adjunto<>'' and c.tipo>1 and c.id_tipo_pago=2,1,0)
        ) < 
        (
            IF( c.tipo>1 ,
            8 +IF(c.id_tipo_pago=2,1,0) ,
            1 )
        )
    )
    or 
    (
        prdocumentos=2 and
        (
            IF(c.foto_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.dni_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.cip_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.casilla_pj_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.transaccion_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.autorizacion_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.tarjeta_socio_adjunto<>'' and c.tipo>1,1,0) +
            IF(c.declaracion_jurada_adjunto<>'' and c.tipo>1,1,0) + 
            IF(c.compromiso_pago_adjunto<>'' and c.tipo>1 and c.id_tipo_pago=2,1,0)
        ) = 
        (
            IF( c.tipo>1 ,
            8 +IF(c.id_tipo_pago=2,1,0) ,
            1 )
        )
     )
)*/
HAVING
	(prestadopagos=0)
	or
    (prestadopagos=1 and ( max(cg.fecha_vencimiento)>CURDATE() and sum(if(cg.fecha_vencimiento<CURDATE(),cg.monto_capital+cg.monto_interes-cg.monto_pagado,0)) = 0 ) )
    or
    (prestadopagos=2 and ( max(cg.fecha_vencimiento)>CURDATE() and sum(if(cg.fecha_vencimiento<CURDATE(),cg.monto_capital+cg.monto_interes-cg.monto_pagado,0)) > 0 ) )
    or
    (prestadopagos=3 and ( max(cg.fecha_vencimiento)<CURDATE() and sum(cg.monto_capital+cg.monto_interes-cg.monto_pagado) = 0 ) )
    or
    (prestadopagos=4 and ( max(cg.fecha_vencimiento)<CURDATE() and sum(cg.monto_capital+cg.monto_interes-cg.monto_pagado) > 0 ) )$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listardepartamento`(IN `prnombre` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

select
id_departamento,
upper(dpt_nombre) as dpt_nombre
from
departamento
where
dpt_estado=1
and
(prnombre="" or dpt_nombre like CONCAT('%',prnombre,'%'))
order by
dpt_nombre asc
limit IP,TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarlog`(IN `prusuario` VARCHAR(100) CHARSET utf8, IN `praccion` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

    DECLARE IP INT unsigned ;
    DECLARE TP INT unsigned ;

    set IP = (prpagina-1)*prtotalpagina ;
    set TP = prtotalpagina ;

	select
    	log.id_log as ig_log ,
        usuario.usr_nombre as usuario ,
        log.fecha as fecha ,
        log.id_log_accion as id_accion ,
        log_accion.nombre as accion ,
        log.id_referencia as id_referencia ,
        log.id_log_referencia as id_log_referencia ,
        log_referencia.tabla_referenciada as tabla_referenciada ,
        coalesce(log_referencia.nombre,"") as referencia ,
        case log_referencia.tabla_referenciada
        when 'proceso_judicial' then proceso_judicial.expediente
        when 'proceso_judicial_detalle' then S_proceso_judicial_detalle.documento
        else '-'
        end as nombre_referencia
    from
    	log
    inner join log_accion on
    	log.id_log_accion = log_accion.id_log_accion
    inner join log_referencia on
    	log.id_log_referencia = log_referencia.id_log_referencia
    inner join usuario on
    	log.id_usuario = usuario.idusuario
    left join proceso_judicial on
    	log.id_referencia = proceso_judicial.id_proceso_judicial
    left join
    (
    	select
        	pjd0.id_proceso_judicial_detalle ,
        	concat(pj0.expediente, " - " , pjdc0.nombre, " ", pjd0.numero) as documento
        from
        	proceso_judicial_detalle as pjd0
        inner join
        	proceso_judicial as pj0 
        on
        	pjd0.id_proceso = pj0.id_proceso_judicial
        inner join
        	proceso_judicial_documento as pjdc0
        on
        	pjd0.tipo_documento = pjdc0.id_proceso_judicial_documento       
    ) as S_proceso_judicial_detalle ON
    	log.id_referencia = S_proceso_judicial_detalle.id_proceso_judicial_detalle
    WHERE
    	usuario.usr_nombre like concat(prusuario,"%")
    and
    	( praccion = -1 or log.id_log_accion = praccion )
    and
    	(
            (prfechainicio is null and prfechafin is null) or
            (DATE(log.fecha) BETWEEN prfechainicio and prfechafin)
        )
    order by log.fecha desc
    limit IP, TP ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarliquidaciones`(IN `prtipo` INT, IN `prcodigo` VARCHAR(20) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombrecliente` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prusuario` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT, IN `prorden` VARCHAR(50) CHARSET utf8)
    NO SQL
begin

	declare IP int unsigned ;
    declare TP int unsigned ;
    DECLARE VTIPO VARCHAR(255);
    DECLARE VCODIGO VARCHAR(255);
    DECLARE VDNI VARCHAR(255);
    DECLARE VCLIENTE VARCHAR(255);
    DECLARE VFECHA VARCHAR(255);
    DECLARE VUSUARIO VARCHAR(255);

    set IP = (prpagina-1)*prtotalpagina ;
	set TP = prtotalpagina ;

	if prtipo = 0 then
    	set VTIPO = "" ;
    else
    	set VTIPO = concat(" and lq.tipo = ",prtipo," ") ;
    end if ;

	if prcodigo = "" then
    	set VCODIGO = "" ;
    else
    	set VCODIGO = concat(" and
        	(
        		concat(t.tln_serie, "-",t.tln_numero) like concat(",prcodigo,",'%') or
            	concat( c.codigo, "-",LPAD(c.numero,3,'0') ) like concat(",prcodigo,",'%')
			) ") ;
    end if ;

    IF (isnull(prfechainicio) and isnull(prfechafin)) then
    	set VFECHA="";
    ELSE
    	set VFECHA=CONCAT("AND (DATE(lq.fecha) between '",prfechainicio,"' and '",prfechafin,"') ");
    END IF;

	if prusuario = "" then
    	set VUSUARIO = "" ;
    else 
     	set VUSUARIO = CONCAT("u.usr_nombre like concat(",prusuario,", '%')") ;
    end if ;

	if prdni = "" then
    	set VDNI = "" ;
    else 
    	set VDNI = CONCAT("
        and
    	(
       		vc.clt_dni like concat(",prdni,",'%') or
            cc.clt_dni like concat(",prdni,",'%')
        )
        ") ;
    end if ;

	if prnombrecliente = "" then
    	set VCLIENTE = "" ;
    else 
    	set VCLIENTE = CONCAT("
        and
    	(
   	    	vc.clt_nombre like concat(",prnombrecliente,",'%') or
            cc.clt_nombre like concat(",prnombrecliente,",'%')
        )
        ") ;
    end if ;
    
	set @Statement=concat("
		select
    	lq.id_liquidacion as id_liquidacion ,
        case lq.tipo
        when 1 then c.tipo
        when 2 then v.vnt_tipoventa + 2
        end as id_tipo , 
        case lq.tipo
			when 1 then
				case c.tipo
                when 1 then 'Crédito'
                when 2 then 'Afiliación'
                end
            when 2 then
				'Venta'
        end as tipo ,                 
		case lq.tipo
        	when 1 then
				case c.tipo
                when 1 then c.codigo
                else CONCAT(c.codigo,'-',LPAD(c.numero,3,'0'))
                end
            when 2 then
				CONCAT(t.tln_serie,'-', t.tln_numero)
        end as documento,
        case lq.tipo
        when 1 then cc.clt_dni
        when 2 then vc.clt_dni
        end as cliente_dni ,
        case lq.tipo
        when 1 then cc.clt_nombre
        when 2 then vc.clt_nombre
        end as cliente_nombre ,
        lq.id_transaccion as id_transaccion ,
        lq.monto as monto ,
        lq.fecha as fecha ,
        lq.id_usuario as id_usuario ,
        u.usr_nombre as usuario,
        sum(lqp.monto) as total_pagado ,
		lq.observacion as observacion
    FROM
    	liquidaciones as lq
    left join
    	liquidaciones_pagos as lqp
    on
		(lq.id_liquidacion = lqp.id_liquidacion and lqp.estado=1)
    left JOIN
    	creditos as c
    on
    	(lq.id_transaccion = c.id_credito and lq.tipo=1)
    left join
    	cliente as cc
    on
      	c.id_cliente = cc.idcliente
    left join
    	venta as v
    on
    	(lq.id_transaccion = v.idventa and lq.tipo = 2)
    left join
    	talonario as t
    on
    	v.id_talonario = t.id_talonario
    left join
    	cliente as vc
    on
    	v.id_cliente = vc.idcliente
    inner join
    	usuario as u
    on
    	lq.id_usuario = u.idusuario
    where
    	lq.estado = 1 ",
	VTIPO ,
   	VCODIGO ,
   	VDNI ,
   	VCLIENTE ,
   	VFECHA ,
   	VUSUARIO , 
    " group by lq.id_liquidacion
	order by ",
    prorden,
    ", id_liquidacion desc",
	" limit ",IP,",",TP 
);
                        
PREPARE stmt FROM @Statement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarinstituciones`(IN `prnombre` VARCHAR(30) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

	SELECT
    i.id_institucion as id,
    i.inst_nombre as nombre,
    i.isnt_abreviatura as abreviatura,
    i.isnt_representante_legal as representante_legal,
    i.inst_direccion as direccion,
    i.inst_telefono as telefono,
    i.inst_codigo_cooperativa as codigo_cooperativa
    from
    institucion as i
    where
    i.inst_estado=1
    and
    i.inst_nombre like concat('%',prnombre,'%')
    order by i.inst_nombre asc
    limit IP, TP ; 

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramavencidosxclientecontar`(IN `prcliente` INT)
    NO SQL
BEGIN

select
count(*) as total
from
(
    select
    vg.id_venta_cronograma as id_cronograma,
    3 as id_tipo,
    "Venta" as tipo,
    CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    vg.cng_monto_cuota as monto_total,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente,
    vg.cng_fecha_vencimiento as fecha_vencimiento
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    where
    	v.vnt_estado=1
    and
		v.id_cliente=prcliente
    and
    	vg.cng_estado<>3 and vg.tipo_cuota<>2
    and
    	vg.cng_fecha_vencimiento<CURRENT_DATE
union
    select
    cg.id_credito_cronograma as id_cronograma,
    case c.tipo
    when 1 then 1
    else 2
    end as id_tipo,
    case c.tipo
    when 1 then "Afiliación"
    when 2 then "Préstamo"
    end as tipo,
    case c.tipo
    when 1 then c.codigo
    when 2 then CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    cg.monto_capital+cg.monto_interes as monto_total,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente,
    cg.fecha_vencimiento as fecha_vencimiento
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    where
    	c.estado=1
    and
    	c.id_cliente=prcliente
    and
    	cg.estado<>3 and vg.tipo_cuota<>2
    and
    	cg.fecha_vencimiento<CURRENT_DATE
) as resultado
order by resultado.fecha_vencimiento asc, resultado.id_tipo asc, resultado.id_cronograma desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearseguimientodocumentos`(IN `prventa` INT, IN `prcredito` INT, IN `prcourier` INT, IN `prfecha` DATE, IN `prseguimiento` VARCHAR(20) CHARSET utf8, IN `prfoto` VARCHAR(100) CHARSET utf8, IN `probservacion` VARCHAR(200) CHARSET utf8)
    MODIFIES SQL DATA
insert into
seguimiento_documentos
set
id_venta=if(prventa=0, null, prventa),
id_credito=if(prcredito=0, null, prcredito),
id_courier=prcourier,
fecha=prfecha,
numero_seguimiento=prseguimiento,
foto=prfoto,
observacion=probservacion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmodelo`(IN `prmarca` INT, IN `prnombre` VARCHAR(45))
    READS SQL DATA
select
md.id_modelo,
t.tprd_nombre,
m.mrc_nombre,
md.mdl_nombre
from
modelo md
inner join marca m on
md.id_marca = m.id_marca
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
where md.estado = 1 and
(prmarca is null or prmarca = md.id_marca)
and
(prnombre='' or prnombre=md.mdl_nombre)
order by md.mdl_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearretornovendedorproductoventa`(IN `pridserie` INT, IN `prsalida` INT, IN `prventa` INT, IN `pralmacen` INT, IN `precio` FLOAT)
    MODIFIES SQL DATA
BEGIN

SELECT
@fecha:=vnt_fecha,
@documento:=concat(t.tln_serie,"-",t.tln_numero)
from
venta as v
inner join talonario as t on
v.id_talonario=t.id_talonario
where
idventa=prventa;

INSERT INTO
venta_producto
SET
id_venta=prventa,
id_producto_serie= pridserie,
vprd_precio=prprecio;

insert into
transaccion_cabecera
set
id_almacen=pralmacen,
id_tipo_transaccion=3,
tsccab_referencia=2,
id_venta=prventa,
tsccab_fecha=CONVERT(@fecha,char),
tsccab_documento_referencia=CONVERT(@documento,char),
tsccab_observacion="AJUSTE DE VENTA";

select @id:=LAST_INSERT_ID();

insert into
transaccion_detalle
set
id_movimiento_cabecera=@id,
id_producto_serie=pridserie,
tscdet_cantidad=-1,
tscdet_precio=@precio;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listardistritoxId`(IN `prid` INT)
    READS SQL DATA
select 
d.id_distrito,
capitalize(dp.dpt_nombre) as dpt_nombre,
p.id_provincia,
d.dst_nombre
from
distrito d
inner join provincia p on
d.id_provincia = p.id_provincia
inner join departamento dp on
p.id_departamento = dp.id_departamento
where
d.id_distrito = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizartipoproducto`(IN `id` INT, IN `nombre` VARCHAR(45) CHARSET utf8, IN `prtieneserie` INT, IN `idunidad` INT)
    MODIFIES SQL DATA
UPDATE 
tipo_producto
SET
tprd_nombre = TRIM(nombre),
tiene_serie = prtieneserie ,
id_unidad_medida = idunidad
WHERE id_tipo_producto = id$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmarcacontar`(IN `prtipo` VARCHAR(45) CHARSET utf8, IN `prnombre` VARCHAR(45) CHARSET utf8)
    READS SQL DATA
BEGIN

select
count(m.id_marca) as total
from marca m
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
where 
t.estado=1 
and 
m.estado = 1 
and
(prtipo is null or t.tprd_nombre  LIKE CONCAT('%',prtipo,'%'))
and
(prnombre is null or m.mrc_nombre LIKE CONCAT('%',prnombre,'%'));

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadodistritocontar`(IN `prnombre` VARCHAR(50) CHARSET utf8)
    READS SQL DATA
begin

    select
    count(id_juzgado_distrito) as total
    from
    juzgado_distrito
    where
    estado=1
    and
    nombre like concat(prnombre,'%');

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramaventaspagosxmes`(IN `prventa` INT)
    NO SQL
select 
    DATE_FORMAT(resultado.periodo,"%m/%Y") as periodo,
    ROUND(sum(resultado.monto_cuota_anterior),2) as monto_cuota_anterior ,
    ROUND(sum(resultado.monto_cuota),2) as monto_cuota ,
    ROUND(sum(resultado.monto_pago_manual),2) as monto_pago_manual ,
    ROUND(sum(resultado.monto_pago_manual_directo),2) as monto_pago_manual_directo ,
    ROUND(sum(resultado.monto_pago_manual_planilla),2) as monto_pago_manual_planilla ,
    ROUND(sum(resultado.monto_pago_manual_judicial),2) as monto_pago_manual_judicial ,
    ROUND(sum(resultado.monto_directo),2) as monto_directo ,
    GROUP_CONCAT(DISTINCT resultado.identificador_directo) as identificador_directo ,
    ROUND(sum(resultado.monto_planilla),2) as monto_planilla ,
    ROUND(sum(resultado.monto_pago_manual_planilla) + sum(resultado.monto_planilla),2) as total_planilla ,
    ROUND(sum(resultado.monto_pago_manual_directo) + sum(resultado.monto_directo),2) as total_directo ,
    ROUND(sum(resultado.monto_pago_manual_judicial),2) as total_judicial
from
(
    # Las fechas hasta hoy
    select
        uf.fecha as periodo ,
        0 as monto_cuota_anterior,
    	0 as monto_cuota,
        0 as monto_pago_manual ,
        0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
        0 as monto_directo ,
    	null as identificador_directo ,
        0 as monto_planilla
    from
    	utilitarios_fecha as uf
    where
        uf.fecha >= (
            select
            min(vcf.cng_fecha_vencimiento)
            from
            venta_cronograma as vcf
            WHERE
            vcf.id_venta=prventa
            and
            vcf.cng_estado<>3
            and
            vcf.tipo_cuota<>2
        )
    and
    	uf.fecha <= last_day(now())
    group by
    	YEAR(uf.fecha), MONTH(uf.fecha)
    
    UNION
    
    # Las fechas del cronograma
    select
        LAST_DAY(vc.cng_fecha_vencimiento) as periodo,
    	0 as monto_cuota_anterior ,
        round(sum(vc.cng_monto_cuota + vc.cng_interes),2) as monto_cuota,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from 
    	venta_cronograma as vc
    where
    	vc.id_venta = prventa
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota<>2
    group by
    	YEAR(vc.cng_fecha_vencimiento), MONTH(vc.cng_fecha_vencimiento)

    UNION
    
    # Las fechas del cronograma
    select
        LAST_DAY(vc.cng_fecha_vencimiento) as periodo,
        round(sum(vc.cng_monto_cuota + vc.cng_interes),2) as monto_cuota_anterior,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from 
    	venta_cronograma as vc
    where
    	vc.id_venta = prventa
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota=2
    group by
    	YEAR(vc.cng_fecha_vencimiento), MONTH(vc.cng_fecha_vencimiento)

    UNION
    
    # Los pagos manuales asignados por el usuario
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
    	sum(cdm.monto) as monto_pago_manual ,
        0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual>0 and cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	cobranza_manual_tipo as cdmt
    on
    	c1.id_tipo_cobranza_manual = cdmt.id_cobranza_manual_tipo
    inner join
    	venta_cronograma as vc
    on
    	(cdm.id_venta_cronograma>0 and cdm.id_venta_cronograma=vc.id_venta_cronograma)
    where
    	vc.id_venta=prventa
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	cdmt.estado=1
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota<>2
    group BY
    	vc.id_venta,YEAR(c1.fecha), MONTH(c1.fecha)
    
    UNION
    
    # Los pagos manuales por regularización directa
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	sum(cdm.monto) as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual>0 and cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	venta_cronograma as vc
    on
    	(cdm.id_venta_cronograma>0 and cdm.id_venta_cronograma=vc.id_venta_cronograma)
    where
    	vc.id_venta=prventa
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	c1.id_tipo_cobranza_manual=3
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota<>2
    group BY
    	vc.id_venta,YEAR(c1.fecha), MONTH(c1.fecha)
    
    UNION
    
    # Los pagos manuales por regularización por planilla
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        sum(cdm.monto) as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual>0 and cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	venta_cronograma as vc
    on
    	(cdm.id_venta_cronograma>0 and cdm.id_venta_cronograma=vc.id_venta_cronograma)
    where
    	vc.id_venta=prventa
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	c1.id_tipo_cobranza_manual=4
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota<>2
    group BY
    	vc.id_venta,YEAR(c1.fecha), MONTH(c1.fecha)

    UNION
    
    # Los pagos manuales por regularización por judicial
	SELECT
		LAST_DAY(c1.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        sum(cdm.monto) as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	0 as monto_planilla
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual>0 and cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	venta_cronograma as vc
    on
    	(cdm.id_venta_cronograma>0 and cdm.id_venta_cronograma=vc.id_venta_cronograma)
    where
    	vc.id_venta=prventa
    and
    	c1.estado=1
    and
    	cdm.estado=1
   	and
    	c1.id_tipo_cobranza_manual=5
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota<>2
    group BY
    	vc.id_venta, YEAR(c1.fecha), MONTH(c1.fecha)
    
    UNION
    
    # Los pagos directos
    SELECT 
    	LAST_DAY(c2.fecha) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	sum(cd.monto) as monto_directo ,
    	GROUP_CONCAT(DISTINCT ccnt.alias) as identificador_directo ,
    	0 as monto_planilla
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_directa as c2
    on
    	(cd.id_cobranza_directa=c2.id_cobranza_directa)
    inner join
    	venta_cronograma as vc
    on
    	(cd.id_venta_cronograma=vc.id_venta_cronograma)
    inner join
    	cooperativa_cuenta as ccnt
    ON
    	c2.id_cooperativa_cuenta = ccnt.id_cooperativa_cuenta
    where
    	vc.id_venta=prventa
    and
    	cd.estado=1
    and
    	c2.estado=1
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota<>2
    group by
    	vc.id_venta,YEAR(c2.fecha), MONTH(c2.fecha)
    
    UNION
    
    # Los pagos por planilla
    SELECT 
    	LAST_DAY(cac.fecha_fin) as periodo,
    	0 as monto_cuota_anterior ,
    	0 as monto_cuota ,
        0 as monto_pago_manual ,
    	0 as monto_pago_manual_directo ,
        0 as monto_pago_manual_planilla ,
        0 as monto_pago_manual_judicial ,
    	0 as monto_directo ,
    	null as identificador_directo ,
    	sum(cd.monto) as monto_planilla
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_archivos_detalle as cad
    on
    	( cd.id_cobranza_archivos> 0 and cd.id_cobranza_archivos=cad.id_cobranza_detalle )
    inner join
    	cobranza_archivos_cabecera as cac
    on
    	( cad.id_cobranza=cac.id_cobranza )
    inner join
    	venta_cronograma as vc
    on
    	(cd.id_venta_cronograma>0 and cd.id_venta_cronograma=vc.id_venta_cronograma)
    where
    	vc.id_venta=prventa
    and
    	cd.estado=1
    and
    	cad.estado=1
    and
    	cac.estado=1
    and
    	vc.cng_estado<3
    and
    	vc.tipo_cuota<>2
    group by
    	vc.id_venta,YEAR(cac.fecha_fin), MONTH(cac.fecha_fin)
) as resultado
group by resultado.periodo
order by
resultado.periodo asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarclientecargoestado`(IN `prcargoestado` INT)
    NO SQL
update
cargo_estado
set
cstd_estado=0
where id_cargo_estado=prcargoestado$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmoduloxId`(IN `pidmodulo` INT)
    READS SQL DATA
SELECT mdl_nombre FROM modulo WHERE idmodulo = pidmodulo$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillacooperativa`()
    NO SQL
select
c.parametro as parametro,
c.valor as valor
from
cooperativa as c
where
c.estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmodulo`()
    READS SQL DATA
SELECT idmodulo,mdl_nombre FROM modulo$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadojuezcontar`(IN `pridjuzgadoinstancia` INT, IN `prjuzgadodistrito` VARCHAR(50) CHARSET utf8, IN `prjuzgadoinstancia` VARCHAR(50) CHARSET utf8, IN `prtipo` VARCHAR(20) CHARSET utf8, IN `prjuzgadojuez` VARCHAR(50) CHARSET utf8)
    NO SQL
select
    count(jj.id_juzgado_juez) as total
    from
    juzgado_juez as jj
    inner join juzgado_instancia as ji on
    jj.id_juzgado_instancia=ji.id_juzgado_instancia
    inner join juzgado_distrito as jd on
    ji.id_juzgado_distrito=jd.id_juzgado_distrito
    where
    jj.estado=1
    and
    ji.estado=1
    and
    jd.estado=1
    and
    (
        ( pridjuzgadoinstancia>0 and jj.id_juzgado_instancia=pridjuzgadoinstancia ) or
        ( pridjuzgadoinstancia=0 and ji.nombre like concat(prjuzgadoinstancia,'%') )
    )
    and
    jd.nombre like concat(prjuzgadodistrito,'%')
	and
    (
        (prtipo="") or 
        (
            if("JUEZ" like concat(prtipo,'%'), jj.id_tipo=1, null) or
            if("ESPECIALISTA" like concat(prtipo,'%'), jj.id_tipo=2, null)
        )
    )
    and
    jj.nombre like concat(prjuzgadojuez,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramaxcobrarpnpclientes`(IN `prsede` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
BEGIN

select
resultado.id_cliente as id_cliente,
resultado.cliente as cliente,
resultado.monto_pendiente as monto_pendiente
from
(
    select
    cl.idcliente as id_cliente,
    cl.clt_nombre as cliente,
    ROUND(SUM(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado),2) as monto_pendiente
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    where
    v.vnt_estado=1
    and
    v.id_tipopago=1
    and
    vg.cng_estado<>3
    and
    vg.tipo_cuota<>2
    and
    sd.id_sede=prsede
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    group by
    	cl.idcliente
union
    select
    cl.idcliente as id_cliente,
    cl.clt_nombre as cliente,
    ROUND(SUM(cg.monto_capital+cg.interes-cg.monto_pagado),2) as monto_pendiente
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    where
    c.estado=1
    and
    c.id_tipo_pago=1
    and
    cg.estado<>3
    and
    vg.tipo_cuota<>2
    and
    sd.id_sede=prsede
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    group by
		cl.idcliente
) as resultado
where
resultado.monto_pendiente > 0
group by resultado.id_cliente
order by resultado.cliente asc ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillascontar`(IN `prtipo` INT, IN `prrelevancia` INT, IN `prusuario` VARCHAR(50) CHARSET utf8)
    NO SQL
BEGIN

	select
    count(p.id_plantilla) as total
    FROM
    plantillas as p
    inner join plantillas_tipo as pt ON
    p.tipo_plantilla=pt.id_plantilla_tipo
    inner join usuario as u ON
    p.usuario=u.idusuario
	WHERE
    p.estado=1
    AND
    ( prtipo=0 or p.tipo_plantilla=prtipo )
    AND
    ( prrelevancia=0 or p.relevancia=prrelevancia )
    AND
    u.usr_nombre like concat(prusuario, '%') ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcobranzamanual`(IN `prcobranzamanual` INT)
    NO SQL
begin

	set @tipotransaccion = (
        select
        tipo_transaccion
        from
        cobranza_manual
        where
        id_cobranza_manual=prcobranzamanual
    ) ;


	set @transaccion = (
        select
        id_transaccion
        from
        cobranza_manual
        where
        id_cobranza_manual=prcobranzamanual
    ) ;

    update
    cobranza_manual as cm
    set
    cm.estado = 0
    where
    cm.id_cobranza_manual=prcobranzamanual;
        
	update
    cobranza_detalle as cd
    set
    cd.estado=0
    where
    cd.id_cobranza_manual=prcobranzamanual;
        
	if @tipotransaccion = 1 then 
        update credito_cronograma as cg
        inner join (	
            select
            cd1.id_credito_cronograma as id_credito_cronograma ,
            max(cm1.fecha) as fecha ,
            coalesce(ROUND(sum(if(cd1.estado=1,cd1.monto,0)), 2),0) as monto
            from
            cobranza_detalle as cd1
            inner join cobranza_manual as cm1 on
            cd1.id_cobranza_manual = cm1.id_cobranza_manual
            group by
            cd1.id_credito_cronograma
        ) as _cobranza on
        cg.id_credito_cronograma = _cobranza.id_credito_cronograma
        set
        cg.monto_pagado = _cobranza.monto ,
        cg.fecha_cancelacion = if(_cobranza.monto= ROUND(cg.monto_capital+cg.monto_interes+cg.interes,2), _cobranza.fecha, null) ,
        cg.estado = if(_cobranza.monto=ROUND(cg.monto_capital+cg.monto_interes+cg.interes,2), 2, 1)
        where
        cg.estado<>3
        and
        cg.id_credito = prtransaccion ;
        
	elseif @tipotransaccion = 2 then 
        
        update venta_cronograma as vg
        inner join (
            select
            cd1.id_venta_cronograma as id_venta_cronograma ,
            max(cm1.fecha) as fecha ,
            coalesce(ROUND(sum(if(cd1.estado=1,cd1.monto,0)), 2),0) as monto
            from
            cobranza_detalle as cd1
            inner join cobranza_manual as cm1 on
            cd1.id_cobranza_manual = cm1.id_cobranza_manual
            group by
            cd1.id_venta_cronograma
        ) as _cobranza on
        vg.id_venta_cronograma = _cobranza.id_venta_cronograma
        set
        vg.cng_monto_pagado = _cobranza.monto ,
        vg.cng_fecha_cancelacion = if(_cobranza.monto= ROUND(vg.cng_monto_cuota+vg.cng_interes,2), _cobranza.fecha, null) ,
        vg.cng_estado = if(_cobranza.monto= ROUND(vg.cng_monto_cuota+vg.cng_interes,2), 2, 1)
        where
        vg.cng_estado<>3
        and
        vg.id_venta = prtransaccion ;
	end if;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadojuez`(IN `pridjuzgadoinstancia` INT, IN `prjuzgadodistrito` VARCHAR(50) CHARSET utf8, IN `prjuzgadoinstancia` VARCHAR(50) CHARSET utf8, IN `prtipo` VARCHAR(20) CHARSET utf8, IN `prjuzgadojuez` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;
    
    select
    jj.id_juzgado_juez as id_juzgado_juez,
    ji.id_juzgado_instancia as id_juzgado_instancia,
    jd.id_juzgado_distrito as id_juzgado_distrito,
    jj.id_tipo as id_tipo,
    case jj.id_tipo
    when 1 then 'Juez'
    when 2 then 'Especialista'
    end as tipo,
    jd.nombre as juzgado_distrito,
    ji.nombre as juzgado_instancia,
    jj.nombre as juzgado_juez
    from
    juzgado_juez as jj
    inner join juzgado_instancia as ji on
    jj.id_juzgado_instancia=ji.id_juzgado_instancia
    inner join juzgado_distrito as jd on
    ji.id_juzgado_distrito=jd.id_juzgado_distrito
    where
    jj.estado=1
    and
    ji.estado=1
    and
    jd.estado=1
    and
    (
        ( pridjuzgadoinstancia>0 and jj.id_juzgado_instancia=pridjuzgadoinstancia ) or
        ( pridjuzgadoinstancia=0 and ji.nombre like concat(prjuzgadoinstancia,'%') )
    )
    and
    jd.nombre like concat(prjuzgadodistrito,'%')
	and
    (
        (prtipo="") or 
        (
            if("JUEZ" like concat(prtipo,'%'), jj.id_tipo=1, null) or
            if("ESPECIALISTA" like concat(prtipo,'%'), jj.id_tipo=2, null)
        )
    )
    and
    jj.nombre like concat(prjuzgadojuez,'%')
    order by jd.nombre asc, jj.nombre asc
    limit IP, TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantilladireccionddjj`()
    NO SQL
SELECT
if(
    count(distinct d.id_cooperativa_direccion) >1,
   	GROUP_CONCAT(
        concat(d.direccion,
        ", distrito de ", CONCAT(UCASE(LEFT(dt.dst_nombre, 1)), LCASE(SUBSTRING(dt.dst_nombre, 2))),
        ", provincia de ", CONCAT(UCASE(LEFT(p.prv_nombre, 1)), LCASE(SUBSTRING(p.prv_nombre, 2))),
        ", departamento de ", CONCAT(UCASE(LEFT(dp.dpt_nombre, 1)), LCASE(SUBSTRING(dp.dpt_nombre, 2))) )
        SEPARATOR " y/o " ),
        concat(d.direccion,
        ", distrito de ", CONCAT(UCASE(LEFT(dt.dst_nombre, 1)), LCASE(SUBSTRING(dt.dst_nombre, 2))),
        ", provincia de ", CONCAT(UCASE(LEFT(p.prv_nombre, 1)), LCASE(SUBSTRING(p.prv_nombre, 2))),
        ", departamento de ", CONCAT(UCASE(LEFT(dp.dpt_nombre, 1)), LCASE(SUBSTRING(dp.dpt_nombre, 2))) )
) as direccion_ddjj,
if(
    count(distinct d.id_cooperativa_direccion) >1,
   	GROUP_CONCAT(CONCAT(UCASE(LEFT(dt.dst_nombre, 1)), LCASE(SUBSTRING(dt.dst_nombre, 2))) SEPARATOR " y/o "),
    CONCAT(UCASE(LEFT(dt.dst_nombre, 1)), LCASE(SUBSTRING(dt.dst_nombre, 2)))
) as distrito_ddjj
from
cooperativa_direccion as d
inner join distrito as dt on
d.id_distrito=dt.id_distrito
inner join provincia as p on
dt.id_provincia=p.id_provincia
inner join departamento as dp on
p.id_departamento=dp.id_departamento
where
d.estado=1
and
d.relevancia=2$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialcontarV2`(IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
begin

    select
    count(distinct pj.id_proceso_judicial) as total
    from
    proceso_judicial as pj
    left join 
    (
        SELECT pjd1.*
        FROM proceso_judicial_detalle as pjd1
        WHERE
        pjd1.fecha = (SELECT pjd2.fecha
                     FROM proceso_judicial_detalle as pjd2
                     WHERE pjd2.id_proceso = pjd1.id_proceso            
                     ORDER BY pjd2.fecha DESC
                     LIMIT 1)
    ) as pjd on
    pj.id_proceso_judicial=pjd.id_proceso
    left join 
    (
        SELECT *
        FROM proceso_judicial_detalle as pjd12
        WHERE
        pjd12.id_trabajador>0
        and
        pjd12.fecha <= (SELECT pjd22.fecha
                     FROM proceso_judicial_detalle as pjd22
                     WHERE pjd22.id_proceso <= pjd12.id_proceso
                     ORDER BY pjd22.fecha DESC
                     LIMIT 1)
    ) as pjd2 on
    pj.id_proceso_judicial=pjd2.id_proceso
    inner join juzgado_instancia as ij on
    pj.id_instancia_judicial=ij.id_juzgado_instancia
    inner join juzgado_distrito as dj on
    ij.id_juzgado_distrito = dj.id_juzgado_distrito
    left join proceso_judicial_documento as dcm on
    pjd.tipo_documento = dcm.id_proceso_judicial_documento
    inner join cliente as c on
    pj.id_cliente=c.idcliente
    where
    (
        (prfechainicio is null and prfechafin is null) or
        (pj.fecha_inicio BETWEEN prfechainicio and prfechafin)
    )
    and
    (
        (prestado=-3 and pj.estado<3) or
        (prestado=-2 and pj.estado=4) or
        (prestado=-1 and (pj.estado<3 and pj.fecha_inicio_pago is null and pj.fecha_inicio_pago is null and (dcm.id_proceso_judicial_documento<4 or dcm.id_proceso_judicial_documento>=6) ) ) or 
        (prestado=0 and (pj.estado<3 and pj.fecha_inicio_pago is not null) ) or 
        (prestado=1 and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) )
        or
        (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=prestado)
    ) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialdetallexId`(IN `prproceso` INT)
    NO SQL
select
pjd.id_proceso_judicial_detalle as id,
pjd.tipo_documento as id_tipo_documento,
dcm.nombre as tipo_documento,
pjd.fecha as fecha,
pjd.numero as numero,
pjd.sumilla as sumilla,
pjd.archivo as archivo,
pjd.id_trabajador as id_trabajador,
v.vnd_nombre as trabajador,
pjd.id_estado as id_estado,
est.nombre as estado,
pjd.comentarios as comentarios
from
proceso_judicial_detalle as pjd
inner join proceso_judicial_estado as est on
pjd.id_estado=est.id_proceso_judicial_estado
left join proceso_judicial_documento as dcm on
pjd.tipo_documento=dcm.id_proceso_judicial_documento
left join vendedor as v on
pjd.id_trabajador=v.idvendedor
where
pjd.id_proceso_judicial_detalle = prproceso$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmarca2`(IN `prtipo` VARCHAR(45) CHARSET utf8, IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

select
m.id_marca,
t.tprd_nombre,
m.mrc_nombre
from marca m
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
where
t.estado=1
and
m.estado = 1
and
(prtipo is null or t.tprd_nombre LIKE CONCAT('%',prtipo,'%'))
and
(prnombre is null or m.mrc_nombre LIKE CONCAT('%',prnombre,'%'))
order by m.mrc_nombre
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarliquidacion`(IN `prliquidacion` INT)
    NO SQL
UPDATE
liquidaciones
set
estado=0
where
id_liquidacion=prliquidacion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listardepartamentocontar`(IN `prnombre` VARCHAR(40))
    READS SQL DATA
select count(*) as total
from
departamento
where
dpt_estado=1
and
(prnombre is null or dpt_nombre like CONCAT('%',prnombre,'%'))
order by
dpt_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialanteriorxId`(IN `prproceso` INT)
    NO SQL
begin

select
pj.id_proceso_judicial as id,
pj.expediente as expediente,
dj.id_juzgado_distrito as id_juzgado_distrito,
dj.nombre as juzgado_distrito,
ij.id_juzgado_instancia as id_juzgado_instancia,
ij.nombre as juzgado_instancia,
pj.juez as juez,
pj.especialista as especialista,
pj.fecha_inicio as fecha_inicio,
pj.sumilla as sumilla,
case
when pj.id_credito>0 then 1
when pj.id_venta>0 then 2
end as id_tipo,
case
when pj.id_credito>0 then 'Préstamo'
when pj.id_venta>0 then 'Venta'
end as tipo,
case
when pj.id_credito>0 then CONCAT(c.codigo,'-',LPAD(c.numero,3,'0'))
when pj.id_venta>0 then CONCAT(t.tln_serie,"-",t.tln_numero)
end as codigo,
case
when pj.id_credito>0 then c1.idcliente
when pj.id_venta>0 then c2.idcliente
end as id_cliente,
case
when pj.id_credito>0 then c1.clt_dni
when pj.id_venta>0 then c2.clt_dni
end as cliente_dni,
case
when pj.id_credito>0 then c1.clt_nombre
when pj.id_venta>0 then c2.clt_nombre
end as cliente_documento,
pj.numero_cuotas as numero_cuotas,
pj.total as total,
COALESCE(ROUND(pj.total/pj.numero_cuotas,2),0) as monto_cuota,
pj.estado as estado
from
proceso_judicial_transferencia as pjt
inner join proceso_judicial as pj on
pjt.id_proceso_antiguo=pj.id_proceso_judicial
inner join juzgado_instancia as ij on
pj.id_instancia_judicial=ij.id_juzgado_instancia
inner join juzgado_distrito as dj on
ij.id_juzgado_distrito=dj.id_juzgado_distrito
left join
creditos as c on
pj.id_credito=c.id_credito
left join cliente as c1 on
c.id_cliente=c1.idcliente
left join venta as v on
pj.id_venta=v.idventa
left join talonario as t on
v.id_talonario=t.id_talonario
left join cliente as c2 on
v.id_cliente=c2.idcliente
where
pjt.id_proceso_nuevo=prproceso;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarperfilxId`(IN `prid` INT)
    READS SQL DATA
SELECT
nombre ,
permisos
FROM
perfil 
WHERE
id_perfil = prid
and
estado = 1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicial`(IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdistritojudicial` VARCHAR(50) CHARSET utf8, IN `prjuzgado` VARCHAR(50) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `prorden` VARCHAR(50) CHARSET utf8)
    NO SQL
begin

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VEXPEDIENTE varchar(255);
DECLARE VDISTRITO varchar(255);
DECLARE VJUZGADO varchar(255);
DECLARE VDNI varchar(255);
DECLARE VNOMBRE varchar(255);
DECLARE VFECHA varchar(255);
DECLARE VESTADO varchar(255);

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SET VEXPEDIENTE = concat("(pj.expediente like CONCAT('", prexpediente,"', '%')) ");
SET VDISTRITO = concat(" AND (dj.nombre like CONCAT('", prdistritojudicial,"', '%')) ");
SET VJUZGADO = concat(" AND (ij.nombre like CONCAT('", prjuzgado,"', '%')) ");

SET VDNI = concat(" AND
                            (
                                ( pj.id_venta>0 and c2.clt_dni like concat('",prdni,"','%') ) or
                                ( pj.id_credito>0 and c1.clt_dni like concat('",prdni,"','%') )
                            )
                         ");

SET VNOMBRE = concat(" AND
                            (
                                ( pj.id_venta>0 and c2.clt_nombre like concat('",prnombre,"','%') ) or
                                ( pj.id_credito>0 and c1.clt_nombre like concat('",prnombre,"','%') )
                            )
                         ");

IF ( isnull(prfechainicio) and isnull(prfechafin) ) then set VFECHA="";
ELSE SET VFECHA=concat(" and (DATE(pj.fecha_inicio) between '",prfechainicio,"' and '",prfechafin,"') ");
END IF;

IF prestado=-3 then set VESTADO=" and pj.estado<3 ";
ELSEIF prestado=-2 then set VESTADO=" and pj.estado=4 ";
ELSEIF prestado=-1 then SET VESTADO=" and (pj.estado<3 and pj.fecha_inicio_pago is null) ";
ELSEIF prestado=0 then SET VESTADO=" and (pj.estado<3 and pj.fecha_inicio_pago is not null) ";
ELSEIF prestado=1 then SET VESTADO=" and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ";
ELSE SET VESTADO=concat(" and (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=",prestado,") ");
END IF;

set @SQLSTATEMENT = 
CONCAT("
select
pj.id_proceso_judicial as 'id',
pj.expediente as 'expediente',
dj.id_juzgado_distrito as id_distrito,
dj.nombre as distrito,
ij.nombre as 'juzgado',
vnd.vnd_nombre as 'vendedor',
pj.fecha_inicio as 'fecha_inicio',
pj.sumilla as 'sumilla',
case
when pj.id_credito>0 then 1
when pj.id_venta>0 then 2
end as 'id_tipo',
case
when pj.id_credito>0 then 'Préstamo'
when pj.id_venta>0 then 'Venta'
end as 'tipo',
case
when pj.id_credito>0 then c1.idcliente
when pj.id_venta>0 then c2.idcliente
end as 'id_cliente',
case
when pj.id_credito>0 then c1.clt_dni
when pj.id_venta>0 then c2.clt_dni
end as 'cliente_dni',
case
when pj.id_credito>0 then c1.clt_nombre
when pj.id_venta>0 then c2.clt_nombre
end as 'cliente_nombre',
pjd.tipo_documento as 'ultimo_documento',
case
when pj.fecha_inicio_pago is null then
    case
    when dcm.id_proceso_judicial_documento is null then 1
    else dcm.id_proceso_judicial_documento
    end
else 0
end as 'id_tipo_documento',
case
when pjd.id_proceso_judicial_detalle is null then pj.fecha_inicio
else pjd.fecha
end as 'fecha_ultimo_documento',
case
when pjd.id_proceso_judicial_detalle is null then DATEDIFF(CURDATE(),pj.fecha_inicio)
else DATEDIFF(CURDATE(),pjd.fecha)
end as 'fecha_ultimo_documento_diferencia',
pj.total as 'total',
pj.estado as 'estado'
from
proceso_judicial as pj
left join 
(
    SELECT pjd1.*
    FROM proceso_judicial_detalle as pjd1
    WHERE
    pjd1.fecha = (SELECT pjd2.fecha
                 FROM proceso_judicial_detalle as pjd2
                 WHERE pjd2.id_proceso = pjd1.id_proceso            
                 ORDER BY pjd2.fecha DESC
                 LIMIT 1)
) as pjd on
pj.id_proceso_judicial=pjd.id_proceso
left join 
(
    SELECT *
    FROM proceso_judicial_detalle as pjd12
    WHERE
    pjd12.id_trabajador>0
    and
    pjd12.id_proceso=pj.id_proceso
    and
    pjd12.fecha <= (SELECT pjd22.fecha
                 FROM proceso_judicial_detalle as pjd22
                 WHERE pjd22.id_proceso = pjd12.id_proceso
                 ORDER BY pjd22.fecha DESC
                 LIMIT 1)
) as pjd2 on
pj.id_proceso_judicial=pjd2.id_proceso
inner join juzgado_instancia as ij on
pj.id_instancia_judicial=ij.id_juzgado_instancia
inner join juzgado_distrito as dj on
ij.id_juzgado_distrito = dj.id_juzgado_distrito
left join vendedor as vnd on
pjd2.id_trabajador=vnd.idvendedor
left join proceso_judicial_documento as dcm on
pjd.tipo_documento = dcm.id_proceso_judicial_documento
left join creditos as c on
pj.id_credito=c.id_credito
left join cliente as c1 on
c.id_cliente=c1.idcliente
left join venta as v on
pj.id_venta=v.idventa
left join talonario as t on
v.id_talonario=t.id_talonario
left join cliente as c2 on
v.id_cliente=c2.idcliente
where ",
VEXPEDIENTE ,
VDISTRITO ,
VJUZGADO ,
VDNI ,
VNOMBRE ,
VFECHA ,
VESTADO ,
" group by pj.id_proceso_judicial 
order by ", prorden, ", pjd.fecha desc"
" limit ",IP,",",TP);
       
PREPARE stmt FROM @SQLStatement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
       
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillaclientetelefono`(IN `prcliente` INT)
    NO SQL
SELECT
if(
    (
        select
        ct.id_tipo
        from
        cliente_telefono as ct
        where
        ct.tlf_relevancia=1
        and
        ct.tlf_estado=1
        and
        ct.id_cliente=prcliente
    )=1,
    (
        select
        ct2.tlf_numero
		from
        cliente_telefono as ct2
        where
        ct2.tlf_relevancia=1
        and
        ct2.tlf_estado=1
        and
        ct2.id_cliente=prcliente
     ) ,
  	(
        select
        ct3.tlf_numero
		from
        cliente_telefono as ct3
        where
        ct3.tlf_estado=1
        and
        ct3.id_cliente=prcliente
        order by
        ct3.idcliente_telefono desc
        limit 1
    )
) as telefono
from
cliente_telefono as c
group by telefono$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarpresupuestogarante`(IN `prpresupuesto` INT)
    NO SQL
select
pg.id_cliente as id_cliente,
c.clt_nombre as cliente,
pg.pdf_autorizacion as pdf_autorizacion,
pg.pdf_ddjj as pdf_ddjj,
pg.pdf_carta as pdf_carta,
pg.pdf_compromiso as pdf_compromiso
from
presupuesto_garante as pg
inner join cliente as c on
pg.id_cliente=c.idcliente
WHERE
pg.id_presupuesto=prpresupuesto$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarinstitucion`()
    READS SQL DATA
SELECT inst.id_institucion, inst.inst_nombre, inst.isnt_abreviatura,
inst.isnt_representante_legal, dist.dst_nombre, inst.inst_direccion,
inst.inst_telefono, inst.inst_codigo_cooperativa
FROM institucion inst
INNER JOIN distrito dist ON inst.id_distrito= dist.id_distrito
WHERE inst.inst_estado=1
group by inst.id_institucion
order by inst.inst_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcooperativacuenta`(IN `prbanco` INT, IN `prtitular` VARCHAR(100) CHARSET utf8, IN `prnumero` VARCHAR(20) CHARSET utf8, IN `prcci` VARCHAR(20) CHARSET utf8, IN `pralias` VARCHAR(100) CHARSET utf8)
    NO SQL
insert into
cooperativa_cuenta
set
id_banco=prbanco,
titular=prtitular,
numero=prnumero,
cci=prcci,
alias=pralias$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditospagostotalescuotas`(IN `prcredito` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
select 
    resultado.id_cobranza_detalle as id_cobranza_detalle ,
    round(sum(resultado.monto_total),2) as total_pagos
from
(       
    # Los pagos manuales
	SELECT
    	cdm.id_cobranza_detalle as id_cobranza_detalle ,
		sum(cdm.monto) as monto_total
    from
    	cobranza_detalle as cdm
    inner join
    	cobranza_manual as c1
    on
    	(cdm.id_cobranza_manual>0 and cdm.id_cobranza_manual=c1.id_cobranza_manual)
    inner join
    	credito_cronograma as cc
    on
    (cdm.id_credito_cronograma>0 and cdm.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cc.id_credito=prcredito
    and
    	c1.estado=1
    and
    	cdm.estado=1
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    and
    	( prfechainicio is null or c1.fecha > prfechainicio )
    and
    	( prfechafin is null or c1.fecha < prfechafin )
    group BY
    	cdm.id_cobranza_detalle

    UNION
    
    # Los pagos directos
    SELECT
    	cd.id_cobranza_detalle as id_cobranza_detalle ,
    	sum(cd.monto) as monto_total
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_directa as c2
    on
    	(cd.id_cobranza_directa> 0 and cd.id_cobranza_directa=c2.id_cobranza_directa)
    inner join
    	credito_cronograma as cc
    on
    	(cd.id_credito_cronograma>0 and cd.id_credito_cronograma=cc.id_credito_cronograma)
   	inner join
    	cooperativa_cuenta as ccnt
    ON
    	c2.id_cooperativa_cuenta = ccnt.id_cooperativa_cuenta
    where
    	cd.estado=1
    and
    	c2.estado=1
    AND
    	cc.id_credito=prcredito
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    and
    	( prfechainicio is null or c2.fecha_referencia > prfechainicio )
    and
    	( prfechafin is null or c2.fecha_referencia < prfechafin )
	GROUP by
    	cd.id_cobranza_detalle
    
    UNION
    
    # Los pagos por planilla
    SELECT 
    	cd.id_cobranza_detalle as id_cobranza_detalle ,
    	sum(cd.monto) as monto_total
    FROM
    	cobranza_detalle as cd
    inner join
    	cobranza_archivos_detalle as cad
    on
    	( cd.id_cobranza_archivos> 0 and cd.id_cobranza_archivos=cad.id_cobranza_detalle )
    inner join
    	cobranza_archivos_cabecera as cac
    on
    	( cad.id_cobranza=cac.id_cobranza )
    inner join
    	credito_cronograma as cc
    on
    	(cd.id_credito_cronograma>0 and cd.id_credito_cronograma=cc.id_credito_cronograma)
    where
    	cd.estado=1
    and
    	cad.estado=1
    and
    	cac.estado=1
    and
    	cc.id_credito=prcredito
    and
    	cc.tipo_cuota<>2
    and
    	cc.estado<3
    and
    	( prfechainicio is null or cac.fecha_fin > prfechainicio )
    and
    	( prfechafin is null or cac.fecha_fin < prfechafin )
    group by
    	cd.id_cobranza_detalle
) as resultado
group by
resultado.id_cobranza_detalle$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialdistritos`(IN `prdistritojudicial` VARCHAR(50) CHARSET utf8, IN `prjuzgado` VARCHAR(50) CHARSET utf8, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
begin

    select
    dj.id_juzgado_distrito as id_distrito,
    dj.nombre as distrito
    from
    proceso_judicial as pj
    left join 
    (
        SELECT pjd1.*
        FROM proceso_judicial_detalle as pjd1
        WHERE
        pjd1.estado = 1
        and
        pjd1.fecha = (SELECT pjd2.fecha
                     FROM proceso_judicial_detalle as pjd2
                     WHERE pjd2.id_proceso = pjd1.id_proceso            				and pjd2.estado = 1
                     ORDER BY pjd2.fecha DESC
                     LIMIT 1)
    ) as pjd on
    pj.id_proceso_judicial=pjd.id_proceso
    left join 
    (
        SELECT *
        FROM proceso_judicial_detalle as pjd12
        WHERE
        pjd12.id_trabajador>0
        and
        pjd12.estado = 1
        and
        pjd12.fecha <= (SELECT pjd22.fecha
                     FROM proceso_judicial_detalle as pjd22
                     WHERE pjd22.id_proceso <= pjd12.id_proceso
                     and pjd22.estado = 1
                     ORDER BY pjd22.fecha DESC
                     LIMIT 1)
    ) as pjd2 on
    pj.id_proceso_judicial=pjd2.id_proceso
    inner join juzgado_instancia as ij on
    pj.id_instancia_judicial=ij.id_juzgado_instancia
    inner join juzgado_distrito as dj on
    ij.id_juzgado_distrito = dj.id_juzgado_distrito
    left join proceso_judicial_documento as dcm on
    pjd.tipo_documento = dcm.id_proceso_judicial_documento
    inner join cliente as c on
    pj.id_cliente=c.idcliente
    where
    pj.expediente like concat('%',prexpediente,"%")
    AND
    dj.nombre like CONCAT(prdistritojudicial,'%')
    AND
    ij.nombre like CONCAT(prjuzgado,'%')
    and
    c.clt_dni like concat(prdni,"%")
    and
    c.clt_nombre like concat('%',prnombre,"%")
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (pj.fecha_inicio BETWEEN prfechainicio and prfechafin)
    )
    and
    (
        (prestado=-3 and pj.estado<3) or
        (prestado=-2 and pj.estado=4) or
        (prestado=-1 and (pj.estado<3 and pj.fecha_inicio_pago is null and pj.fecha_inicio_pago is null and (dcm.id_proceso_judicial_documento<4 or dcm.id_proceso_judicial_documento>=6)) ) or 
        (prestado=0 and (pj.estado<3 and pj.fecha_inicio_pago is not null) ) or 
        (prestado=1 and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ) or
        (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=prestado)
    )
    group by ij.id_juzgado_distrito;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmarcaxId`(IN `prid` INT)
    READS SQL DATA
select
m.id_marca as id,
m.mrc_nombre as nombre,
t.id_tipo_producto as id_tipo,
t.tprd_nombre as nombre_tipo
from marca as m
inner join tipo_producto as t on
m.id_tipo_producto=t.id_tipo_producto
where
m.id_marca=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialV2`(IN `pridinstancia` INT, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdni` VARCHAR(30), IN `prnombre` VARCHAR(8), IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT, IN `prorden` VARCHAR(40) CHARSET utf8)
    NO SQL
begin

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VEXPEDIENTE varchar(300);
DECLARE VDNI varchar(300);
DECLARE VNOMBRE varchar(300);
DECLARE VFECHA varchar(300);
DECLARE VESTADO varchar(300);

SET VEXPEDIENTE = concat(" and (pj.expediente like CONCAT('", prexpediente,"', '%')) ");

SET VDNI = concat(" AND\r\n                            (\r\n                                ( pj.id_venta>0 and c2.clt_dni like concat('",prdni,"','%') ) or\r\n                                ( pj.id_credito>0 and c1.clt_dni like concat('",prdni,"','%') )\r\n                            )\r\n                         ");

SET VNOMBRE = concat(" AND\r\n                            (\r\n                                ( pj.id_venta>0 and c2.clt_nombre like concat('",prnombre,"','%') ) or\r\n                                ( pj.id_credito>0 and c1.clt_nombre like concat('",prnombre,"','%') )\r\n                            )\r\n                         ");

IF ( isnull(prfechainicio) and isnull(prfechafin) ) then set VFECHA="";
ELSE SET VFECHA=concat(" and (DATE(pj.fecha_inicio) between '",prfechainicio,"' and '",prfechafin,"') ");
END IF;

IF prestado=-3 then set VESTADO=" and pj.estado<3 ";
ELSEIF prestado=-2 then set VESTADO=" and pj.estado=4 ";
ELSEIF prestado=-1 then SET VESTADO=" and (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento<4) ";
ELSEIF prestado=0 then SET VESTADO=" and (pj.estado<3 and pj.fecha_inicio_pago is not null) ";
ELSEIF prestado=1 then SET VESTADO=" and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ";
ELSE SET VESTADO=concat(" and (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=",prestado,") ");
END IF;

set @SQLSTATEMENT = 
CONCAT("\r\nselect\r\npj.id_proceso_judicial as 'id',\r\npj.expediente as 'expediente',\r\ndj.id_juzgado_distrito as id_distrito,\r\npj.id_instancia_judicial as id_instancia,\r\ndj.nombre as distrito,\r\nij.nombre as 'juzgado',\r\nvnd.vnd_nombre as 'vendedor',\r\npj.fecha_inicio as 'fecha_inicio',\r\npj.sumilla as 'sumilla',\r\ncase\r\nwhen pj.id_credito>0 then 1\r\nwhen pj.id_venta>0 then 2\r\nend as 'id_tipo',\r\ncase\r\nwhen pj.id_credito>0 then 'Préstamo'\r\nwhen pj.id_venta>0 then 'Venta'\r\nend as 'tipo',\r\ncase\r\nwhen pj.id_credito>0 then c1.idcliente\r\nwhen pj.id_venta>0 then c2.idcliente\r\nend as 'id_cliente',\r\ncase\r\nwhen pj.id_credito>0 then c1.clt_dni\r\nwhen pj.id_venta>0 then c2.clt_dni\r\nend as 'cliente_dni',\r\ncase\r\nwhen pj.id_credito>0 then c1.clt_nombre\r\nwhen pj.id_venta>0 then c2.clt_nombre\r\nend as 'cliente_nombre',\r\npjd.tipo_documento as 'ultimo_documento',\r\ncase\r\nwhen pj.fecha_inicio_pago is null then\r\n    case\r\n    when dcm.id_proceso_judicial_documento is null then 1\r\n    else dcm.id_proceso_judicial_documento\r\n    end\r\nelse 0\r\nend as 'id_tipo_documento',\r\ncase\r\nwhen pjd.id_proceso_judicial_detalle is null then pj.fecha_inicio\r\nelse pjd.fecha\r\nend as 'fecha_ultimo_documento',\r\ncase\r\nwhen pjd.id_proceso_judicial_detalle is null then DATEDIFF(CURDATE(),pj.fecha_inicio)\r\nelse DATEDIFF(CURDATE(),pjd.fecha)\r\nend as 'fecha_ultimo_documento_diferencia',\r\npj.total as 'total',\r\npj.estado as 'estado',\r\ncount(distinct pjdet.id_proceso_judicial_detalle) as total_documentos\r\nfrom\r\nproceso_judicial as pj\r\nleft join proceso_judicial_detalle as pjdet on\r\n(pj.id_proceso_judicial = pjdet.id_proceso and pjdet.estado=1)\r\nleft join \r\n(\r\n    SELECT pjd1.*\r\n    FROM proceso_judicial_detalle as pjd1\r\n    WHERE\r\n    pjd1.estado = 1\r\n    and\r\n    pjd1.fecha = (SELECT pjd2.fecha\r\n                 FROM proceso_judicial_detalle as pjd2\r\n                 WHERE pjd2.id_proceso = pjd1.id_proceso            \r\n                 ORDER BY pjd2.fecha DESC\r\n                 LIMIT 1)\r\n) as pjd on\r\npj.id_proceso_judicial=pjd.id_proceso\r\nleft join \r\n(\r\n    SELECT *\r\n    FROM proceso_judicial_detalle as pjd12\r\n    WHERE\r\n    pjd12.id_trabajador>0\r\n    and\r\n    pjd12.estado = 1\r\n    and\r\n    pjd12.fecha = (SELECT pjd22.fecha\r\n                    FROM proceso_judicial_detalle as pjd22\r\n                    WHERE\r\n                    pjd22.id_proceso = pjd12.id_proceso\r\n                    and\r\n                    pjd22.id_trabajador>0\r\n                    ORDER BY pjd22.fecha DESC\r\n                    LIMIT 1)\r\n) as pjd2 on\r\npj.id_proceso_judicial=pjd2.id_proceso\r\ninner join juzgado_instancia as ij on\r\npj.id_instancia_judicial=ij.id_juzgado_instancia\r\ninner join juzgado_distrito as dj on\r\nij.id_juzgado_distrito = dj.id_juzgado_distrito\r\nleft join vendedor as vnd on\r\npjd2.id_trabajador=vnd.idvendedor\r\nleft join proceso_judicial_documento as dcm on\r\npjd.tipo_documento = dcm.id_proceso_judicial_documento\r\nleft join creditos as c on\r\npj.id_credito=c.id_credito\r\nleft join cliente as c1 on\r\nc.id_cliente=c1.idcliente\r\nleft join venta as v on\r\npj.id_venta=v.idventa\r\nleft join talonario as t on\r\nv.id_talonario=t.id_talonario\r\nleft join cliente as c2 on\r\nv.id_cliente=c2.idcliente\r\nwhere \r\npj.id_instancia_judicial=",pridinstancia,
VEXPEDIENTE ,
VDNI ,
VNOMBRE ,
VFECHA ,
VESTADO ,
" group by pj.id_proceso_judicial \r\norder by ", prorden, ", pjd.fecha desc");
       
PREPARE stmt FROM @SQLStatement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
       
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillacooperativapresidente`()
    NO SQL
select
t.documento as documento,
t.nombre as nombre,
concat(t.direccion,", distrito de ", dt.dst_nombre, ", provincia de ", p.prv_nombre, ", departamento de ", dp.dpt_nombre) as direccion
from
trabajadores as t
inner join distrito as dt on
t.distrito=dt.id_distrito
inner join provincia as p on
dt.id_provincia=p.id_provincia
inner join departamento as dp on
p.id_departamento=dp.id_departamento
where
t.id_trabajador in
(
	SELECT
    c.valor
    from
    cooperativa as c
    WHERE
    c.estado=1
    and
    c.parametro="presidente"
)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarvendedor`(IN `prid` INT, IN `prdocumento` VARCHAR(10) CHARSET utf8, IN `prnombre` VARCHAR(80) CHARSET utf8, IN `prcargo` VARCHAR(50) CHARSET utf8, IN `premail` VARCHAR(45) CHARSET utf8, IN `prcomision` FLOAT)
    MODIFIES SQL DATA
update
vendedor
set
vnd_dni=prdocumento,
vnd_nombre=prnombre,
id_cargo=prcargo,
vnd_email=premail,
vnd_comision=prcomision
where
idvendedor=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantilladirecciontransaccion`()
    NO SQL
select
concat(d.direccion,
", distrito de ", CONCAT(UCASE(LEFT(dt.dst_nombre, 1)), SUBSTRING(dt.dst_nombre, 2)),
", provincia de ", CONCAT(UCASE(LEFT(p.prv_nombre, 1)), SUBSTRING(p.prv_nombre, 2)),
", departamento de ", CONCAT(UCASE(LEFT(dp.dpt_nombre, 1)), SUBSTRING(dp.dpt_nombre, 2))      
      
      
) as direccion,
d.principal as id_tipo,
case d.principal
when 1 then "Principal"
when 2 then "Secundarias"
end as tipo ,
d.numero_orden as numero_orden
from
cooperativa_direccion as d
inner join distrito as dt on
d.id_distrito=dt.id_distrito
inner join provincia as p on
dt.id_provincia=p.id_provincia
inner join departamento as dp on
p.id_departamento=dp.id_departamento
where
d.estado=1
and
d.numero_orden>0
order by d.id_cooperativa_direccion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialdistritoscontar`(IN `prdistritojudicial` VARCHAR(50) CHARSET utf8, IN `prjuzgado` VARCHAR(50) CHARSET utf8, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
begin

    select
    count( distinct dj.id_juzgado_distrito) as total
    from
    proceso_judicial as pj
    left join 
    (
        SELECT pjd1.*
        FROM proceso_judicial_detalle as pjd1
        WHERE
        pjd1.fecha = (SELECT pjd2.fecha
                     FROM proceso_judicial_detalle as pjd2
                     WHERE pjd2.id_proceso = pjd1.id_proceso            
                     ORDER BY pjd2.fecha DESC
                     LIMIT 1)
    ) as pjd on
    pj.id_proceso_judicial=pjd.id_proceso
    left join 
    (
        SELECT *
        FROM proceso_judicial_detalle as pjd12
        WHERE
        pjd12.id_trabajador>0
        and
        pjd12.fecha <= (SELECT pjd22.fecha
                     FROM proceso_judicial_detalle as pjd22
                     WHERE pjd22.id_proceso <= pjd12.id_proceso
                     ORDER BY pjd22.fecha DESC
                     LIMIT 1)
    ) as pjd2 on
    pj.id_proceso_judicial=pjd2.id_proceso
    inner join juzgado_instancia as ij on
    pj.id_instancia_judicial=ij.id_juzgado_instancia
    inner join juzgado_distrito as dj on
    ij.id_juzgado_distrito = dj.id_juzgado_distrito
    left join proceso_judicial_documento as dcm on
    pjd.tipo_documento = dcm.id_proceso_judicial_documento
    inner join cliente as c on
    pj.id_cliente=c.idcliente
    where
    pj.expediente like concat("%",prexpediente,"%")
    AND
    dj.nombre like CONCAT(prdistritojudicial,'%')
    AND
    ij.nombre like CONCAT(prjuzgado,'%')
    and
    c.clt_dni like concat(prdni,"%")
    and
    c.clt_nombre like concat("%",prnombre,"%")
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (pj.fecha_inicio BETWEEN prfechainicio and prfechafin)
    )
    and
    (
        (prestado=-3 and pj.estado<3) or
        (prestado=-2 and pj.estado=4) or
        (prestado=-1 and (pj.estado<3 and pj.fecha_inicio_pago is null and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento<4) ) or 
        (prestado=0 and (pj.estado<3 and pj.fecha_inicio_pago is not null) ) or 
        (prestado=1 and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ) or
        (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=prestado)
    ) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramaxcliente`(IN `prcliente` INT(50), IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

# prtipo puede ser 0: Todos, 1: Afiliación, 2: Préstamo, 3: Venta o 4: Judicial

select
*
from
(
    select
    vg.id_venta_cronograma as id_cronograma,
    3 as id_tipo,
    "Venta" as tipo,
    CONCAT(t.tln_serie,"-",t.tln_numero) as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    vg.cng_monto_cuota as monto_total,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente,
    vg.cng_fecha_vencimiento as fecha_vencimiento,
    vg.cng_fecha_cancelacion as fecha_cancelacion,
    case vg.cng_estado
    when 1 then "PENDIENTE"
    when 2 then "PAGADO"
    end as estado,
    vg.cng_estado as id_estado
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    where
    	v.vnt_estado=1
    and
    	vg.cng_estado=1 and vg.tipo_cuota<>2
    and
		v.id_cliente=prcliente
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) OR
        (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
union
    select
    cg.id_credito_cronograma as id_cronograma,
    case c.tipo
    when 1 then 1
    else 2
    end as id_tipo,
    case c.tipo
    when 1 then "Afiliación"
    when 2 then "Préstamo"
    end as tipo,
    case c.tipo
    when 1 then c.codigo
    when 2 then CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as codigo,
    tp.idtipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    cg.monto_capital+cg.monto_interes as monto_total,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente,
    cg.fecha_vencimiento as fecha_vencimiento,
    cg.fecha_cancelacion as fecha_cancelacion,
    case cg.estado
    when 1 then "PENDIENTE"
    when 2 then "PAGADO"
    end as estado,
    cg.estado as id_estado
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    where
    	c.estado=1
    and
    	cg.estado=1 and cg.tipo_cuota<>2
    and
    	c.id_cliente=prcliente
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) OR
        (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
) as resultado
order by resultado.fecha_vencimiento asc, resultado.id_tipo asc, resultado.id_cronograma desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialestado`(IN `priddocumento` INT, IN `prdocumento` VARCHAR(50) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin
	
    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

	select
    pje.id_proceso_judicial_estado as id,
    pje.nombre as nombre,
    pjd.id_proceso_judicial_documento as id_documento,
    pjd.nombre as documento
    from
    proceso_judicial_estado as pje
    inner join proceso_judicial_documento as pjd on
    pje.id_proceso_judicial_documento=pjd.id_proceso_judicial_documento
    where
    pje.estado=1
    and
    pjd.estado=1
    and
    pje.nombre like concat(prnombre,'%')
    and
    (
        ( priddocumento=0 and pjd.nombre like concat(prdocumento,'%') ) or
        pjd.id_proceso_judicial_documento=priddocumento
    )
    order by pjd.nombre asc, pje.nombre asc
    limit IP, TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarliquidacionescontar`(IN `prtipo` INT, IN `prcodigo` VARCHAR(20) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombrecliente` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prusuario` VARCHAR(50) CHARSET utf8)
    NO SQL
select
    	count( distinct lq.id_liquidacion) as total
    FROM
    	liquidaciones as lq
    left join
    	liquidaciones_pagos as lqp
    on
		(lq.id_liquidacion = lqp.id_liquidacion and lqp.estado=1)
    left JOIN
    	creditos as c
    on
    	(lq.id_transaccion = c.id_credito and lq.tipo=1)
    left join
    	cliente as cc
    on
      	c.id_cliente = cc.idcliente
    left join
    	venta as v
    on
    	(lq.id_transaccion = v.idventa and lq.tipo = 2)
    left join
    	talonario as t
    on
    	v.id_talonario = t.id_talonario
    left join
    	cliente as vc
    on
    	v.id_cliente = vc.idcliente
    inner join
    	usuario as u
    on
    	lq.id_usuario = u.idusuario
    where
    	lq.estado = 1
    and
    	(prtipo=0 or lq.tipo = prtipo)
   	and
    	(
            (prfechainicio is null and prfechafin is null) or
            (lq.fecha BETWEEN prfechainicio and prfechafin)
        )
    AND
    	u.usr_nombre like concat(prusuario, '%')
    and
    	(
        	vc.clt_dni like concat(prdni, '%') or
            cc.clt_dni like concat(prdni, '%')
        )
    and
    	(
        	vc.clt_nombre like concat(prnombrecliente, '%') or
            cc.clt_nombre like concat(prnombrecliente, '%')
        )
    and
        (
        	concat(t.tln_serie, "-",t.tln_numero) like concat(prcodigo,'%') or
            concat( c.codigo, "-",LPAD(c.numero,3,"0") ) like concat(prcodigo,'%')
        )$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesosjudicialxtransaccion`(IN `prtipo` INT, IN `prtransaccion` INT)
    MODIFIES SQL DATA
select
pj.id_proceso_judicial as id_proceso,
pj.expediente as expediente,
case
	when pj.fecha_inicio_pago is null then
        case
           when dcm.id_proceso_judicial_documento is null then 1
           else dcm.id_proceso_judicial_documento
        end
    else 0
end as id_tipo_documento,
pj.estado as estado
from
proceso_judicial_transacciones as pjt
inner join proceso_judicial as pj ON
pjt.id_proceso=pj.id_proceso_judicial
left join 
(
    SELECT pjd1.*
    FROM proceso_judicial_detalle as pjd1
    WHERE
    pjd1.fecha = (SELECT pjd2.fecha
                 FROM proceso_judicial_detalle as pjd2
                 WHERE pjd2.id_proceso = pjd1.id_proceso            
                 ORDER BY pjd2.fecha DESC
                 LIMIT 1)
) as pjd on
pj.id_proceso_judicial=pjd.id_proceso
left join proceso_judicial_documento as dcm on
pjd.tipo_documento = dcm.id_proceso_judicial_documento
where
pjt.estado=1
and
pj.estado<3
and
pj.fecha_inicio_pago is null
and
( pjd.tipo_documento is null or pjd.tipo_documento<>5 )
AND
pjt.tipo_transaccion=prtipo
and
pjt.id_transaccion=prtransaccion
group by pj.id_proceso_judicial$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillas`(IN `prtipo` INT, IN `prrelevancia` INT, IN `prusuario` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;
    
	select
    p.id_plantilla as id_plantilla ,
    p.tipo_plantilla as id_tipo_plantilla ,
    pt.nombre as tipo_plantilla ,
    p.fecha as fecha ,
    u.usr_nombre as usuario ,
    p.comentarios as comentarios ,
    p.archivo as archivo ,
    p.relevancia as relevancia
    FROM
    plantillas as p
    inner join plantillas_tipo as pt ON
    p.tipo_plantilla=pt.id_plantilla_tipo
    inner join usuario as u ON
    p.usuario=u.idusuario
	WHERE
    p.estado=1
    AND
    ( prtipo=0 or p.tipo_plantilla=prtipo )
    AND
    ( prrelevancia=0 or p.relevancia=prrelevancia )
    AND
    u.usr_nombre like concat(prusuario, '%')
    order by
    p.relevancia asc, p.fecha desc 
    LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearcreditocronogramainteres2_test`(IN `prcredito` INT)
    NO SQL
begin

	-- Primero se verifica si en el crédito se creó una penalidad
	set @cuotas_reemplazadas = (select
    	count(cc0.id_credito_cronograma)
    from
    	credito_cronograma as cc0
    WHERE
    	cc0.id_credito=prcredito
    and
    	cc0.tipo_cuota=2
	and
		cc0.tipo_cuota<>3
	) ;
	
	-- Si hay penalidad, se hacen los cálculos en base a las cuotas anteriores(tipo 2). Sino en base a las actuales (tipo 1)
	if @cuotas_reemplazadas > 0 then
        set @maxima_fecha = (
            select
                max(cc1.fecha_vencimiento)
            from
                credito_cronograma as cc1
            where
                cc1.id_credito=prcredito
            and
                cc1.tipo_cuota=2
            and
                cc1.estado<>3
            group by
                cc1.id_credito
        );
	else
    	set @maxima_fecha = (
        	select
                max(cc1.fecha_vencimiento)
            from
                credito_cronograma as cc1
            where
                cc1.id_credito=prcredito
            and
                cc1.tipo_cuota=1
            and
                cc1.estado<>3
            group by
                cc1.id_credito
        );
	end if ;

	set @total = (
        select
        total-interes_diario
        from
        creditos
        where
        id_credito=prcredito
    ) ;

	set @pago_manual = (
    	SELECT
            sum(cdm.monto)
        from
            cobranza_detalle as cdm
        inner join
            cobranza_manual as c1
        on
            cdm.id_cobranza_manual=c1.id_cobranza_manual
        inner join
            credito_cronograma as cc
        on
            cdm.id_credito_cronograma=cc.id_credito_cronograma
        where
            cc.id_credito=prcredito
        and
            c1.estado=1
        and
            cdm.estado=1
        and
        	c1.fecha <= @maxima_fecha
        group BY
            cc.id_credito 
    ) ;
 
	set @pago_directo = (
    	SELECT 
            sum(cd.monto)
        FROM
            cobranza_detalle as cd
        inner join
            cobranza_directa as c2
        on
            cd.id_cobranza_directa=c2.id_cobranza_directa
        inner join
            credito_cronograma as cc
        on
            cd.id_credito_cronograma=cc.id_credito_cronograma
        where
            cd.estado=1
        and
            c2.estado=1
        AND
            cc.id_credito=prcredito
        and
        	c2.fecha <= @maxima_fecha
        group by
            cc.id_credito
    ) ;


	set @pago_planilla = (
    	SELECT 
            sum(cd.monto)
        FROM
            cobranza_detalle as cd
        inner join
            cobranza_archivos_detalle as cad
        on
            ( cd.id_cobranza_archivos> 0 and cd.id_cobranza_archivos=cad.id_cobranza_detalle )
        inner join
            cobranza_archivos_cabecera as cac
        on
            ( cad.id_cobranza=cac.id_cobranza )
        inner join
            credito_cronograma as cc
        on
            (cd.id_credito_cronograma>0 and cd.id_credito_cronograma=cc.id_credito_cronograma)
        where
            cd.estado=1
        and
            cad.estado=1
        and
            cac.estado=1
        and
            cc.id_credito=prcredito
        and
        	cac.fecha_fin <= @maxima_fecha
        group by
            cc.id_credito
    ) ;

	-- Se consulta la tasa de interés del préstamo
	set @interes = (
    	select
        interes
        from
        creditos
        where
        id_credito=prcredito
    ) ;
    
    if @interes < 15 THEN
    	set @interes = 10 ;
    end if;
    
    set @total_pagos = coalesce(@pago_planilla,0) + coalesce(@pago_directo,0) + coalesce(@pago_manual,0) ;

	-- Se debe considerar el 10% del interés del crédito
	set @interes_considerado = (@interes*0.01)*0.1 ;
    
    -- Se calcula el monto de la cuota de interés
    set @cuota = round( (@total-@total_pagos)*@interes_considerado, 2) ;
    
    -- Se realiza esto solo si la cuota es mayor a 0
    if @cuota > 0 then
    
        #### Se crean las cuotas del crédito #####
        -- Se busca el tipo de pago del crédito
        set @tipo_pago = (
            select
                id_tipo_pago
            from
                creditos
            where
                id_credito=prcredito
            and
                estado<>3
        );

        -- Se busca la fecha de la última cuota del crédito. No es la misma de arriba, porque aquí se deben considerar las cuotas en caso haya una penalidad
        set @ultima_fecha = (
            select
                max(cc1.fecha_vencimiento)
            from
                credito_cronograma as cc1
            where
                cc1.id_credito=prcredito
            and
                cc1.estado<>3
            group by
                cc1.id_credito
        ) ;

        -- Se crea esta variable para crear las cuotas del crédito
        set @contador = 0 ;
	
        /* actualizacionCuotas:LOOP

            SET @contador=@contador+1;

            set @fecha = LAST_DAY(date_add(@ultima_fecha,interval @contador month)) ;

            INSERT INTO
            	credito_cronograma 
            set
                id_credito=prcredito,
                id_tipo_pago=@tipo_pago,
                monto_capital=0,
                monto_interes=@cuota,
                tipo_cuota=3,
                fecha_vencimiento=@fecha ;
            
            IF @fecha>=now() THEN
              LEAVE actualizacionCuotas;
            END IF;
            
		END LOOP actualizacionCuotas; */
          
	end if ; 
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialfecha`()
    NO SQL
select
min(pj.fecha_inicio) as fecha_inicio
from
proceso_judicial as pj
where 
pj.estado<3 and pj.fecha_inicio_pago is null$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarpresupuestocronograma`(IN `prpresupuesto` INT)
    NO SQL
select
id_presupuesto_cronograma as id,
ROUND(pspc_capital,2) as capital,
ROUND(pspc_interes,2) as interes,
ROUND(pspc_capital + pspc_interes,2) as monto,
pspc_fecha as fecha
from
presupuesto_cronograma
where
id_presupuesto=prpresupuesto
and
pspc_estado=1
order by
pspc_fecha asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarperfil`(IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

SELECT
id_perfil as id_perfil ,
nombre as nombre ,
permisos_categorias as categoria
from
perfil
where
nombre like concat(prnombre,'%')
and
estado = 1
order by
nombre asc
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillacooperativacuenta`()
    NO SQL
select
c.numero as cuenta,
b.bnc_nombre as banco
from
cooperativa_cuenta as c
inner join banco as b on
c.id_banco=b.id_banco
where
c.estado=1
and
c.relevancia=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarinstitucionescontar`(IN `prnombre` VARCHAR(30) CHARSET utf8)
    NO SQL
SELECT
    count(i.id_institucion) as total
    from
    institucion as i
    where
    i.inst_estado=1
    and
    i.inst_nombre like concat('%',prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialinstanciascontar`(IN `prdistritojudicial` INT, IN `prjuzgado` VARCHAR(50) CHARSET utf8, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
begin

select
count(DISTINCT pj.id_instancia_judicial) as total
from
proceso_judicial as pj
left join 
(
    SELECT pjd1.*
    FROM proceso_judicial_detalle as pjd1
    WHERE
    pjd1.fecha = (SELECT pjd2.fecha
                 FROM proceso_judicial_detalle as pjd2
                 WHERE pjd2.id_proceso = pjd1.id_proceso            
                 ORDER BY pjd2.fecha DESC
                 LIMIT 1)
) as pjd on
pj.id_proceso_judicial=pjd.id_proceso
left join 
(
    SELECT *
    FROM proceso_judicial_detalle as pjd12
    WHERE
    pjd12.id_trabajador>0
    and
    pjd12.fecha <= (SELECT pjd22.fecha
                 FROM proceso_judicial_detalle as pjd22
                 WHERE pjd22.id_proceso <= pjd12.id_proceso
                 ORDER BY pjd22.fecha DESC
                 LIMIT 1)
) as pjd2 on
pj.id_proceso_judicial=pjd2.id_proceso
inner join juzgado_instancia as ij on
pj.id_instancia_judicial=ij.id_juzgado_instancia
inner join juzgado_distrito as dj on
ij.id_juzgado_distrito = dj.id_juzgado_distrito
left join proceso_judicial_documento as dcm on
pjd.tipo_documento = dcm.id_proceso_judicial_documento
inner join cliente as c on
pj.id_cliente=c.idcliente
where
ij.id_juzgado_distrito=prdistritojudicial
and
pj.expediente like concat("%",prexpediente,"%")
AND
ij.nombre like CONCAT(prjuzgado,'%')
and
c.clt_dni like concat(prdni,"%")
and
c.clt_nombre like concat("%",prnombre,"%")
and
(
    (prfechainicio is null and prfechafin is null) or
    (pj.fecha_inicio BETWEEN prfechainicio and prfechafin)
)
and
(
    (prestado=-3 and pj.estado<3) or
    (prestado=-2 and pj.estado=4) or
    (prestado=-1 and (pj.estado<3 and pj.fecha_inicio_pago is null and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento<4) ) or 
    (prestado=0 and (pj.estado<3 and pj.fecha_inicio_pago is not null) ) or 
    (prestado=1 and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ) or
    (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=prestado)
) ;
  

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductoserie`(IN `pralmacen` VARCHAR(40) CHARSET utf8, IN `prproducto` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

declare IP INT unsigned;
declare TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
alm.alm_nombre as almacen,
det.id_producto_serie as id_serie,
ps.ps_serie as serie,
ps.ps_color as color,
ps.ps_almacenamiento as almacenamiento,
ps.ps_precio_compra as precio,
pv.prv_nombre as proveedor
from transaccion_detalle as det
inner join transaccion_cabecera cab on
det.id_movimiento_cabecera = cab.idtransaccion_cabecera
inner join almacen alm on
cab.id_almacen = alm.idalmacen
inner join producto_serie as ps on
det.id_producto_serie=ps.id_producto_serie
left join proveedor as pv on
cab.id_proveedor=pv.idproveedor
where
det.id_producto_serie in
(
    select
    ps.id_producto_serie
    from
    transaccion_detalle tdet
    inner join transaccion_cabecera tcab on
    tdet.id_movimiento_cabecera = tcab.idtransaccion_cabecera
    inner join almacen al on
    tcab.id_almacen = al.idalmacen
    inner join producto_serie as ps on
    tdet.id_producto_serie=ps.id_producto_serie
    inner join producto p on
    ps.id_producto = p.idproducto
    WHERE
    tcab.tsccab_estado = 1
    AND
    tdet.tscdet_estado=1
    AND
    (al.alm_nombre like concat('%',pralmacen,'%'))
    and
    (prproducto is null or prproducto=p.idproducto)
    AND
    (
        select
        sum(t2.tscdet_cantidad)
        from
        transaccion_detalle as t2 
        inner join transaccion_cabecera as c2 on 
        t2.id_movimiento_cabecera=c2.idtransaccion_cabecera 
        inner join almacen as a2 on 
        c2.id_almacen=a2.idalmacen 
        where
        t2.tscdet_estado=1
        and
        c2.tsccab_estado=1
        and
        t2.id_producto_serie=det.id_producto_serie 
        and
        a2.alm_nombre like concat('%',pralmacen,'%')
    )>0
)
group by
det.id_producto_serie
order by det.id_producto_serie
limit IP,TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditocronogramaresumen`(IN `prcredito` INT, IN `prtipocuota` INT)
    NO SQL
select
cg2.id_credito as id_credito,
ROUND(sum(cg2.monto_capital+cg2.monto_interes),2) as monto_total,
ROUND(sum(cg2.interes),2) as interes ,
ROUND(sum(cg2.monto_pagado),2) as monto_pagado,
ROUND(sum(cg2.monto_capital+cg2.monto_interes)-sum(cg2.monto_pagado),2) as monto_pendiente,
ROUND(sum(if(cg2.fecha_vencimiento<CURDATE() ,cg2.monto_capital+cg2.monto_interes-cg2.monto_pagado,0)),2) as monto_pendiente_hasta_hoy,
count(cg2.id_credito_cronograma) as total_cuotas,
count(if(cg2.estado=1,cg2.id_credito_cronograma,null)) as total_pendiente,
count(if(cg2.estado=2,cg2.id_credito_cronograma,null)) as total_pagadas
from
credito_cronograma as cg2
where
cg2.id_credito = prcredito
and
cg2.estado<>3
and
(
	(prtipocuota=0 and cg2.tipo_cuota<>2) or
    (cg2.tipo_cuota=prtipocuota)
)
group by
cg2.id_credito$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadodistritoactivo`(IN `prnombre` VARCHAR(60) CHARSET utf8)
    NO SQL
select
juzgado_distrito.id_juzgado_distrito as id,
juzgado_distrito.nombre as nombre
from
juzgado_distrito
inner join juzgado_instancia on
juzgado_distrito.id_juzgado_distrito=juzgado_instancia.id_juzgado_distrito
inner join proceso_judicial on
juzgado_instancia.id_juzgado_instancia=proceso_judicial.id_instancia_judicial
where
proceso_judicial.estado=1
and
juzgado_distrito.nombre like concat(prnombre,'%')
group by juzgado_distrito.id_juzgado_distrito
limit 5$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialdocumentoscontar`(IN `prnombre` INT)
    NO SQL
select
    count(id_proceso_judicial_documento) as total
from
    proceso_judicial_documento
where
    estado=1
and
    nombre like concat(prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramaxcobrarpnptotal`(IN `prsede` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
BEGIN

select
COUNT( DISTINCT resultado.id_cliente) as cantidad,
ROUND(sum(resultado.monto_pendiente),2) as total
from
(
    select
    cl.clt_codigo as codofin,
    cl.clt_cip as cip,
    cl.idcliente as id_cliente,
    cl.clt_nombre as cliente,
    ROUND(SUM(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado),2) as monto_pendiente,
    vg.cng_fecha_vencimiento as fecha_vencimiento
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    where
    v.vnt_estado=1
    and
    v.id_tipopago=1
    and
    vg.cng_estado<>3
    and
    vg.tipo_cuota<>2
    and
    (ssd.id_sede=3)
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    GROUP by cl.idcliente
union
    select
    cl.clt_codigo as codofin,
    cl.clt_cip as cip,
    cl.idcliente as id_cliente,
    cl.clt_nombre as cliente,
    ROUND(SUM(cg.monto_capital+cg.interes-cg.monto_pagado),2) as monto_pendiente,
    cg.fecha_vencimiento as fecha_vencimiento
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    where
    c.estado=1
    and
    c.id_tipo_pago=1
    and
    cg.estado<>3
    and
    cg.tipo_cuota<>2
    and
    (ssd.id_sede=3)
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    GROUP by cl.idcliente
) as resultado;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_actualizarventa`(IN `prid` INT, IN `pracreedor` INT, IN `prfecha` DATE, IN `prtipo` INT, IN `prsucursal` INT, IN `prsalida` INT, IN `prtalonario` INT, IN `prcliente` INT, IN `prclientedireccion` VARCHAR(100) CHARSET utf8, IN `prclientelefono` VARCHAR(15) CHARSET utf8, IN `prclientecargo` VARCHAR(40) CHARSET utf8, IN `prclientetrabajo` VARCHAR(100) CHARSET utf8, IN `prlugar` VARCHAR(100) CHARSET utf8, IN `prvendedor` INT, IN `prautorizador` INT, IN `prtipopago` INT, IN `prinicial` FLOAT, IN `prcuotas` INT, IN `prtotal` FLOAT, IN `prfecha_inicio` DATE, IN `prfoto` VARCHAR(255) CHARSET utf8, IN `prcontrato` VARCHAR(255) CHARSET utf8, IN `prdni` VARCHAR(255) CHARSET utf8, IN `prcip` VARCHAR(255) CHARSET utf8, IN `prplanilla` VARCHAR(255) CHARSET utf8, IN `prletra` VARCHAR(255) CHARSET utf8, IN `prvoucher` VARCHAR(255) CHARSET utf8, IN `prautorizacion` VARCHAR(255) CHARSET utf8, IN `proficio` VARCHAR(100) CHARSET utf8, IN `protros` VARCHAR(200) CHARSET utf8, IN `probservaciones` VARCHAR(300) CHARSET utf8)
    NO SQL
BEGIN

update
venta
set
id_acreedor=pracreedor,
vnt_fecha=prfecha,
id_sucursal=prsucursal,
id_talonario=prtalonario,
id_autorizador=if(prautorizador=0, null, prautorizador),
id_vendedor=prvendedor,
id_cliente=prcliente,
vnt_cliente_direccion=prclientedireccion,
vnt_cliente_telefono=prclientelefono,
vnt_cliente_cargo=prclientecargo,
vnt_cliente_trabajo=prclientetrabajo,
id_tipopago=prtipopago,
vnt_inicial=prinicial,
vnt_numero_cuota=prcuotas,
vnt_total=prtotal,
vnt_fecha_inicio=prfecha_inicio,
vnt_foto=prfoto,
vnt_contrato_pdf=prcontrato,
vnt_dni_pdf=prdni,
vnt_cip_pdf=prcip,
vnt_planilla_pdf=prplanilla,
vnt_letra_pdf=prletra,
vnt_voucher_pdf=prvoucher,
vnt_autorizacion_pdf=prautorizacion,
vnt_oficio_pdf=proficio,
otros_pdf=protros,
vnt_observaciones=probservaciones,
vnt_lugarventa=prlugar
where
idventa=prid;

# Se elimina el cronograma de esa venta
delete from
venta_cronograma
where
id_venta=prid;

# Se eliminan los garantes de esa venta
delete from
venta_garante
where
id_venta=prid;

# Se inhabilitan los vendedores
update
venta_vendedores
set
estado=0
where
id_venta=prid ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarpresupuestocabecera`(IN `prcliente` VARCHAR(40) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT
p.id_presupuesto as id,
p.id_cliente as id_cliente,
c.clt_nombre as cliente,
p.id_tipo as id_tipo,
case p.id_tipo
when 1 then "Préstamo"
when 2 then "Venta"
end as tipo,
p.psp_fecha as fecha,
p.psp_cuotas as cuotas,
p.psp_capital as capital,
p.psp_tasa as tasa,
p.psp_total as total,
p.psp_estado as id_estado,
case p.psp_estado
when 0 then "Anulado"
when 1 then "Pendiente"
when 2 then "Facturado"
end as estado,
p.pdf_autorizacion as pdf_autorizacion,
p.pdf_ddjj as pdf_ddjj,
p.pdf_transaccion as pdf_transaccion,
p.pdf_tarjeta as pdf_tarjeta,
p.pdf_compromiso as pdf_compromiso
from
presupuesto_cabecera as p
inner join cliente as c on
p.id_cliente=c.idcliente
WHERE
( (prestado=3 and p.psp_estado>0) or (p.psp_estado=prestado) )
and
(
    (prfechainicio is null and prfechafin is null) OR
    (p.psp_fecha BETWEEN prfechainicio and prfechafin)
)
and
( c.clt_nombre  like concat (prcliente,'%') )
order by p.psp_fecha desc, p.id_presupuesto desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialV3`(IN `pridinstancia` INT, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdni` VARCHAR(30) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT, IN `prorden` VARCHAR(40) CHARSET utf8)
    NO SQL
begin

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VEXPEDIENTE varchar(300);
DECLARE VDNI varchar(300);
DECLARE VNOMBRE varchar(300);
DECLARE VFECHA varchar(300);
DECLARE VESTADO varchar(300);

SET VEXPEDIENTE = concat(" and (pj.expediente like CONCAT('%','", prexpediente,"', '%')) ");

SET VDNI = concat(" AND (c.clt_dni like concat('",prdni,"','%') ) ");

SET VNOMBRE = concat(" AND (c.clt_nombre like concat('%','",prnombre,"','%') ) ");

IF ( isnull(prfechainicio) and isnull(prfechafin) ) then set VFECHA="";
ELSE SET VFECHA=concat(" and (DATE(pj.fecha_inicio) between '",prfechainicio,"' and '",prfechafin,"') ");
END IF;

IF prestado=-3 then set VESTADO=" and pj.estado<3 ";
ELSEIF prestado=-2 then set VESTADO=" and pj.estado=4 ";
ELSEIF prestado=-1 then SET VESTADO=" and (pj.estado<3 and pj.fecha_inicio_pago is null and (dcm.id_proceso_judicial_documento<4 or dcm.id_proceso_judicial_documento>=6)) ";
ELSEIF prestado=0 then SET VESTADO=" and (pj.estado<3 and pj.fecha_inicio_pago is not null) ";
ELSEIF prestado=1 then SET VESTADO=" and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ";
ELSE SET VESTADO=concat(" and (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=",prestado,") ");
END IF;

set @SQLSTATEMENT = 
CONCAT("\r\nselect\r\npj.id_proceso_judicial as 'id',\r\npj.expediente as 'expediente',\r\ndj.id_juzgado_distrito as id_distrito,\r\npj.id_instancia_judicial as id_instancia,\r\ndj.nombre as distrito,\r\nij.nombre as 'juzgado',\r\nvnd.vnd_nombre as 'vendedor',\r\npj.fecha_inicio as 'fecha_inicio',\r\npj.sumilla as 'sumilla',\r\nc.idcliente as 'id_cliente',\r\nc.clt_dni as 'cliente_dni',\r\nc.clt_nombre as 'cliente_nombre',\r\npjd.tipo_documento as 'ultimo_documento',\r\ncase\r\n\twhen pj.fecha_inicio_pago is null then\r\n        case\r\n           when dcm.id_proceso_judicial_documento is null then 1\r\n           else dcm.id_proceso_judicial_documento\r\n        end\r\n    else 0\r\nend as 'id_tipo_documento',\r\ncase\r\n\twhen pjd.id_proceso_judicial_detalle is null then pj.fecha_inicio\r\n\telse pjd.fecha\r\nend as 'fecha_ultimo_documento',\r\ncase\r\n\twhen pjd.id_proceso_judicial_detalle is null then DATEDIFF(CURDATE(),pj.fecha_inicio)\r\n\telse DATEDIFF(CURDATE(),pjd.fecha)\r\nend as 'fecha_ultimo_documento_diferencia',\r\npj.total as 'total',\r\npj.estado as 'estado',\r\ncount(distinct pjdet.id_proceso_judicial_detalle) as total_documentos\r\nfrom\r\nproceso_judicial as pj\r\nleft join proceso_judicial_detalle as pjdet on\r\n(pj.id_proceso_judicial = pjdet.id_proceso and pjdet.estado=1)\r\nleft join \r\n(\r\n    SELECT pjd1.*\r\n    FROM proceso_judicial_detalle as pjd1\r\n    WHERE\r\n    pjd1.estado = 1\r\n    and\r\n    pjd1.fecha = (SELECT pjd2.fecha\r\n                 FROM proceso_judicial_detalle as pjd2\r\n                 WHERE pjd2.id_proceso = pjd1.id_proceso            \t\t\t\t and\r\n    \t\t\t pjd2.estado = 1\r\n                 ORDER BY pjd2.fecha DESC\r\n                 LIMIT 1)\r\n) as pjd on\r\npj.id_proceso_judicial=pjd.id_proceso\r\nleft join \r\n(\r\n    SELECT *\r\n    FROM proceso_judicial_detalle as pjd12\r\n    WHERE\r\n    pjd12.id_trabajador>0\r\n    and\r\n    pjd12.estado = 1\r\n    and\r\n    pjd12.fecha = (SELECT pjd22.fecha\r\n                    FROM proceso_judicial_detalle as pjd22\r\n                    WHERE\r\n                    pjd22.id_proceso = pjd12.id_proceso\r\n                    and\r\n    \t\t\t\tpjd22.estado = 1\r\n    \t\t\t\tand\r\n                    pjd22.id_trabajador>0\r\n                    ORDER BY pjd22.fecha DESC\r\n                    LIMIT 1)\r\n) as pjd2 on\r\npj.id_proceso_judicial=pjd2.id_proceso\r\ninner join juzgado_instancia as ij on\r\npj.id_instancia_judicial=ij.id_juzgado_instancia\r\ninner join juzgado_distrito as dj on\r\nij.id_juzgado_distrito = dj.id_juzgado_distrito\r\nleft join vendedor as vnd on\r\npjd2.id_trabajador=vnd.idvendedor\r\nleft join proceso_judicial_documento as dcm on\r\npjd.tipo_documento = dcm.id_proceso_judicial_documento\r\ninner join cliente as c on\r\npj.id_cliente=c.idcliente\r\nwhere \r\npj.id_instancia_judicial=",pridinstancia,
VEXPEDIENTE ,
VDNI ,
VNOMBRE ,
VFECHA ,
VESTADO ,
" group by pj.id_proceso_judicial \r\norder by ", prorden, ", pj.fecha_inicio desc");
       
PREPARE stmt FROM @SQLStatement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
       
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearpagocredito`(IN `prcobranzadirecta` INT, IN `prcobranzamanual` INT, IN `pridcredito` INT, IN `prmonto` FLOAT, IN `prfecha` DATE)
    NO SQL
begin

	DECLARE V_id_cronograma INT unsigned ;
    DECLARE V_monto_total FLOAT unsigned ;
    DECLARE V_monto_pendiente2 FLOAT unsigned ;
    DECLARE V_monto_pendiente FLOAT unsigned ;
    DECLARE V_acumulado FLOAT unsigned ;
    DECLARE V_total FLOAT unsigned ;
    DECLARE V_amortizado FLOAT unsigned ;
    
	DECLARE finished INT unsigned default 0 ;

	DEClARE cursor_transaccion CURSOR FOR
    (
		select
        resultado.id_cronograma,
        ROUND(resultado.monto_total,2) ,
        ROUND(resultado.monto_pendiente,2) as monto_pendiente,
        ROUND(
            if(
            @total<prmonto*2,	
            @total:=@total+(resultado.monto_pendiente),
            null)
        ,2)
        as acumulado ,
        @pendiente:=ROUND(@pendiente+resultado.monto_pendiente,2) ,
        ROUND( @total,2) ,
        ROUND(
            if(
                @total<prmonto*2,	
                resultado.monto_pendiente,
                resultado.monto_pendiente-(@pendiente-prmonto)
            )
        ,2)
        as saldo_amortizado
        from
        (SELECT @total:=0, @pendiente:=0) AS t,
        (
            select
            c.id_credito as id,
            cg.id_credito_cronograma as id_cronograma,
            ROUND(cg.monto_capital,2) as capital,
            ROUND(cg.monto_interes+cg.interes,2) as interes,
            ROUND(cg.monto_capital + cg.monto_interes+cg.interes,2) as monto_total,
            ROUND(
                cg.monto_capital + cg.monto_interes+cg.interes-cg.monto_pagado
                ,2) as monto_pendiente,
            cg.fecha_vencimiento as fecha_vencimiento,
            cg.estado as id_estado
            from
            credito_cronograma as cg
            inner join creditos as c on
            cg.id_credito=c.id_credito
            left join cobranza_detalle as cd on
            (cg.id_credito_cronograma=cd.id_credito_cronograma)
            where
            c.estado=1
            and
            c.id_credito=pridcredito
            and
            cg.estado<>3 and cg.tipo_cuota<>2
            group by cg.id_credito_cronograma
        ) as resultado
        having (acumulado is not null and monto_pendiente>0)
        order by
        resultado.fecha_vencimiento asc
    );

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursor_transaccion;

	crearDetalle:LOOP
		FETCH cursor_transaccion INTO V_id_cronograma, V_monto_total, V_monto_pendiente, V_acumulado, V_monto_pendiente2, V_total, V_amortizado;

		IF finished = 1 THEN 
			LEAVE crearDetalle;
		END IF;

		# Se inserta en la tabla de cobranza detalle
        insert into cobranza_detalle(id_cobranza_directa,id_cobranza_manual, id_credito_cronograma, monto) values (prcobranzadirecta,prcobranzamanual, V_id_cronograma,V_amortizado) ;
 
 		# Se actualiza el estado a pagado o pendiente de la cuota
        if V_monto_pendiente > V_amortizado then
            update
            credito_cronograma as cg
            set
            cg.monto_pagado=V_monto_total-V_monto_pendiente+V_amortizado,
            cg.fecha_cancelacion=null,
            cg.estado=1
            where
            cg.id_credito_cronograma=V_id_cronograma;
        else
            update
            credito_cronograma as cg
            set
            cg.monto_pagado=V_monto_total-V_monto_pendiente+V_amortizado,
            cg.fecha_cancelacion=prfecha,
            cg.estado=2
            where
            cg.id_credito_cronograma=V_id_cronograma;
        end if;
 
 		# Se actualiza la última fecha de pago del préstamo
        update creditos set ultima_fecha_pago = prfecha where id_credito=pridcredito ;
	END LOOP crearDetalle;
	CLOSE cursor_transaccion;

	# Al final se recalculan los intereses
    call sp_crearcreditocronogramainteres1(pridcredito) ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmodelo2`(IN `prtipo` VARCHAR(45) CHARSET utf8, IN `prmarca` VARCHAR(45) CHARSET utf8, IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

select
md.id_modelo,
t.tprd_nombre,
m.mrc_nombre,
md.mdl_nombre
from
modelo md
inner join marca m on
md.id_marca = m.id_marca
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
where
t.estado=1
and
m.estado = 1
and
md.estado = 1
and
(prtipo is null or t.tprd_nombre LIKE CONCAT('%',prtipo,'%'))
and
(prmarca is null or m.mrc_nombre LIKE CONCAT('%',prmarca,'%'))
and
(prnombre is null or md.mdl_nombre LIKE CONCAT('%',prnombre,'%'))


LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprovincia`(IN `prdepartamento` VARCHAR(40) CHARSET utf8, IN `prnombre` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP  INT unsigned;
DECLARE TP  INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
p.id_provincia,
upper(d.dpt_nombre) as dpt_nombre,
upper(p.prv_nombre) as prv_nombre
from
provincia p
inner join departamento d on
p.id_departamento = d.id_departamento
where
d.dpt_estado=1
and
p.prv_estado =1 
and
d.dpt_nombre like CONCAT('%',prdepartamento,'%')
and
p.prv_nombre like CONCAT('%',prnombre,'%')
order by
d.dpt_nombre asc, p.prv_nombre asc

limit IP,TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialinstancias`(IN `prdistritojudicial` INT, IN `prjuzgado` VARCHAR(50) CHARSET utf8, IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
begin

select
pj.id_instancia_judicial as id_instancia,
ij.nombre as instancia,
dj.id_juzgado_distrito as id_distrito,
dj.nombre as distrito
from
proceso_judicial as pj
left join 
(
    SELECT pjd1.*
    FROM proceso_judicial_detalle as pjd1
    WHERE
    pjd1.estado = 1
    and
    pjd1.fecha = (SELECT pjd2.fecha
                 FROM proceso_judicial_detalle as pjd2
                 WHERE pjd2.id_proceso = pjd1.id_proceso            				 and pjd2.estado = 1
                 ORDER BY pjd2.fecha DESC
                 LIMIT 1)
) as pjd on
pj.id_proceso_judicial=pjd.id_proceso
left join 
(
    SELECT *
    FROM proceso_judicial_detalle as pjd12
    WHERE
    pjd12.id_trabajador>0
    and
    pjd12.estado = 1
    and
    pjd12.fecha <= (SELECT pjd22.fecha
                 FROM proceso_judicial_detalle as pjd22
                 WHERE pjd22.id_proceso <= pjd12.id_proceso
                 and pjd22.estado = 1
                 ORDER BY pjd22.fecha DESC
                 LIMIT 1)
) as pjd2 on
pj.id_proceso_judicial=pjd2.id_proceso
inner join juzgado_instancia as ij on
pj.id_instancia_judicial=ij.id_juzgado_instancia
inner join juzgado_distrito as dj on
ij.id_juzgado_distrito = dj.id_juzgado_distrito
left join proceso_judicial_documento as dcm on
pjd.tipo_documento = dcm.id_proceso_judicial_documento
inner join cliente as c on
pj.id_cliente=c.idcliente
where
ij.id_juzgado_distrito=prdistritojudicial
and
pj.expediente like concat("%",prexpediente,"%")
AND
ij.nombre like CONCAT(prjuzgado,'%')
and
c.clt_dni like concat(prdni,"%")
and
c.clt_nombre like concat("%",prnombre,"%")
and
(
    (prfechainicio is null and prfechafin is null) or
    (pj.fecha_inicio BETWEEN prfechainicio and prfechafin)
)
and
(
    (prestado=-3 and pj.estado<3) or
    (prestado=-2 and pj.estado=4) or
    (prestado=-1 and (pj.estado<3 and pj.fecha_inicio_pago is null and pj.fecha_inicio_pago is null and (dcm.id_proceso_judicial_documento<4 or dcm.id_proceso_judicial_documento>=6)) ) or 
    (prestado=0 and (pj.estado<3 and pj.fecha_inicio_pago is not null) ) or 
    (prestado=1 and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ) or
    (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=prestado)
)
group by pj.id_instancia_judicial;
       
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarperfilcontar`(IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
SELECT
count(*) as total
from
perfil
where
nombre like concat(prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcronogramaxclientecontar`(IN `prcliente` INT(50), IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
BEGIN

select
sum(total) as total
from
(
    select
    count(vg.id_venta_cronograma) as total
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    where
    	v.vnt_estado<>3
    and
		v.id_cliente=prcliente
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) OR
        (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    (
        vg.cng_estado=1 and vg.tipo_cuota<>2
    )
union
    select
    count(cg.id_credito_cronograma) as total
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    where
    	c.estado<>3
    and
    	c.id_cliente=prcliente
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) OR
        (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    (
        cg.estado=1 and cg.tipo_cuota<>2
    )
) as resultado;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidacabeceraxId`(IN `prid` INT)
    NO SQL
begin

select
sv.idsalida_vendedor as id,
sv.sc_codigo as pecosa,
sv.id_sucursal as id_sucursal,
s.scs_nombre as sucursal,
sv.id_almacen as id_almacen,
al.alm_nombre as almacen,
sv.sc_fecha as fecha,
sv.sc_destino as destino,
sv.sc_guia as guia,
sv.sc_vehiculo_placa as vehiculo_placa,
sv.sc_chofer_dni as chofer_dni,
sv.sc_chofer_nombre as chofer_nombre,
sv.sc_observacion as observacion,
sv.sc_estado as id_estado,
case sv.sc_estado
when 1 then "Pendiente"
when 2 then "Cerrada"
when 3 then "Anulada"
end as estado
FROM
salida_cabecera as sv
inner join sucursal as s on
sv.id_sucursal = s.idsucursal
inner join almacen as al on
sv.id_almacen=al.idalmacen
where
idsalida_vendedor=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialxId`(IN `prproceso` INT)
    NO SQL
begin

select
pj.id_proceso_judicial as id,
pj.expediente as expediente,
dj.id_juzgado_distrito as id_juzgado_distrito,
dj.nombre as juzgado_distrito,
ij.id_juzgado_instancia as id_juzgado_instancia,
ij.nombre as juzgado_instancia,
jgj.id_juzgado_juez as id_juez,
jgj.nombre as juez,
jge.id_juzgado_juez as id_especialista,
jge.nombre as especialista,
pj.fecha_inicio as fecha_inicio,
pj.sumilla as sumilla,
_pjt.codigo as codigo,
_pjt.total_documentos as total_documentos,
c.idcliente as id_cliente,
c.clt_dni as cliente_dni,
c.clt_nombre as cliente_nombre,
pj.numero_cuotas as numero_cuotas,
pj.total as total,
COALESCE(ROUND(pj.total/pj.numero_cuotas,2),0) as monto_cuota,
pj.estado as estado
from
proceso_judicial as pj
inner join juzgado_instancia as ij on
pj.id_instancia_judicial=ij.id_juzgado_instancia
inner join juzgado_distrito as dj on
ij.id_juzgado_distrito=dj.id_juzgado_distrito
inner join juzgado_juez as jgj on
pj.juez=jgj.id_juzgado_juez
inner join juzgado_juez as jge ON
pj.especialista=jge.id_juzgado_juez
inner join cliente as c on
pj.id_cliente=c.idcliente
left join
(
	select
    pjt.id_proceso as id_proceso,
    count(pjt.id_proceso_judicial_transacciones) as total_documentos,
	GROUP_CONCAT(
        case
            when pjt.tipo_transaccion=1 then CONCAT(cr.codigo,'-',LPAD(cr.numero,3,'0'))
            when pjt.tipo_transaccion=2 then CONCAT(t.tln_serie,"-",t.tln_numero)
        end
        SEPARATOR " / "
	) as codigo
    from
    proceso_judicial_transacciones as pjt
    left join
    creditos as cr on
    (pjt.id_transaccion=cr.id_credito and pjt.tipo_transaccion=1)
    left join venta as v on
    (pjt.id_transaccion=v.idventa and pjt.tipo_transaccion=2)
    left join talonario as t on
    v.id_talonario=t.id_talonario
    where
    pjt.estado=1
    group by pjt.id_proceso
) as _pjt on
pj.id_proceso_judicial=_pjt.id_proceso
where
pj.id_proceso_judicial=prproceso
group BY
pj.id_proceso_judicial;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproducto`(IN `prtipo` VARCHAR(40) CHARSET utf8, IN `prmarca` VARCHAR(40) CHARSET utf8, IN `prmodelo` VARCHAR(40) CHARSET utf8, IN `prdescripcion` VARCHAR(40) CHARSET utf8, IN `prpreciominimo` INT, IN `prpreciomaximo` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `orden` VARCHAR(100) CHARSET utf8, IN `estado` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VTIPO VARCHAR(255);
DECLARE VMARCA VARCHAR(255);
DECLARE VMODELO VARCHAR(255);
DECLARE VDESCRIPCION VARCHAR(255);
DECLARE VPRECIO varchar(255);
DECLARE VESTADO varchar(255);

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SET VTIPO = concat("AND (t.tprd_nombre like CONCAT('%','", prtipo,"', '%')) ");

SET VMARCA = concat("AND (m.mrc_nombre like CONCAT('%','", prmarca,"', '%')) ");

SET VMODELO = concat("AND (md.mdl_nombre like CONCAT('%','", prmodelo,"', '%')) ");

IF ( isnull(prpreciominimo) and isnull(prpreciomaximo) ) then set VPRECIO="";
ELSEIF (isnull(prpreciomaximo)) then set VPRECIO=concat("and (",prpreciominimo,"<=p.prd_precio) ");
ELSEIF (isnull(prpreciominimo)) then set VPRECIO=concat("and (p.prd_precio <=",prpreciomaximo,") ");
ELSE SET VPRECIO=concat("and (",prpreciominimo,"<=p.prd_precio and p.prd_precio<=",prpreciomaximo,") ");
END IF;

SET VDESCRIPCION = concat("AND (p.prd_descripcion like CONCAT('%','", prdescripcion,"', '%')) ");

if(isnull(estado)) then set VESTADO="p.prd_estado<>3 ";
else set VESTADO=concat("p.prd_estado=",estado," ");
end if;

SET @SQLStatement = CONCAT(
"SELECT
p.idproducto as 'id',
t.tprd_nombre as 'tipo',
t.tiene_serie as tiene_serie,
m.mrc_nombre as 'marca',
md.mdl_nombre as 'modelo',
p.prd_descripcion as 'descripcion',
u.und_nombre as 'unidad_medida',
p.prd_precio as 'precio',
p.prd_estado as estado,
p.prd_foto as foto
FROM producto p
inner join modelo md on
md.id_modelo=p.id_modelo
INNER JOIN marca m ON 
m.id_marca=md.id_marca
INNER JOIN tipo_producto t ON 
t.id_tipo_producto=m.id_tipo_producto
INNER JOIN unidad_medida u ON
u.idunidad_medida=t.id_unidad_medida
WHERE ",
VESTADO,
VTIPO,
VMARCA,
VMODELO,
VDESCRIPCION,
VPRECIO,
" ORDER BY ",
orden,
" limit ",IP,",",TP);

PREPARE stmt FROM @SQLStatement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarpresupuestoproductos`(IN `prid` INT)
    NO SQL
select
pp.id_presupuesto_producto as id,
pp.id_producto as id_producto,
p.prd_descripcion as producto,
pp.id_producto_serie as id_serie,
ps.ps_serie as serie,
pp.pspp_precio as precio
from
presupuesto_producto as pp
inner join producto as p on
pp.id_producto=p.idproducto
left join producto_serie as ps on
pp.id_producto_serie=ps.id_producto_serie
where
pp.id_presupuesto=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmodelocontar`(IN `prtipo` VARCHAR(45) CHARSET utf8, IN `prmarca` VARCHAR(45) CHARSET utf8, IN `prnombre` VARCHAR(45) CHARSET utf8)
    READS SQL DATA
BEGIN

select count(md.id_modelo) as total
from
modelo md
inner join marca m on
md.id_marca = m.id_marca
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
where 
t.estado=1
and
m.estado = 1
and
md.estado = 1
and
(prtipo is null or t.tprd_nombre LIKE CONCAT('%',prtipo,'%'))
and
(prmarca is null or m.mrc_nombre LIKE CONCAT('%',prmarca,'%'))
and
(prnombre is null or md.mdl_nombre LIKE CONCAT('%',prnombre,'%'));

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialcontar`(IN `prexpediente` VARCHAR(30) CHARSET utf8, IN `prdistritojudicial` VARCHAR(50) CHARSET utf8, IN `prjuzgado` VARCHAR(50) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
begin

select
count(DISTINCT pj.id_proceso_judicial) as total
from
proceso_judicial as pj
left join 
(
    SELECT pjd1.*
    FROM proceso_judicial_detalle as pjd1
    WHERE
    pjd1.fecha = (SELECT pjd2.fecha
                 FROM proceso_judicial_detalle as pjd2
                 WHERE pjd2.id_proceso = pjd1.id_proceso            
                 ORDER BY pjd2.fecha DESC
                 LIMIT 1)
) as pjd on
pj.id_proceso_judicial=pjd.id_proceso
left join proceso_judicial_documento as dcm on
pjd.tipo_documento = dcm.id_proceso_judicial_documento
inner join juzgado_instancia as ij on
pj.id_instancia_judicial=ij.id_juzgado_instancia
inner join juzgado_distrito as dj on
ij.id_juzgado_distrito = dj.id_juzgado_distrito
left join
creditos as c on
pj.id_credito=c.id_credito
left join cliente as c1 on
c.id_cliente=c1.idcliente
left join venta as v on
pj.id_venta=v.idventa
left join talonario as t on
v.id_talonario=t.id_talonario
left join cliente as c2 on
v.id_cliente=c2.idcliente
where
pj.expediente like concat(prexpediente,"%")
AND
dj.nombre like CONCAT(prdistritojudicial,'%')
AND
ij.nombre like CONCAT(prjuzgado,'%')
and
(
    ( pj.id_venta>0 and c2.clt_dni like concat(prdni,"%") ) or
    ( pj.id_credito>0 and c1.clt_dni like concat(prdni,"%") )
)
and
(
    ( pj.id_venta>0 and c2.clt_nombre like concat(prnombre,"%") ) or
    ( pj.id_credito>0 and c1.clt_nombre like concat(prnombre,"%") )
)
and
(
    (prfechainicio is null and prfechafin is null) or
    (pj.fecha_inicio BETWEEN prfechainicio and prfechafin)
)
and
(
    (prestado=-3 and pj.estado<3) or
    (prestado=-2 and pj.estado=4) or
    (prestado=-1 and (pj.estado<3 and pj.fecha_inicio_pago is null) ) or 
    (prestado=0 and (pj.estado<3 and pj.fecha_inicio_pago is not null) ) or 
    (prestado=1 and (pj.estado<3 and dcm.id_proceso_judicial_documento is null) ) or
    (pj.estado<3 and pj.fecha_inicio_pago is null and dcm.id_proceso_judicial_documento=prestado)
);

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproveedor`(IN `prtipodocumento` INT, IN `prdocumento` VARCHAR(40) CHARSET utf8, IN `prnombre` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
idproveedor,
case when prv_tipo_documento =1 then 'DNI' else 'RUC' end as 'tipo_documento',
prv_documento,
prv_nombre,
prv_representante_legal,
foto,
prv_observacion
FROM
proveedor
WHERE
prv_estado = 1
AND
(prtipodocumento is null or prtipodocumento=prv_tipo_documento)
AND
(prdocumento is null or prv_documento like concat('%',prdocumento,'%'))
AND
(prnombre is null or prv_nombre like concat('%',prnombre,'%'))
limit IP,TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductosxsalida`(IN `prsalida` INT)
    READS SQL DATA
select
p.idproducto as id_producto,
p.prd_descripcion as descripcion,
count(DISTINCT sp.id_salida_detalle_producto) as cantidad,
sp.sdp_fecha_entrega as fecha
from
salida_detalle_producto as sp
inner join producto_serie as ps on
sp.id_producto_serie=ps.id_producto_serie
inner join producto as p on
ps.id_producto=p.idproducto
where
sp.id_salida_cabecera=prsalida
group by p.idproducto, sp.sdp_fecha_entrega$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarpresupuestocabeceraxId`(IN `prid` INT)
    NO SQL
select
p.id_tipo as id_tipo,
p.id_cliente as id_cliente,
c.clt_nombre as cliente,
c.clt_dni as cliente_dni,
v.idvendedor as id_vendedor,
v.vnd_nombre as vendedor,
p.psp_fecha as fecha,
p.psp_cuotas as cuotas,
p.psp_capital as capital,
p.psp_tasa as tasa,
p.psp_total as total,
p.pdf_autorizacion as autorizacion,
p.pdf_ddjj as pdf_ddjj,
p.pdf_transaccion as pdf_transaccion,
p.pdf_tarjeta as pdf_tarjeta,
p.pdf_compromiso as pdf_compromiso,
p.psp_estado as estado
from
presupuesto_cabecera as p
inner join cliente as c on
p.id_cliente=c.idcliente
left join vendedor as v on
p.id_vendedor=v.idvendedor
where
p.id_presupuesto=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidadetalleproductoxcabecera`(IN `prcabecera` INT, IN `prestado` INT)
    READS SQL DATA
select
d.id_salida_detalle_producto as id,
d.id_producto_serie as id_serie,
s.ps_serie as serie,
p.prd_descripcion as producto,
d.sdp_precio_minimo as precio_minimo,
d.sdp_precio_venta as precio_venta,
d.id_venta as id_venta,
concat(t.tln_serie,"-",t.tln_numero) as contrato,
d.sdp_estado as id_estado,
case d.sdp_estado
when 1 and sc.sc_estado=1 then "Disponible"
when 1 and sc.sc_estado=2 then "Devuelto"
when 2 then "Vendido"
when 3 then "Perdido"
when sc.sc_estado=3 then "Salida anulada"
end as estado
from
salida_detalle_producto as d
inner join salida_cabecera as sc on
sc.idsalida_vendedor=d.id_salida_cabecera
inner join producto_serie as s ON
d.id_producto_serie=s.id_producto_serie
inner join producto as p on
s.id_producto=p.idproducto
left join venta as v on
d.id_venta=v.idventa
left join talonario as t on
v.id_talonario=t.id_talonario
where
d.id_salida_cabecera=prcabecera
AND
((prestado=0 and d.sdp_estado>0) or d.sdp_estado=prestado)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductoseriecontarxsucursal`(IN `prsucursal` VARCHAR(40) CHARSET utf8, IN `prproducto` VARCHAR(50) CHARSET utf8, IN `prserie` VARCHAR(50) CHARSET utf8)
    READS SQL DATA
BEGIN

	select
    count(DISTINCT(ps.id_producto_serie)) as total
    from
    transaccion_detalle tdet
    inner join transaccion_cabecera tcab on
    tdet.id_movimiento_cabecera = tcab.idtransaccion_cabecera
    inner join almacen al on
    tcab.id_almacen = al.idalmacen
    inner join producto_serie as ps on
    tdet.id_producto_serie=ps.id_producto_serie
    inner join producto p on
    ps.id_producto = p.idproducto
    WHERE
    tcab.tsccab_estado = 1
    AND
    tdet.tscdet_estado=1
    AND
    (al.id_sucursal=prsucursal)
    AND
    ( ps.ps_serie like concat(prserie,'%') )
    and
	( p.prd_descripcion like concat(prproducto,"%") )
    AND
    (	select
        sum(t2.tscdet_cantidad)
        from transaccion_detalle as t2
        inner join transaccion_cabecera as c2 on
        t2.id_movimiento_cabecera=c2.idtransaccion_cabecera
        inner join almacen as a2 on
        c2.id_almacen=a2.idalmacen
        where
        t2.id_producto_serie=tdet.id_producto_serie
        and
        t2.tscdet_estado=1
        and
        c2.tsccab_estado=1
        and
        (a2.id_sucursal=prsucursal)
    )>0;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidadetallegastoxcabecera`(IN `prid` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
SELECT
sd.id_salida_detalle_gasto as id,
sd.sdg_fecha as fecha,
sd.id_vendedor as id_vendedor,
v.vnd_nombre as vendedor,
sd.sdg_monto as monto,
case sd.sdg_asignacion
when 1 then "Grupal"
when 2 then "Personal"
end as tipo,
sd.sdg_observacion as observacion
FROM
salida_detalle_gasto as sd
inner join vendedor as v on
sd.id_vendedor=v.idvendedor
WHERE
sd.id_salida_cabecera =prid
and
sd.sdg_estado=1
order by fecha desc, id desc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductoseriecontar`(IN `pralmacen` VARCHAR(40) CHARSET utf8, IN `prproducto` INT)
    READS SQL DATA
BEGIN

select count(*) as total
from
(
    select
    alm.alm_nombre as almacen,
    det.id_producto_serie as id_serie,
    ps.ps_serie as serie,
    ps.ps_color as color,
    ps.ps_almacenamiento as almacenamiento,
    ps.ps_precio_compra as precio,
    pv.prv_nombre as proveedor
    from transaccion_detalle as det
    inner join transaccion_cabecera cab on
    det.id_movimiento_cabecera = cab.idtransaccion_cabecera
    inner join almacen alm on
    cab.id_almacen = alm.idalmacen
    inner join producto_serie as ps on
    det.id_producto_serie=ps.id_producto_serie
    left join proveedor as pv on
    cab.id_proveedor=pv.idproveedor
    where
    det.id_producto_serie in
    (
        select
        ps.id_producto_serie
        from
        transaccion_detalle tdet
        inner join transaccion_cabecera tcab on
        tdet.id_movimiento_cabecera = tcab.idtransaccion_cabecera
        inner join almacen al on
        tcab.id_almacen = al.idalmacen
        inner join producto_serie as ps on
        tdet.id_producto_serie=ps.id_producto_serie
        inner join producto p on
        ps.id_producto = p.idproducto
        WHERE
        tcab.tsccab_estado = 1
        AND
        tdet.tscdet_estado=1
        AND
        (al.alm_nombre like concat('%',pralmacen,'%'))
        and
        (prproducto is null or prproducto=p.idproducto)
        AND
        (
            select
            sum(t2.tscdet_cantidad)
            from
            transaccion_detalle as t2 
            inner join transaccion_cabecera as c2 on 
            t2.id_movimiento_cabecera=c2.idtransaccion_cabecera 
            inner join almacen as a2 on 
            c2.id_almacen=a2.idalmacen 
            where
            t2.tscdet_estado=1
            and
            c2.tsccab_estado=1
            and
            t2.id_producto_serie=det.id_producto_serie 
            and
            a2.alm_nombre like concat('%',pralmacen,'%')
        )>0
    )
    group by
    det.id_producto_serie
    order by det.id_producto_serie
) total;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listaralmacenxsucursal`(IN `prsucursal` INT)
    NO SQL
select
idalmacen as id,
alm_nombre as nombre
from
almacen
where
id_sucursal=prsucursal$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialexpedientecontar`(IN `prexpediente` VARCHAR(50) CHARSET utf8)
    NO SQL
select
count(*) as total
from
proceso_judicial as pj
where
pj.expediente = trim(prexpediente)
and
pj.estado<>3$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarpresupuestocabeceracontar`(IN `prcliente` VARCHAR(40) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
SELECT
count(p.id_presupuesto) as total
from
presupuesto_cabecera as p
inner join cliente as c on
p.id_cliente=c.idcliente
WHERE
( (prestado=3 and p.psp_estado>0) or (p.psp_estado=prestado) )
and
(
    (prfechainicio is null and prfechafin is null) OR
    (p.psp_fecha BETWEEN prfechainicio and prfechafin)
)
and
( c.clt_nombre  like concat (prcliente,'%') )$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadocontar`(IN `pridjuzgadodistrito` INT, IN `prjuzgadodistrito` VARCHAR(50) CHARSET utf8, IN `prjuzgadojuez` VARCHAR(50) CHARSET utf8)
    NO SQL
select
    count(jj.id_juzgado_juez) as total
    from
    juzgado_juez as jj
    inner join juzgado_distrito as jd on
    jj.id_juzgado_distrito=jd.id_juzgado_distrito
    where
    jj.estado=1
    and
    jd.estado=1
    and
    (
        ( pridjuzgadodistrito>0 and jj.id_juzgado_distrito=pridjuzgadodistrito ) or
        ( pridjuzgadodistrito=0 and jd.nombre like concat(prjuzgadodistrito,'%') )
    )
	and
    jj.nombre like concat(prjuzgadojuez,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidacomisiones`(IN `prsalida` INT)
    NO SQL
select
vc.id_vendedor_comision as id,
vc.id_vendedor as id_vendedor,
v.vnd_nombre as vendedor,
vc.comision_efectiva_porcentaje as comision_efectiva_porcentaje,
vc.comision_efectiva as comision_efectiva,
vc.comision_retenida_porcentaje as comision_retenida_porcentaje,
vc.comision_retenida as comision_retenida
from
vendedor_comision as vc
inner join vendedor as v on
vc.id_vendedor=v.idvendedor
where
vc.id_salida=prsalida$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprovinciaxId`(IN `prid` INT)
    READS SQL DATA
select
p.id_provincia,
d.id_departamento,
p.prv_nombre
from
provincia p
inner join departamento d on
p.id_departamento = d.id_departamento
where
p.id_provincia=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadoinstanciacontar`(IN `pridjuzgadodistrito` INT, IN `prjuzgadodistrito` VARCHAR(50) CHARSET utf8, IN `prjuzgadoinstancia` VARCHAR(50) CHARSET utf8)
    NO SQL
begin

	select
    count(ji.id_juzgado_instancia) as total
    from
    juzgado_instancia as ji
    inner join juzgado_distrito as jd on
    ji.id_juzgado_distrito=jd.id_juzgado_distrito
    where
    ji.estado=1
    and
    jd.estado=1
    and
    (
        ( pridjuzgadodistrito>0 and ji.id_juzgado_distrito=pridjuzgadodistrito ) or
        ( pridjuzgadodistrito=0 and jd.nombre like concat(prjuzgadodistrito,'%') )
    )
	and
    ji.nombre like concat(prjuzgadoinstancia,'%');

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listardepartamentoxId`(IN `prid` INT)
    READS SQL DATA
select
id_departamento,
dpt_nombre
from
departamento
where
id_departamento=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidacabeceraventas`(IN `prsalida` INT)
    NO SQL
SELECT 
v.idventa as id,
concat(t.tln_serie,"-",t.tln_numero) as contrato,
sum(sp.sdp_precio_venta) as total,
IF(sp.sdp_precio_venta>=sp.sdp_precio_minimo,sum(sp.sdp_precio_venta),0) as comision
FROM venta as v
inner join talonario as t on
v.id_talonario=t.id_talonario
inner join salida_detalle_producto as sp on
v.idventa=sp.id_venta
WHERE
v.id_salida_venta=prsalida
group by
v.idventa$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialestadocontar`(IN `priddocumento` INT, IN `prdocumento` VARCHAR(50) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
select
    count(pje.id_proceso_judicial_estado) as total
    from
    proceso_judicial_estado as pje
    inner join proceso_judicial_documento as pjd on
    pje.id_proceso_judicial_documento=pjd.id_proceso_judicial_documento
    where
    pje.estado=1
    and
    pjd.estado=1
    and
    pje.nombre like concat(prnombre,'%')
    and
    (
        ( priddocumento=0 and pjd.nombre like concat(prdocumento,'%') ) or
        pjd.id_proceso_judicial_documento=priddocumento
    )
    
    order by pjd.nombre asc, pje.nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccioncabeceraxventa`(IN `prventa` INT)
    NO SQL
begin

select
idtransaccion_cabecera as id,
tsccab_observacion as observacion
from
transaccion_cabecera
where
id_venta=prventa
and
tsccab_estado=1;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsedescontar`(IN `prinstitucion` VARCHAR(40) CHARSET utf8, IN `prnombre` VARCHAR(40) CHARSET utf8)
    NO SQL
SELECT
    count(s.id_sede) as total
    from
    sede as s
    inner join institucion as i on
    s.id_institucion=i.id_institucion
    where
    s.sd_estado=1
    and
    i.inst_estado=1
    and
    i.inst_nombre like concat('%',prinstitucion,'%')
    and
    s.sd_nombre like concat('%',prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductosxsucursal`(IN `prsucursal` INT, IN `prnombre` VARCHAR(25) CHARSET utf8)
    READS SQL DATA
BEGIN

select
ps.id_producto as id,
p.prd_descripcion as nombre,
p.prd_precio as precio
from transaccion_detalle as det
inner join transaccion_cabecera cab on
det.id_movimiento_cabecera = cab.idtransaccion_cabecera
inner join almacen alm on
cab.id_almacen = alm.idalmacen
inner join producto_serie as ps on
det.id_producto_serie=ps.id_producto_serie
inner join producto as p on
ps.id_producto=p.idproducto
left join proveedor as pv on
cab.id_proveedor=pv.idproveedor
where
det.id_producto_serie in
(
    select
    tdet.id_producto_serie
    from
    transaccion_detalle tdet
    inner join transaccion_cabecera tcab on
    tdet.id_movimiento_cabecera = tcab.idtransaccion_cabecera
    inner join almacen al on
    tcab.id_almacen = al.idalmacen
    WHERE
    tcab.tsccab_estado = 1
    AND
    tdet.tscdet_estado=1
    AND
    (prsucursal is null or al.id_sucursal=prsucursal)
    and
    p.prd_descripcion like concat('%',prnombre,'%')
    AND
    (	#Verifica que la serie exista en la sucursal
        select
        sum(t2.tscdet_cantidad)
        from transaccion_detalle as t2
        inner join transaccion_cabecera as c2 on
        t2.id_movimiento_cabecera=c2.idtransaccion_cabecera
        inner join almacen as a2 on
        c2.id_almacen=a2.idalmacen
        and
        c2.tsccab_estado=1
        and
        t2.tscdet_estado=1
        where
        t2.id_producto_serie=det.id_producto_serie
        and
        a2.id_sucursal=prsucursal
    )>0
)
group by
ps.id_producto
order by p.prd_descripcion asc
limit 0, 5;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidadetallevendedorxcabecera`(IN `prid` INT)
    READS SQL DATA
BEGIN 

SELECT
sd.id_salida_detalle_vendedor as id,
sd.id_vendedor as id_vendedor,
v.vnd_nombre as vendedor,
sd.sdv_comision_efectiva as comision_efectiva,
sd.sdv_comision_retenida as comision_retenida,
# Se suman los vi�ticos personales por cada vendedor
sum(if(sg.sdg_asignacion=2 and sg.id_vendedor=sd.id_vendedor,sg.sdg_monto,0)) as viatico_personal,
# Se dividen los vi�ticos grupales entre todos
sum(if(sg.sdg_asignacion=1,sg.sdg_monto,0))/count(DISTINCT sd.id_salida_detalle_vendedor) as viatico_grupal
FROM
salida_detalle_vendedor as sd
inner join vendedor as v ON
sd.id_vendedor=v.idvendedor
left join salida_detalle_gasto as sg on
sd.id_salida_cabecera=sg.id_salida_cabecera
/*left join salida_detalle_producto as sp on
sd.id_salida_cabecera=sp.id_salida_cabecera*/
WHERE
sd.id_salida_cabecera =prid
GROUP by sd.id_vendedor;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproveedorxid`(IN `id` INT)
    READS SQL DATA
select
idproveedor as 'id',
prv_tipo_documento as 'tipo_documento',
prv_documento as 'documento',
prv_nombre as 'nombre',
prv_representante_legal as 'representante',
prv_observacion as 'observacion'
FROM
proveedor
WHERE
prv_estado = 1 and idproveedor = id$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidaviaticoxcabecera`(IN `prid` INT)
    NO SQL
SELECT
sd.id_salida_detalle_gasto as id,
sd.id_vendedor as id_vendedor,
v.vnd_nombre as vendedor,
sum(if(sd.sdg_asignacion=1,sd.sdg_monto,0)) as monto_grupal,
sum(if(sd.sdg_asignacion=2,sd.sdg_monto,0)) as monto_individual
FROM
salida_detalle_gasto as sd
inner join vendedor as v on
sd.id_vendedor=v.idvendedor
WHERE
sd.id_salida_cabecera =prid
and
sd.sdg_estado=1
group by sd.id_vendedor$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsubsedescontar`(IN `prinstitucion` VARCHAR(40) CHARSET utf8, IN `prsede` VARCHAR(40) CHARSET utf8, IN `prnombre` VARCHAR(40) CHARSET utf8)
    NO SQL
SELECT
    count(ss.id_subsede) as total
    from
    subsede as ss
    inner join sede as s on
    ss.id_sede=s.id_sede
    inner join institucion as i on
    s.id_institucion=i.id_institucion
    where
    ss.ssd_estado=1
    and
    s.sd_estado=1
    and
    i.inst_estado=1
    and
    i.inst_nombre like concat('%',prinstitucion,'%')
    and
    s.sd_nombre like concat('%',prsede,'%')
    and
    ss.ssd_nombre like concat('%',prnombre,'%')$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialdetalleanteriores`(IN `prproceso` INT)
    NO SQL
select
pjd.id_proceso_judicial_detalle as id,
pjd.tipo_documento as id_tipo_documento,
dcm.nombre as tipo_documento,
pjd.fecha as fecha,
pjd.numero as numero,
pjd.sumilla as sumilla,
pjd.archivo as archivo,
pjd.id_trabajador as id_trabajador,
v.vnd_nombre as trabajador,
pjd.comentarios as comentarios,
_log.fecha as fecha_creacion ,
_log.usuario as usuario_creacion ,
_log_editar.fecha as fecha_edicion ,
_log_editar.usuario as usuario_edicion
from
proceso_judicial_transferencia as pjt
inner join proceso_judicial_detalle as pjd on
pjt.id_proceso_antiguo=pjd.id_proceso
left join proceso_judicial_documento as dcm on
pjd.tipo_documento=dcm.id_proceso_judicial_documento
left join vendedor as v on
pjd.id_trabajador=v.idvendedor
left join
(
    select
    	lg0.id_referencia as id_referencia ,
    	lg0.fecha as fecha ,
    	u.usr_nombre as usuario
    from
    	log as lg0
    inner JOIn
    	usuario as u
    on
    	lg0.id_usuario = u.idusuario	
    inner join
    	log_referencia as lgr0
    on
    	lg0.id_log_referencia = lgr0.id_log_referencia
    inner join
    	log_accion as lga0
    on
    	lg0.id_log_accion = lga0.id_log_accion
    where
    	lgr0.tabla_referenciada = 'proceso_judicial_detalle'
    and
    	lga0.id_log_accion = 1
) as _log on
pjd.id_proceso_judicial_detalle = _log.id_referencia
left join
(
    select
    	lg1.id_referencia as id_referencia ,
    	lg1.fecha as fecha ,
    	u.usr_nombre as usuario
    from
    	log as lg1
    inner JOIn
    	usuario as u
    on
    	lg1.id_usuario = u.idusuario	
    inner join
    	log_referencia as lgr1
    on
    	lg1.id_log_referencia = lgr1.id_log_referencia
    inner join
    	log_accion as lga1
    on
    	lg1.id_log_accion = lga1.id_log_accion
    where
    	lgr1.tabla_referenciada = 'proceso_judicial_detalle'
    and
    	lga1.id_log_accion = 2
    order by
    	lg1.fecha desc
    LIMIT
    	1
) as _log_editar on
pjd.id_proceso_judicial_detalle = _log_editar.id_referencia
where
pjt.id_proceso_nuevo=prproceso
and
pjd.estado=1
order by
pjd.fecha desc,
pjd.id_proceso_judicial_detalle desc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialdetalle`(IN `prproceso` INT)
    READS SQL DATA
select
pjd.id_proceso_judicial_detalle as id,
pjd.tipo_documento as id_tipo_documento,
dcm.nombre as tipo_documento,
pjd.fecha as fecha,
pjd.numero as numero,
pjd.sumilla as sumilla,
pjd.archivo as archivo,
pjd.id_trabajador as id_trabajador,
v.vnd_nombre as trabajador,
pjd.id_estado as id_estado,
est.nombre as estado,
pjd.comentarios as comentarios,
pjd.fecha_notificacion_demandado as fecha_notificacion_demandado,
pjd.fecha_notificacion_cooperativa as fecha_notificacion_cooperativa,
pjd.fecha_notificacion_retorno as fecha_notificacion_retorno,
_log.fecha as fecha_creacion ,
_log.usuario as usuario_creacion ,
_log_editar.fecha as fecha_edicion ,
_log_editar.usuario as usuario_edicion
from
proceso_judicial_detalle as pjd
inner join proceso_judicial_estado as est on
pjd.id_estado=est.id_proceso_judicial_estado
left join proceso_judicial_documento as dcm on
pjd.tipo_documento=dcm.id_proceso_judicial_documento
left join vendedor as v on
pjd.id_trabajador=v.idvendedor
left join
(
    select
    	lg0.id_referencia as id_referencia ,
    	lg0.fecha as fecha ,
    	u.usr_nombre as usuario
    from
    	log as lg0
    inner JOIn
    	usuario as u
    on
    	lg0.id_usuario = u.idusuario	
    inner join
    	log_referencia as lgr0
    on
    	lg0.id_log_referencia = lgr0.id_log_referencia
    inner join
    	log_accion as lga0
    on
    	lg0.id_log_accion = lga0.id_log_accion
    where
    	lgr0.tabla_referenciada = 'proceso_judicial_detalle'
    and
    	lga0.id_log_accion = 1
) as _log on
pjd.id_proceso_judicial_detalle = _log.id_referencia
left join
(
    select
    	lg1.id_referencia as id_referencia ,
    	lg1.fecha as fecha ,
    	u.usr_nombre as usuario
    from
    	log as lg1
    inner JOIn
    	usuario as u
    on
    	lg1.id_usuario = u.idusuario	
    inner join
    	log_referencia as lgr1
    on
    	lg1.id_log_referencia = lgr1.id_log_referencia
    inner join
    	log_accion as lga1
    on
    	lg1.id_log_accion = lga1.id_log_accion
    where
    	lgr1.tabla_referenciada = 'proceso_judicial_detalle'
    and
    	lga1.id_log_accion = 2
    order by
    	lg1.fecha desc
    LIMIT
    	1
) as _log_editar on
pjd.id_proceso_judicial_detalle = _log_editar.id_referencia
where
pjd.id_proceso=prproceso
and
pjd.estado=1
order by pjd.fecha desc, pjd.id_proceso_judicial_detalle desc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprocesojudicialdocumentos`(IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin
	
    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

	select
    id_proceso_judicial_documento as id,
    nombre as nombre
    from
    proceso_judicial_documento
    where
    estado=1
    and
    nombre like concat(prnombre,'%')
    limit IP, TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductoseriexId`(IN `prid` INT)
    NO SQL
SELECT
ps.id_producto_serie as id,
ps.id_producto as id_producto,
p.prd_descripcion as producto,
ps.ps_serie as serie,
ps.ps_color as color,
ps.ps_almacenamiento as almacenamiento,
ps.ps_precio_compra as precio
from 
producto_serie as ps
inner join producto as p on
ps.id_producto=p.idproducto
WHERE
id_producto_serie=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonarioadjuntoxId`(IN `prtalonario` INT)
    NO SQL
select id_talonario_adjuntos , id_talonario , pdf_contrato , tipo_pago , id_cliente , fecha , monto , cuotas as cuota, observacion from talonario_adjuntos where id_talonario=prtalonario and estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcentrotrabajopnp`(IN `prdepartamento` VARCHAR(100) CHARSET utf8, IN `prprovincia` VARCHAR(100) CHARSET utf8, IN `prdistrito` VARCHAR(100) CHARSET utf8, IN `prcomisaria` VARCHAR(100) CHARSET utf8, IN `prdivision` VARCHAR(100) CHARSET utf8, IN `prtelefono` VARCHAR(100) CHARSET utf8, IN `prdireccion` VARCHAR(100) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

    SELECT
    ct.id_centro_trabajo_pnp as id_centro_trabajo_pnp ,
    coalesce(d.id_distrito, 0) as id_distrito ,
    coalesce(d.dst_nombre, '') as distrito ,
    coalesce(p.id_provincia, 0) as id_provincia ,
    coalesce(p.prv_nombre, '') as provincia ,
    coalesce(dp.id_departamento, 0) as id_departamento ,
    coalesce(dp.dpt_nombre, '') as departamento ,
    ct.comisaria as comisaria ,
    ct.division as division ,
    ct.telefono as telefono ,
    ct.direccion as direccion
    from
    centro_trabajo_pnp as ct
    left join distrito as d on
    ct.id_distrito = d.id_distrito
    left join provincia as p on
    d.id_provincia = p.id_provincia
    left join departamento as dp on
    p.id_departamento = dp.id_departamento
    where
    estado = 1
    and
    ( prdepartamento='' or dp.dpt_nombre like concat(prdepartamento, "%") )
    and
    ( prprovincia='' or p.prv_nombre like concat(prprovincia, "%") )
    AND
    ( prdistrito='' or d.dst_nombre like concat(prdistrito, "%") )
    AND
    ( prcomisaria='' or ct.comisaria like concat("%",prcomisaria, "%") )
    AND
    ( prdivision='' or ct.division like concat("%",prdivision, "%") )
    AND
    ( prtelefono='' or ct.telefono like concat(prtelefono, "%") )
    AND
    ( prdireccion='' or ct.direccion like concat(prdireccion, "%") )
    order by
    distrito asc
    limit IP,TP ;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsedeparametros`(IN `prid` INT)
    NO SQL
select
parametro_condicion,
parametro_domicilio,
parametro_autorizacion_1,
parametro_autorizacion_2
from
sede
where
id_sede=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidadetallegastoxcabeceracontar`(IN `prid` INT)
    MODIFIES SQL DATA
SELECT
count(sd.id_salida_detalle_gasto) as total
FROM
salida_detalle_gasto as sd
WHERE
sd.id_salida_cabecera =prid
and
sd.sdg_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartrabajadorxdocumento`(IN `prdocumento` VARCHAR(10) CHARSET utf8)
    NO SQL
SELECT
id_trabajador as id,
documento as documento,
nombre as nombre,
cargo as cargo,
hora_ingreso as hora_ingreso,
hora_salida as hora_salida,
foto as foto
from
trabajadores
where
documento=prdocumento$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonarioserie`()
    READS SQL DATA
SELECT DISTINCT
lpad(tln_serie, 3, "0") as serie
FROM
talonario
left join talonario_adjuntos ON
talonario.id_talonario=talonario_adjuntos.id_talonario
WHERE
tln_estado=1
and
(
    ( coalesce(talonario_adjuntos.id_talonario_adjuntos,0)=0 ) or
    (
        talonario_adjuntos.estado=1 and
        talonario_adjuntos.tipo_pago>=0
    )
)
order by serie desc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsucursal`(IN `prid` INT, IN `prnombre` VARCHAR(25) CHARSET utf8)
    READS SQL DATA
select
idsucursal as id,
scs_nombre as nombre
FROM
sucursal
WHERE
(prid is null or prid=idsucursal)
AND
(prnombre is null or scs_nombre like concat('%',prnombre,'%'))$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccioncabeceraxId`(IN `prid` INT)
    NO SQL
SELECT
cab.idtransaccion_cabecera as id,
al1.alm_nombre as almacen,
cab.id_tipo_transaccion as id_tipo_transaccion,
t.ttsc_nombre as tipo_transaccion,
cab.tsccab_referencia as referencia,
cab.id_proveedor as id_proveedor,
p.prv_nombre as proveedor,
c.clt_nombre as cliente,
s.sc_codigo as salida_venta,
al2.alm_nombre as sucursal,
v.vnd_nombre as vendedor,
cab.tsccab_fecha as fecha,
cab.tsccab_documento_referencia as documento,
cab.tsccab_observacion as observaciones,
cab.archivo as archivo
FROM
transaccion_cabecera as cab
inner join almacen as al1 on
cab.id_almacen=al1.idalmacen
inner join tipo_transaccion as t on
cab.id_tipo_transaccion=t.idtipo_transaccion
left join proveedor as p on
cab.id_proveedor=p.idproveedor
left join venta as vt ON
cab.id_venta=vt.idventa
left join cliente as c ON
vt.id_cliente=c.idcliente
left join salida_cabecera as s on
cab.id_salida_venta=s.idsalida_vendedor
left join almacen as al2 on
cab.id_sucursal=al2.idalmacen
left join vendedor as v on
cab.id_vendedor=v.idvendedor
WHERE
cab.idtransaccion_cabecera=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonariodetalle`(IN `prserie` VARCHAR(8) CHARSET utf8)
    NO SQL
begin

	select
    	talonario.id_talonario as id_talonario ,
    	talonario.tln_serie as serie ,
        talonario.tln_numero as numero ,
        venta_secundario.idventa as id_venta ,
        venta_secundario.vnt_tipoventa as tipo_venta ,
        venta_secundario.idcliente as id_cliente ,
        venta_secundario.clt_nombre as cliente_nombre ,
        salida_cabecera.idsalida_vendedor as id_salida_vendedor ,
        salida_cabecera.sc_codigo as salida_codigo ,
        talonario_adjuntos.pdf_contrato as pdf_contrato ,
        coalesce(talonario_adjuntos.id_cliente, -1) as id_cliente_adjunto ,
        case when talonario_adjuntos.id_cliente>0
        then cliente2.clt_nombre
        else 'No se ha especificado cliente'
        end as cliente_adjunto,
        talonario_adjuntos.tipo_pago as tipo_pago_adjunto ,
        talonario_adjuntos.fecha as fecha_adjunto ,
        talonario_adjuntos.monto as monto_adjunto ,
        talonario_adjuntos.cuotas as cuotas_adjunto ,
        case
        when venta_secundario.vnt_fecha is not null then venta_secundario.vnt_fecha
        when talonario_adjuntos.fecha is not null then talonario_adjuntos.fecha
        else "-" end as fecha ,
        case
        when venta_secundario.idventa is not null then venta_secundario.vnt_observaciones
        when talonario_adjuntos.id_talonario_adjuntos is not null then talonario_adjuntos.observacion
        else "-" end as observacion ,
        venta_secundario.pagado ,
        venta_secundario.liquidado ,
        talonario_adjuntos.tipo_pago ,
        case talonario.tln_estado
            when 0 then 'Inactivo'
            when 1 then 'Activo'
            when 2 then 'Utilizado'
            when 3 then 'Consignación'
        end as estado ,
        talonario.tln_estado as id_estado
    from
    	talonario
    left join
    (
        select
        venta.idventa as idventa ,
        venta.id_talonario as id_talonario ,
        venta.vnt_tipoventa as vnt_tipoventa ,
        cliente.idcliente as idcliente ,
        cliente.clt_nombre as clt_nombre ,
        venta.vnt_fecha as vnt_fecha ,
        venta.vnt_observaciones as vnt_observaciones ,
        if(round(sum(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado),2)=0,1,0) as pagado ,
        case when lq.id_liquidacion is not null then 1 else 0 end as liquidado
        from
        venta
        inner join cliente on
        venta.id_cliente = cliente.idcliente
        inner join venta_cronograma as vg on
        venta.idventa = vg.id_venta
        left join
        liquidaciones as lq
        on
        (venta.idventa = lq.id_venta and lq.estado = 1)
        where
        venta.vnt_estado<>3
        and
        vg.cng_estado<>3
    ) as venta_secundario on
    ( talonario.id_talonario = venta_secundario.id_talonario and talonario.tln_estado = 2 )
    left join
    	salida_cabecera
    on
    	(talonario.tln_estado=3 and talonario.id_salida_cabecera=salida_cabecera.idsalida_vendedor)
    left join
    	talonario_adjuntos
    on
    	(talonario.id_talonario = talonario_adjuntos.id_talonario and talonario_adjuntos.estado=1)
    left join
    	cliente as cliente2
    on
    	talonario_adjuntos.id_cliente = cliente2.idcliente
    where
    	tln_serie = prserie 
    and
    	talonario.tln_estado >= 0
   	group by
    	talonario.id_talonario
    order BY
    	talonario.tln_numero asc ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproveedorcontar`(IN `prtipodocumento` INT, IN `prdocumento` VARCHAR(40) CHARSET utf8, IN `prnombre` VARCHAR(40) CHARSET utf8)
    READS SQL DATA
BEGIN

select
count(idproveedor) as total
FROM
proveedor
WHERE
prv_estado = 1
AND
(prtipodocumento is null or prtipodocumento=prv_tipo_documento)
AND
(prdocumento is null or prv_documento like concat('%',prdocumento,'%'))
AND
(prnombre is null or prv_nombre like concat('%',prnombre,'%'));
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductoxId`(IN `prid` INT)
    NO SQL
SELECT p.idproducto, t.id_tipo_producto, m.id_marca, md.id_modelo,
p.prd_descripcion, u.und_nombre, p.prd_precio, p.prd_maximo_cuotas FROM producto p
inner join modelo md on
md.id_modelo=p.id_modelo
INNER JOIN marca m ON 
m.id_marca=md.id_marca
INNER JOIN tipo_producto t ON 
t.id_tipo_producto=m.id_tipo_producto
INNER JOIN unidad_medida u ON
u.idunidad_medida=t.id_unidad_medida
WHERE
(prid=p.idproducto)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonarios`(IN `prserie` VARCHAR(10) CHARSET utf8, IN `prnumero` VARCHAR(10) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

select
t.tln_serie as serie,
MIN(CAST(t.tln_numero AS UNSIGNED)) as numero_inicio,
MAX(CAST(t.tln_numero AS UNSIGNED)) as numero_fin,
count(t.id_talonario) as total,
count(if(tln_estado=0,1,null)) as anulados,
count(if(tln_estado=1,1,null)) as disponibles,
count(if(tln_estado=2,1,null)) as utilizados,
count(if(tln_estado=3,1,null)) as consignacion
from
talonario as t
where
t.tln_serie like concat(prserie,'%')
and
convert(t.tln_numero, nchar) like concat(prnumero,"%")
and
t.tln_estado>0
group by t.tln_serie
having
( count(t.id_talonario)-count(if(t.tln_estado=0,1,null)) )>0
order by t.tln_serie desc
limit IP,TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonarioscontar`(IN `prserie` VARCHAR(8) CHARSET utf8, IN `prnumero` INT)
    NO SQL
BEGIN

/*select
COUNT(DISTINCT t.tln_serie) as total
from
talonario as t
where
t.tln_serie like concat(prserie,'%')
having
( count(t.id_talonario)-count(if(t.tln_estado=0,1,null)) )>0;*/

select count(*) as total from
(
    select
    t.tln_serie as serie,
    MIN(CAST(t.tln_numero AS UNSIGNED)) as numero_inicio,
    MAX(CAST(t.tln_numero AS UNSIGNED)) as numero_fin,
    count(t.id_talonario) as total,
    count(if(tln_estado=0,1,null)) as anulados,
    count(if(tln_estado=1,1,null)) as disponibles,
    count(if(tln_estado=2,1,null)) as utilizados,
    count(if(tln_estado=3,1,null)) as consignacion
    from
    talonario as t
    where
    t.tln_serie like concat(prserie,'%')
    and
    t.tln_estado>=0
    group by t.tln_serie
    having
    ( count(t.id_talonario)-count(if(t.tln_estado=0,1,null)) )>0
    order by t.tln_serie desc
) as total;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonarionumero`(IN `prserie` INT)
    NO SQL
SELECT
talonario.id_talonario as id,
talonario.tln_serie as serie, 
talonario.tln_numero as numero
FROM
talonario
left join talonario_adjuntos ON
talonario.id_talonario=talonario_adjuntos.id_talonario
WHERE
tln_estado=1
AND
(prserie is null or talonario.tln_serie=prserie)
and
(
    ( coalesce(talonario_adjuntos.id_talonario_adjuntos,0)=0 ) or
    (
        talonario_adjuntos.estado=1 and
        talonario_adjuntos.tipo_pago>=0
    )
)
order by talonario.tln_numero desc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsubsedes`(IN `prinstitucion` VARCHAR(40) CHARSET utf8, IN `prsede` VARCHAR(40) CHARSET utf8, IN `prnombre` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

	SELECT
    ss.id_subsede as id,
    i.id_institucion as id_institucion,
    i.inst_nombre as institucion,
    s.id_sede as id_sede,
    s.sd_nombre as sede,
    ss.ssd_nombre as nombre,
    ss.ssd_abreviatura as abreviatura
    from
    subsede as ss
    inner join sede as s on
    ss.id_sede=s.id_sede
    inner join institucion as i on
    s.id_institucion=i.id_institucion
    where
    ss.ssd_estado=1
    and
    s.sd_estado=1
    and
    i.inst_estado=1
    and
    i.inst_nombre like concat('%',prinstitucion,'%')
    and
    s.sd_nombre like concat('%',prsede,'%')
    and
    ss.ssd_nombre like concat('%',prnombre,'%')
    order by i.inst_nombre asc, s.sd_nombre asc, ss.ssd_nombre asc
    limit IP, TP ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartipoproducto`(IN `prid` INT, IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prum` VARCHAR(45))
    READS SQL DATA
select
tp.id_tipo_producto,
tp.tprd_nombre,
tp.tiene_serie,
u.und_nombre
from
tipo_producto tp
inner join unidad_medida u on
tp.id_unidad_medida = u.idunidad_medida
where
tp.estado = 1
and
(prid is null or tp.id_tipo_producto=prid)
and
(prnombre is null or tp.tprd_nombre like CONCAT('%', prnombre, '%'))
and
(prum is null or u.und_nombre like concat('%', prum, '%'))
order by tp.tprd_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartipoproductocontar`(IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prum` VARCHAR(45) CHARSET utf8)
    READS SQL DATA
BEGIN

select count(id_tipo_producto) as total
from
tipo_producto tp
inner join unidad_medida u on
tp.id_unidad_medida = u.idunidad_medida
where tp.estado = 1 and
(prnombre is null or tp.tprd_nombre like CONCAT('%', prnombre, '%'))
and
(prum is null or u.und_nombre like concat('%', prum, '%'));

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransacciontipo`(IN `prid` INT)
    READS SQL DATA
SELECT
idtipo_transaccion,
ttsc_tipo,
ttsc_nombre
from
tipo_transaccion
WHERE
(prid is null or ttsc_tipo=prid)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartareo`(IN `prdocumento` VARCHAR(10) CHARSET utf8, IN `prtrabajador` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
tt.id_tareo as id,
tt.fecha as fecha,
tt.id_trabajador as id_trabajador,
t.documento as documento,
t.nombre as nombre,
tt.hora_ingreso as hora_ingreso,
tt.ingreso as ingreso,
IF(
	TIME_TO_SEC(tt.hora_ingreso)>TIME_TO_SEC(tt.ingreso),
    0,
    ROUND( ( (TIME_TO_SEC(tt.ingreso)-TIME_TO_SEC(tt.hora_ingreso)) /60),2)
) as tardanza_ingreso,
tt.hora_salida as hora_salida,
tt.salida as salida,
IF(
	TIME_TO_SEC(tt.salida)>TIME_TO_SEC(tt.hora_salida),
    0,
    ROUND( ( (TIME_TO_SEC(tt.hora_salida)-TIME_TO_SEC(tt.salida)) /60),2)
) as premura_salida,
tt.horas_trabajadas as horas_trabajadas
from
trabajadores_tareo as tt
inner join trabajadores as t on
t.id_trabajador=tt.id_trabajador
WHERE
t.estado=1
and
tt.estado=1
and
t.documento like concat('%',prdocumento,'%')
and
t.nombre like concat('%',prtrabajador,'%')
and
(
    (prfechainicio is null and prfechafin is null) or
    (tt.fecha BETWEEN prfechainicio and prfechafin)
)
order by tt.fecha asc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearprocesojudicialestado`(IN `prdocumento` INT, IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
insert into
proceso_judicial_estado
set
id_proceso_judicial_documento=prdocumento,
nombre=prnombre$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransacciondexId`(IN `prid` INT)
    READS SQL DATA
select
idtransaccion_detalle,
id_movimiento_cabecera,
id_producto_serie,
tscdet_cantidad,
tscdet_precio,
tscdet_estado
from
transaccion_detalle
WHERE
idtransaccion_detalle=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventacronogramainteres`(IN `prventa` INT)
    NO SQL
begin

	-- Se verifica si se han pagado alguna cuota de la penalidad
	set @pagado = (
        select
            sum(vc.cng_monto_pagado)
        from
            venta as v
        inner join
            venta_cronograma as vc
        on
            v.idventa = vc.id_venta
        WHERE
            v.estado_interes = 3
        and
            vc.id_venta = prventa
        and
            vc.tipo_cuota = 3
        group by
            v.idventa
	);
    
    -- Si se ha pagado alguna cuota de la penalidad, no se hace nada y se retorna 0
    if @pagado > 0 then
    	select 0 as resultado;
    -- Si no se han hecho pagos, se anulan los intereses
    else
    	update
        	venta
         set
         	estado_interes = 2 
         where
         	idventa = prventa ;
            
    	update
        	venta_cronograma
        set
        	cng_estado=3
        where
        	tipo_cuota=3
        and
        	id_venta = prventa ;
    end if ;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransacciondetallecontar`(IN `prcabecera` INT, IN `prproducto` VARCHAR(40) CHARSET utf8, IN `prserie` VARCHAR(40) CHARSET utf8)
    READS SQL DATA
select
count(tdet.idtransaccion_detalle) as total
from transaccion_detalle as tdet
left join producto_serie as ps on
tdet.id_producto_serie=ps.id_producto_serie
left join producto as p on
ps.id_producto=p.idproducto
WHERE
tdet.tscdet_estado=1
AND
(prcabecera is null or tdet.id_movimiento_cabecera=prcabecera)
AND
(prproducto is null or p.prd_descripcion like concat('%',prproducto,'%'))
AND
(prserie is null or ps.ps_serie like concat('%',prserie,'%'))$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarseguimientoxdocumento`(IN `prtipo` INT, IN `prid` INT)
    READS SQL DATA
BEGIN

select
s.id_seguimiento as id,
s.id_courier as id_courier,
c.nombre as courier,
s.fecha as fecha,
s.numero_seguimiento as numero_seguimiento,
s.foto as foto,
s.fecha_recepcion as fecha_recepcion,
s.usuario_recepcion as usuario_recepcion,
s.observacion as observacion
from
seguimiento_documentos as s
inner join courier as c on
s.id_courier=c.id_courier
where
s.estado=1
and
(
	(prtipo=1 and s.id_venta=prid) or
    (prtipo=2 and s.id_credito=prid)
);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductoxnombre`(IN `prnombre` VARCHAR(45))
    READS SQL DATA
SELECT p.idproducto, t.id_tipo_producto, m.id_marca, md.id_modelo,
p.prd_descripcion, u.und_nombre, p.prd_precio FROM producto p
inner join modelo md on
md.id_modelo=p.id_modelo
INNER JOIN marca m ON 
m.id_marca=md.id_marca
INNER JOIN tipo_producto t ON 
t.id_tipo_producto=m.id_tipo_producto
INNER JOIN unidad_medida u ON
u.idunidad_medida=t.id_unidad_medida
WHERE
(prnombre=p.prd_descripcion)
and
p.prd_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarstockcontar`(IN `pralmacen` VARCHAR(40) CHARSET utf8, IN `prtipo` VARCHAR(40) CHARSET utf8, IN `prmarca` VARCHAR(40) CHARSET utf8, IN `prmodelo` VARCHAR(40) CHARSET utf8, IN `prdescripcion` VARCHAR(40) CHARSET utf8)
    READS SQL DATA
select COUNT(*) as total from (
select
al.alm_nombre,
p.prd_descripcion
from
transaccion_detalle tdet
inner join transaccion_cabecera tcab on
tdet.id_movimiento_cabecera = tcab.idtransaccion_cabecera
inner join almacen al on
tcab.id_almacen = al.idalmacen
inner join producto_serie as ps on
tdet.id_producto_serie=ps.id_producto_serie
inner join producto p on
ps.id_producto = p.idproducto
inner join modelo md on
p.id_modelo = md.id_modelo
inner join marca m on
md.id_marca = m.id_marca
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
inner join unidad_medida u on
t.id_unidad_medida = u.idunidad_medida
WHERE
tcab.tsccab_estado = 1
AND
tdet.tscdet_estado=1
AND
(al.alm_nombre like CONCAT('%',pralmacen,'%'))
AND
(t.tprd_nombre like CONCAT('%',prtipo,'%'))
AND
(m.mrc_nombre like CONCAT('%',prmarca,'%'))
AND
(md.mdl_nombre like CONCAT('%',prmodelo,'%'))
AND
(p.prd_descripcion like CONCAT('%',prdescripcion,'%'))
group by tcab.id_almacen, ps.id_producto
having SUM(tdet.tscdet_cantidad)>0
) groups$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductocontar`(IN `prtipo` VARCHAR(40) CHARSET utf8, IN `prmarca` VARCHAR(40) CHARSET utf8, IN `prmodelo` VARCHAR(40) CHARSET utf8, IN `prdescripcion` VARCHAR(40) CHARSET utf8, IN `prpreciominimo` INT, IN `prpreciomaximo` INT)
    READS SQL DATA
select count(p.idproducto) as total
FROM producto p
inner join modelo md on
md.id_modelo=p.id_modelo
INNER JOIN marca m ON 
m.id_marca=md.id_marca
INNER JOIN tipo_producto t ON 
t.id_tipo_producto=m.id_tipo_producto
INNER JOIN unidad_medida u ON
u.idunidad_medida=t.id_unidad_medida
WHERE
(p.prd_estado=1)
AND
(prtipo is null or t.tprd_nombre like CONCAT('%', prtipo, '%'))
and
(prmarca is null or m.mrc_nombre like CONCAT('%', prmarca, '%'))
and
(prmodelo is null or md.mdl_nombre like CONCAT('%', prmodelo, '%'))
and
(prdescripcion is null or p.prd_descripcion like CONCAT('%', prdescripcion, '%'))
AND
((prpreciominimo is null and prpreciomaximo is null) OR
(prpreciominimo is null and p.prd_precio<=prpreciomaximo) OR
(prpreciomaximo is null and p.prd_precio>=prpreciominimo) OR
(prpreciominimo<=p.prd_precio<=prpreciomaximo))$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartipodocumento`()
    READS SQL DATA
    COMMENT 'Listar tipos de documentos'
SELECT idtipo_documento,
tdcm_nombre
FROM tipo_documento$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_crearventacanje`(IN `prventanueva` INT, IN `prventaanterior` INT)
    NO SQL
begin

update
venta
set
id_venta_canje=prventanueva,
vnt_estado=3
where
idventa=prventaanterior;

update
venta
set
id_venta_canje=prventaanterior
where
idventa=prventanueva;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarseguimientoxId`(IN `prid` INT)
    READS SQL DATA
BEGIN

select
s.id_seguimiento as id,
if(s.id_venta is null, "credito","venta") as tipo,
s.id_courier as id_courier,
c.nombre as courier,
s.fecha as fecha,
s.numero_seguimiento as numero_seguimiento,
s.foto as foto,
s.fecha_recepcion as fecha_recepcion,
s.usuario_recepcion as usuario_recepcion,
s.observacion as observacion,
s.estado as id_estado
from
seguimiento_documentos as s
inner join courier as c on
s.id_courier=c.id_courier
where
s.id_seguimiento=prid;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccionescronogramaxcliente`(IN `prid` INT)
    NO SQL
BEGIN


select
resultado.fecha_vencimiento as fecha_vencimiento,
SUM(resultado.cuota_mensual) as cuota_mensual
from
(
select
    cg.fecha_vencimiento as fecha_vencimiento,
    cg.monto_capital+cg.monto_interes as cuota_mensual
    from
    credito_cronograma as cg
    inner join creditos as c on
    c.id_credito=cg.id_credito
    where
    c.estado=1
    and
    cg.estado=1
    and
    c.tipo>1
    and
    c.id_cliente=prid
    group by month(cg.fecha_vencimiento)
    
union

select
    cg.cng_fecha_vencimiento as fecha_vencimiento,
    cg.cng_monto_cuota as cuota_mensual
    from
    venta_cronograma as cg
    left join venta as v on
    v.idventa=cg.id_venta
    where
    v.vnt_estado=1
    and
    cg.cng_estado=1
    and
    v.id_cliente=prid
    group by month(cg.cng_fecha_vencimiento)

) as resultado
group by month(resultado.fecha_vencimiento)
order by resultado.fecha_vencimiento;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccionesxclienteconinteres`(IN `prid` INT)
    NO SQL
BEGIN
select
*
from
(
	select
    c.id_credito as id,
    "1" as id_tipo,
    "Préstamo" as tipo,
    c.id_cliente as id_cliente,
    c.fecha as fecha,
    concat(c.codigo,"-",LPAD(c.numero,3,"0")) as documento,
    c.total as total,
    sum(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado) as monto_pendiente
    from
    creditos as c
    inner join credito_cronograma as cg on
    c.id_credito=cg.id_credito
    where
    c.estado=1
    and
    c.tipo>1
    and
    c.id_cliente=prid
    group by c.id_credito
    having
    count(if(cg.estado=1,1,null))>0
    
union

    select
    v.idventa as id,
    "2" as id_tipo,
    "Venta" as tipo,
    v.id_cliente as id_cliente,
    v.vnt_fecha as fecha,
    CONCAT(t.tln_serie,"-", t.tln_numero) as documento,
    v.vnt_total as total,
    sum(cg.cng_monto_cuota + cg.cng_interes - cg.cng_monto_pagado ) as monto_pendiente
    from
    venta as v
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    left join venta_cronograma as cg on
    v.idventa=cg.id_venta
    where
    v.vnt_estado=1
    and
    v.id_cliente=prid
    group by v.idventa
    having
    count(if(cg.cng_estado=1,1,null))>0
) as resultado
order by resultado.fecha desc, resultado.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventa`(IN `prcliente` VARCHAR(100) CHARSET utf8, IN `prdni` VARCHAR(10) CHARSET utf8, IN `prtipoventa` INT, IN `prestadopagos` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `orden` VARCHAR(20) CHARSET utf8)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VCLIENTE VARCHAR(255);
DECLARE VDNI VARCHAR(255);
DECLARE VTIPOVENTA VARCHAR(255);
DECLARE VFECHA VARCHAR(255);
DECLARE VESTADO VARCHAR(255);
DECLARE VESTADOPAGOS varchar(255);

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SET VCLIENTE = concat(" AND
(c.clt_nombre like CONCAT('", prcliente,"', '%')) ");

SET VDNI = concat(" AND
(c.clt_dni like CONCAT('", prdni,"', '%')) ");

IF ( prtipoventa=0 ) then set VTIPOVENTA="";
ELSE set VTIPOVENTA=concat("AND (v.vnt_tipoventa=",prtipoventa,") ");
END IF;

IF prestado=0 then set VESTADO="";
ELSE set VESTADO=concat("AND (v.vnt_estado=",prestado,") ");
END IF;

IF (isnull(prfechainicio) and isnull(prfechafin)) then set VFECHA="";
ELSEIF (isnull(prfechafin)) then set VFECHA=CONCAT("AND (DATE(v.vnt_fecha)>='",prfechainicio,"') ");
ELSEIF (isnull(prfechainicio)) then set VFECHA=CONCAT("AND (DATE(v.vnt_fecha)<='",prfechafin,"') ");
ELSE set VFECHA=CONCAT("AND (DATE(v.vnt_fecha) between '",prfechainicio,"' and '",prfechafin,"') ");
END IF;



IF (prestadopagos=0) then set VESTADOPAGOS="";
elseif prestadopagos=1 then set VESTADOPAGOS=" having ( max(vg.cng_fecha_vencimiento)>CURDATE() and sum(if(vg.cng_fecha_vencimiento<CURDATE(),vg.cng_monto_cuota-vg.cng_monto_pagado,0)) = 0 ) " ;
elseif prestadopagos=2 then set VESTADOPAGOS=" having ( max(vg.cng_fecha_vencimiento)>CURDATE() and sum(if(vg.cng_fecha_vencimiento<CURDATE(),vg.cng_monto_cuota-vg.cng_monto_pagado,0)) > 0 ) " ;
elseif prestadopagos=3 then set VESTADOPAGOS=" having ( max(vg.cng_fecha_vencimiento)<CURDATE() and sum(vg.cng_monto_cuota-vg.cng_monto_pagado) = 0 ) " ;
elseif prestadopagos=4 then set VESTADOPAGOS=" having ( max(vg.cng_fecha_vencimiento)<CURDATE() and sum(vg.cng_monto_cuota-vg.cng_monto_pagado) > 0 ) " ;
else set VESTADOPAGOS="";
end if;

set @Statement=concat("SELECT
v.idventa as id,
concat(t.tln_serie,'-',t.tln_numero) as contrato,
inst.inst_nombre as institucion,
s.sd_nombre as sede,
ssd.ssd_nombre as subsede,
v.id_cliente as id_cliente,
c.clt_nombre as cliente_nombre,
v.vnt_fecha as fecha,
v.vnt_fecha_inicio as fecha_inicio,
v.vnt_inicial as monto_inicial,
tp.tpag_nombre as tipo_pago,
v.vnt_total as monto_total,
case v.vnt_tipoventa
    when 1 then 'Directa'
    when 2 then 'Salida'
END
as tipo_venta,
v.vnt_observaciones as observaciones,
(v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota as cuota_estandar,
SUM(vg.cng_monto_pagado) as monto_pagado,
sum(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado) as monto_pendiente,
sum(if(vg.cng_fecha_vencimiento<CURDATE(),vg.cng_monto_cuota+cng_interes-vg.cng_monto_pagado,0)) as monto_pendiente_hasta_hoy,
if(
sum(if(vg.cng_fecha_vencimiento<CURDATE(),vg.cng_monto_cuota+cng_interes-vg.cng_monto_pagado,0)) >=
2*(v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota
,1,0) as cumple_penalidad,
count(if(vg.cng_estado=1,1,null)) + count(if(vg.cng_estado=2,1,null)) as numero_cuotas,
count(if(vg.cng_estado=1,1,null)) as cuotas_pendientes,
count(if(vg.cng_estado=2,1,null)) as cuotas_pagadas,
count(distinct _pjt.id_proceso) as numero_procesos,
v.ultima_fecha_pago as ultima_fecha_pago,
v.estado_penalidad as estado_penalidad ,
lq.id_liquidacion as id_liquidacion ,
if(lq.id_liquidacion is not null or sum(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado) = 0,1,0) as pagado ,
v.vnt_estado as estado
from venta as v
inner join talonario as t on
v.id_talonario=t.id_talonario
inner join cliente as c ON
v.id_cliente=c.idcliente
inner join tipo_pago as tp ON
v.id_tipopago=tp.idtipo_pago
INNER JOIN subsede as ssd on
c.id_sub_sede = ssd.id_subsede
INNER JOIN sede as s on
ssd.id_sede = s.id_sede
INNER JOIN institucion as inst on
s.id_institucion = inst.id_institucion
left join venta_cronograma as vg on
v.idventa = vg.id_venta
left join
(
    select
    pjt.id_transaccion as id_transaccion,
    pjt.tipo_transaccion as tipo_transaccion,
    pj.id_proceso_judicial as id_proceso
    from
    proceso_judicial_transacciones as pjt
    left join proceso_judicial as pj on
    (pjt.id_proceso = pj.id_proceso_judicial and pj.estado=1 )
    left join 
    (
        SELECT pjd1.*
        FROM proceso_judicial_detalle as pjd1
        WHERE
        pjd1.fecha = (SELECT pjd2.fecha
                     FROM proceso_judicial_detalle as pjd2
                     WHERE pjd2.id_proceso = pjd1.id_proceso            
                     ORDER BY pjd2.fecha DESC
                     LIMIT 1)
    ) as pjd on
    pj.id_proceso_judicial=pjd.id_proceso
    where
    pjt.estado=1
    and
    pj.estado<3
    and
    pj.fecha_inicio_pago is null
    and
    ( pjd.tipo_documento is null or pjd.tipo_documento<> 5 )
    group by pjt.id_proceso_judicial_transacciones
) as _pjt on
(_pjt.id_transaccion=v.idventa and _pjt.tipo_transaccion=2)
left join
liquidaciones as lq
on
(v.idventa = lq.id_transaccion and lq.tipo = 2 and lq.estado = 1)
WHERE
1 ",
VESTADO,
VTIPOVENTA,
VCLIENTE,
VDNI,
VFECHA,
" group by v.idventa ",
    VESTADOPAGOS,
" order by ",
orden,
", id desc",
" limit ",IP,",",TP
);
                      
PREPARE stmt FROM @Statement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonariosxcabecera`(IN `prsalida` INT)
    NO SQL
select
t.tln_serie as serie,
MIN(t.tln_numero) as numero_inicio,
MAX(t.tln_numero) as numero_fin,
st.sdt_fecha_entrega as fecha
from
salida_detalle_talonario as st
inner join talonario as t on
st.id_talonario=t.id_talonario
where
st.id_salida_cabecera=prsalida
group by t.tln_serie, st.sdt_fecha_entrega$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsubsede`(IN `pid_sede` INT, IN `pssd_nombre` VARCHAR(60) CHARSET utf8)
    READS SQL DATA
SELECT ssd.id_subsede, ssd.ssd_nombre, ssd.ssd_abreviatura,
ssd.ssd_representante_legal, dist.dst_nombre, ssd.ssd_direccion,
ssd.ssd_telefono, ssd.ssd_codigo_cooperativa
FROM subsede ssd
INNER JOIN distrito dist on ssd.id_distrito = dist.id_distrito
inner join sede as sd on
ssd.id_sede=sd.id_sede
inner join institucion as inst on
sd.id_institucion=inst.id_institucion
WHERE inst.inst_estado=1 and sd.sd_estado=1 and ssd.ssd_estado = 1 AND 
(pid_sede IS NULL OR ssd.id_sede = pid_sede) AND
(pssd_nombre IS NULL OR ssd.ssd_nombre LIKE 
 CONCAT('%',pssd_nombre,'%'))$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsede`(IN `pid_institucion` INT, IN `psd_nombre` VARCHAR(60) CHARSET utf8)
    READS SQL DATA
SELECT sd.id_sede, inst.inst_nombre, sd.sd_nombre,
sd.sd_abreviatura, sd.sd_representante_legal,
dist.dst_nombre, sd.sd_direccion, sd.sd_telefono,
sd.sd_codigo_cooperativa,
sd.plantilla_tarjeta_socio,
sd.plantilla_autorizacion,
sd.plantilla_ddjj,
sd.plantilla_compromiso,
sd.plantilla_transaccion,
sd.parametro_condicion,
sd.parametro_domicilio,
sd.parametro_autorizacion_1,
sd.parametro_autorizacion_2
FROM sede sd
INNER JOIN institucion inst ON sd.id_institucion = inst.id_institucion
INNER JOIN distrito dist ON sd.id_distrito = dist.id_distrito
WHERE inst.inst_estado=1 and sd.sd_estado = 1 AND
(pid_institucion IS NULL OR sd.id_institucion = pid_institucion) AND
(psd_nombre IS NULL OR sd.sd_nombre LIKE CONCAT ('%',psd_nombre,'%'))$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccionxproveedorcontar`(IN `pridproveedor` INT, IN `prproducto` VARCHAR(40) CHARSET utf8, IN `prserie` VARCHAR(40) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    READS SQL DATA
begin

select count(total) as total from(
select 
count(cab.idtransaccion_cabecera) as total
from transaccion_cabecera as cab
left join almacen as a on
cab.id_almacen=a.idalmacen
left join proveedor as p on
cab.id_proveedor=p.prv_nombre
left join transaccion_detalle as det on
cab.idtransaccion_cabecera=det.id_movimiento_cabecera
left join producto_serie as s on
det.id_producto_serie=s.id_producto_serie
left join producto as pd on
s.id_producto=pd.idproducto
where
cab.tsccab_estado=1
and
cab.tsccab_referencia=1
and
(pridproveedor is null or cab.id_proveedor=pridproveedor)
and
((prfechainicio is null and prfechafin is null) or
(prfechainicio is null and cab.tsccab_fecha<=prfechafin) or
(prfechafin is null and prfechainicio<=cab.tsccab_fecha) or
(cab.tsccab_fecha between prfechainicio and prfechafin))
and
s.ps_serie in
(select sr.ps_serie from producto_serie as sr where
(prserie="" or sr.ps_serie like concat('%',prserie,'%')))
and
pd.prd_descripcion in
(select pt.prd_descripcion from producto as pt where
(prproducto="" or pt.prd_descripcion like concat('%',prproducto,'%')))
group by cab.idtransaccion_cabecera) as sq;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarprovinciacontar`(IN `prdepartamento` VARCHAR(40), IN `prnombre` VARCHAR(40))
    READS SQL DATA
select
count(*) as total
from
provincia p
inner join departamento d on
p.id_departamento = d.id_departamento
where
d.dpt_estado=1
and
p.prv_estado =1 
and
(prdepartamento is null or d.dpt_nombre like CONCAT('%',prdepartamento,'%'))
and
(prnombre is null or p.prv_nombre like CONCAT('%',prnombre,'%'))
order by
d.dpt_nombre asc, p.prv_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarproductoseriexsucursal`(IN `prsucursal` INT, IN `prproducto` VARCHAR(80) CHARSET utf8, IN `prserie` VARCHAR(80) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

declare IP INT unsigned;
declare TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
ps.id_producto_serie as id_serie,
p.idproducto as id_producto,
p.prd_descripcion as producto,
p.prd_precio as precio,
ps.ps_serie as serie,
ps.ps_color as color,
ps.ps_almacenamiento as almacenamiento,
p.prd_precio as precio,
al.idalmacen as id_almacen,
al.alm_nombre as nombre_almacen
from
transaccion_detalle tdet
inner join transaccion_cabecera tcab on
tdet.id_movimiento_cabecera = tcab.idtransaccion_cabecera
inner join almacen al on
tcab.id_almacen = al.idalmacen
inner join producto_serie as ps on
tdet.id_producto_serie=ps.id_producto_serie
inner join producto p on
ps.id_producto = p.idproducto
WHERE
tcab.tsccab_estado = 1
AND
tdet.tscdet_estado=1
AND
(al.id_sucursal=prsucursal)
AND
( p.prd_descripcion like concat(prproducto,"%") )
and
(ps.ps_serie like concat(prserie,'%') )
AND
(	select
    sum(t2.tscdet_cantidad)
    from transaccion_detalle as t2
    inner join transaccion_cabecera as c2 on
    t2.id_movimiento_cabecera=c2.idtransaccion_cabecera
    inner join almacen as a2 on
    c2.id_almacen=a2.idalmacen
    where
    t2.id_producto_serie=tdet.id_producto_serie
 	and
 	t2.tscdet_estado=1
 	and
 	c2.tsccab_estado=1
    and
    (a2.id_sucursal=prsucursal)
)>0
group by
ps.id_producto_serie
order by tdet.id_producto_serie desc
limit IP,TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransacciondetallexdocumento`(IN `prguia` VARCHAR(10) CHARSET utf8)
    NO SQL
select
p.prd_descripcion as producto,
ps.ps_serie as serie,
ps.ps_color as color,
ps.ps_almacenamiento as almacenamiento,
case tt.ttsc_tipo
when 1 then td.tscdet_cantidad
when 2 then (td.tscdet_cantidad*-1)
end as cantidad,
ps.ps_precio_compra as precio,
td.tscdet_observacion as observacion
FROM
transaccion_detalle as td
inner join transaccion_cabecera as tc on
td.id_movimiento_cabecera=tc.idtransaccion_cabecera
inner join tipo_transaccion as tt on
tc.id_tipo_transaccion=tt.idtipo_transaccion
inner join producto_serie as ps on
td.id_producto_serie=ps.id_producto_serie
inner join producto as p on
ps.id_producto=p.idproducto
where
td.tscdet_Estado=1
and
tc.id_sucursal is not null
and
tc.tsccab_documento_referencia=prguia$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarusuarioxId`(IN `pidusuario` INT)
    READS SQL DATA
SELECT u.idusuario,u.usr_nombre,u.usr_usuario,u.usr_ultimologueo, 
u.usr_fechacreacion,u.usr_estado,
p.nombre as perfil,
p.id_perfil as id_perfil
FROM usuario u
INNER JOIN perfil p ON u.idperfil = p.idperfil WHERE u.idusuario = pidusuario$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartalonarioxId`(IN `prid` INT)
    READS SQL DATA
select
id_talonario as id,
tln_serie as serie,
tln_numero as numero,
id_salida_cabecera as salida,
tln_estado as estado
from
talonario
where
id_talonario=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartipopago`(IN `importancia` INT)
    READS SQL DATA
SELECT
idtipo_pago,
tpag_nombre
FROM
tipo_pago
where
tpag_disponibilidad<=importancia$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcreditocronogramainteres`(IN `prcredito` INT)
    NO SQL
begin

	-- Se verifica si se han pagado alguna cuota de la penalidad
	set @pagado = (
        select
            sum(cc.monto_pagado)
        from
            creditos as c
        inner join
            credito_cronograma as cc
        on
            c.id_credito = cc.id_credito
        WHERE
            c.estado_interes = 3
        and
            cc.id_credito = prcredito
        and
            cc.tipo_cuota = 3
        group by
            c.id_credito
	);
    
    -- Si se ha pagado alguna cuota de la penalidad, no se hace nada y se retorna 0
    if @pagado > 0 then
    	select 0 as resultado;
    -- Si no se han hecho pagos, se anulan los intereses
    else
    	update
        	creditos
         set
         	estado_interes = 2 
         where
         	id_credito = prcredito ;
            
    	update
        	credito_cronograma
        set
        	estado=3
        where
        	tipo_cuota=3
        and
        	id_credito = prcredito ;
    end if ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarstock`(IN `pralmacen` VARCHAR(40) CHARSET utf8, IN `prtipo` VARCHAR(40) CHARSET utf8, IN `prmarca` VARCHAR(40) CHARSET utf8, IN `prmodelo` VARCHAR(40) CHARSET utf8, IN `prdescripcion` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT, IN `orden` VARCHAR(100) CHARSET utf8)
    READS SQL DATA
begin

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VALMACEN VARCHAR(255);
DECLARE VTIPO VARCHAR(255);
DECLARE VMARCA VARCHAR(255);
DECLARE VMODELO VARCHAR(255);
DECLARE VDESCRIPCION VARCHAR(255);

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SET VALMACEN = concat("AND (al.alm_nombre like CONCAT('%','", pralmacen,"', '%')) ");
SET VTIPO = concat("AND (t.tprd_nombre like CONCAT('%','", prtipo,"', '%')) ");
SET VMARCA = concat("AND (m.mrc_nombre like CONCAT('%','", prmarca,"', '%')) ");
SET VMODELO = concat("AND (md.mdl_nombre like CONCAT('%','", prmodelo,"', '%')) ");
SET VDESCRIPCION = concat("AND (p.prd_descripcion like CONCAT('%','", prdescripcion,"', '%')) ");

set @Statement = CONCAT("
select
al.alm_nombre as almacen,
t.tprd_nombre as tipo,
m.mrc_nombre as marca,
md.mdl_nombre as modelo,
ps.id_producto as id_producto,
p.prd_descripcion as descripcion,
p.prd_precio as precio,
u.und_nombre as unidad_medida,
SUM(tdet.tscdet_cantidad) as cantidad
from
transaccion_detalle tdet
inner join transaccion_cabecera tcab on
tdet.id_movimiento_cabecera = tcab.idtransaccion_cabecera
inner join almacen al on
tcab.id_almacen = al.idalmacen
inner join producto_serie as ps on
tdet.id_producto_serie=ps.id_producto_serie
inner join producto p on
ps.id_producto = p.idproducto
inner join modelo md on
p.id_modelo = md.id_modelo
inner join marca m on
md.id_marca = m.id_marca
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
inner join unidad_medida u on
t.id_unidad_medida = u.idunidad_medida
WHERE
tcab.tsccab_estado = 1
and
tdet.tscdet_estado = 1 ",
VALMACEN,
VTIPO,
VMARCA,
VMODELO,
VDESCRIPCION,
" group by
tcab.id_almacen, ps.id_producto",
" having SUM(tdet.tscdet_cantidad)>0 ",
" order by ",
orden,
" ,al.alm_nombre, m.mrc_nombre ",
" limit " ,IP,",",TP);

PREPARE stmt FROM @Statement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventagarante`(IN `prventa` INT)
    NO SQL
select
v.id_venta_garante as id,
v.id_cliente as id_cliente,
c.clt_dni as cliente_dni,
c.clt_nombre as cliente_nombre,
v.vtg_telefono as cliente_telefono,
v.vtg_direccion as cliente_direccion,
v.vtg_dni_pdf as dni_pdf,
v.vtg_cip_pdf as cip_pdf,
v.vtg_planilla_pdf as planilla_pdf,
v.vtg_letra_pdf as letra_pdf,
v.vtg_voucher_pdf as voucher_pdf
from
venta_garante as v
inner join cliente as c on
v.id_cliente=c.idcliente
where
v.id_venta=prventa
and
v.vtg_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartrabajadores`(IN `prdocumento` VARCHAR(10) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prparametro` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT
id_trabajador as id,
documento as documento,
nombre as nombre,
cargo as cargo,
hora_ingreso as hora_ingreso,
hora_salida as hora_salida,
foto as foto
from
trabajadores
where
estado=1
and
nombre like concat(prnombre,'%')
and
documento like concat('%',prdocumento,'%')
and
(
    prparametro=0
    or
    (cargo<>"PRESIDENTE")
)
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventacontar`(IN `prcliente` VARCHAR(100) CHARSET utf8, IN `prdni` VARCHAR(10) CHARSET utf8, IN `prtipoventa` INT, IN `prestadopagos` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT)
    NO SQL
SELECT
count( distinct v.idventa) as total
from venta as v
inner join cliente as c ON
v.id_cliente=c.idcliente
inner join tipo_pago as tp ON
v.id_tipopago=tp.idtipo_pago
INNER JOIN subsede as ssd on
c.id_sub_sede = ssd.id_subsede
INNER JOIN sede as s on
ssd.id_sede = s.id_sede
INNER JOIN institucion as inst on
s.id_institucion = inst.id_institucion
left join venta_cronograma as vg on
v.idventa = vg.id_venta
WHERE
prestado=0 or v.vnt_estado=prestado
AND 
(prtipoventa=0 or v.vnt_tipoventa=prtipoventa)
AND
(c.clt_nombre like CONCAT(prcliente,'%'))
AND
(c.clt_dni like CONCAT(prdni,'%'))
AND
((prfechainicio is null and prfechafin is null) OR
(prfechainicio is null and v.vnt_fecha<=prfechafin) OR
(prfechafin is null and v.vnt_fecha>=prfechainicio) OR
(v.vnt_fecha BETWEEN prfechainicio and prfechafin))
HAVING
	(prestadopagos=0)
	or
    (prestadopagos=1 and ( max(vg.cng_fecha_vencimiento)>CURDATE() and sum(if(vg.cng_fecha_vencimiento<CURDATE(),vg.cng_monto_cuota-vg.cng_monto_pagado,0)) = 0 ) )
    or
    (prestadopagos=2 and ( max(vg.cng_fecha_vencimiento)>CURDATE() and sum(if(vg.cng_fecha_vencimiento<CURDATE(),vg.cng_monto_cuota-vg.cng_monto_pagado,0)) > 0 ) )
    or
    (prestadopagos=3 and ( max(vg.cng_fecha_vencimiento)<CURDATE() and sum(vg.cng_monto_cuota-vg.cng_monto_pagado) = 0 ) )
    or
    (prestadopagos=4 and ( max(vg.cng_fecha_vencimiento)<CURDATE() and sum(vg.cng_monto_cuota-vg.cng_monto_pagado) > 0 ) )$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarvendedorcontar`(IN `pvnd_dni` VARCHAR(10) CHARSET utf8, IN `pvnd_nombre` VARCHAR(80) CHARSET utf8, IN `pscs_nombre` VARCHAR(40) CHARSET utf8, IN `prcargo` VARCHAR(50) CHARSET utf8, IN `pridcargo` INT)
    READS SQL DATA
BEGIN

SELECT
count(ve.idvendedor) as total
FROM vendedor ve 
INNER JOIN sucursal su ON ve.id_sucursal = su.idsucursal
inner join vendedor_cargo as cg on ve.id_cargo=cg.id_vendedor_cargo
WHERE
vnd_estado= 1
AND
(ve.vnd_dni LIKE CONCAT(pvnd_dni,'%'))
AND
(ve.vnd_nombre LIKE CONCAT(pvnd_nombre,'%'))
AND
(su.scs_nombre LIKE CONCAT (pscs_nombre,'%'))
and
( cg.nombre like concat(prcargo,'%') )
and
( pridcargo=0 or cg.id_vendedor_cargo=pridcargo );

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventasalidaxId`(IN `prid` INT)
    NO SQL
begin


	set @porcentaje_penalidad = (
    	select
        	valor
        from
        	cooperativa_configuracion
        where
        	parametro = 'penalidad_credito_porcentaje'
        and
        	estado = 1
    );


    select
    v.idventa as id,
    v.id_acreedor as id_acreedor,
    'Salida de ventas' as tipo_venta,
    v.vnt_fecha as fecha,
    s.idsalida_vendedor as id_salida,
    s.sc_codigo as pecosa,
    v.id_talonario as id_talonario,
    concat(t.tln_serie,"-",t.tln_numero) as contrato,
    v.id_cliente as id_cliente,
    c.clt_nombre as cliente_nombre,
    c.clt_dni as cliente_dni,
    v.vnt_cliente_trabajo as cliente_trabajo,
    v.vnt_cliente_cargo as cliente_cargo_nombre,
    v.vnt_cliente_direccion as cliente_direccion_nombre,
    v.vnt_cliente_telefono as cliente_telefono_numero,
    v.id_tipopago as idtipopago,
    tp.tpag_nombre as tipo_pago,
    v.vnt_inicial as monto_inicial,
    v.vnt_numero_cuota as numero_cuotas,
    v.vnt_total as total_venta,
    v.vnt_fecha_inicio as fecha_inicio_pago,
    v.vnt_foto as foto,
    v.vnt_contrato_pdf as contrato_pdf,
    v.vnt_dni_pdf as dni_pdf,
    v.vnt_cip_pdf as cip_pdf,
    v.vnt_planilla_pdf as planilla_pdf,
    v.vnt_letra_pdf as letra_pdf,
    v.vnt_voucher_pdf as voucher_pdf,
    v.vnt_autorizacion_pdf as autorizacion_pdf,
    v.vnt_oficio_pdf as oficio_pdf,
    v.otros_pdf as otros_pdf,
    v.vnt_observaciones as observacion,
    v.vnt_lugarventa as lugar_venta,
    v.id_venta_canje as id_venta_canje,
    t2.tln_serie as canje_talonario_serie,
    t2.tln_numero as canje_talonario_contrato,
    v.vnt_anulacion_observacion as anulacion_observacion,
    (v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota as cuota_estandar,
    v.vnt_anulacion_monto as anulacion_monto,
    pj.id_proceso_judicial as id_proceso_judicial,
    _cronograma.monto_total as monto_total ,
    _cronograma.interes as interes_generado ,
    _cronograma.monto_pagado as monto_pagado ,
    _cronograma.monto_pendiente as monto_pendiente ,
    _cronograma.monto_pendiente_hasta_hoy as monto_pendiente_hasta_hoy,
    if(
       _cronograma.monto_pendiente_hasta_hoy>  
        2*(v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota
    ,1,0) as cumple_penalidad,
    _cronograma.total_cuotas as total_cuotas ,
    _cronograma.total_pendiente as total_pendiente ,
    _cronograma.total_pagadas as total_pagadas,
    v.vnt_estado as estado,
    coalesce(_cronograma2.total,0) as cuotas_penalidad ,
    coalesce(_cronograma3.total,0) as cuotas_interes ,
    coalesce(_cronograma3.pagado,0) as pagado_interes ,
    ROUND(_cronograma.monto_pendiente_hasta_hoy,2) as deuda_hasta_hoy ,
    ROUND(2*(v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota,2) as monto_limite_penalidad ,
    ROUND(
        @porcentaje_penalidad*v.vnt_total/100
    ,2) as adicional_penalidad ,
	ROUND(
        ( (100 + @porcentaje_penalidad)*v.vnt_total )/100
    ,2) as monto_penalidad ,
    v.estado_penalidad as estado_penalidad ,
    v.estado_interes as estado_interes ,
        coalesce(_cronograma3.pagado,0) as pagado_interes ,
    ROUND(_cronograma.monto_pendiente_hasta_hoy,2) as deuda_hasta_hoy ,
    lq.id_liquidacion as id_liquidacion ,
if(lq.id_liquidacion is not null or _cronograma.total_pendiente = 0,1,0) as pagado
    from
    venta as v
    inner join salida_cabecera as s on
    v.id_salida_venta=s.idsalida_vendedor
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join cliente as c on
    v.id_cliente=c.idcliente
    inner join tipo_pago as tp on
    v.id_tipopago=tp.idtipo_pago
    left join venta as vt2 on
    v.id_venta_canje=vt2.idventa
    left join talonario as t2 on
    vt2.id_talonario=t2.id_talonario
    left join proceso_judicial as pj on
    (v.idventa=pj.id_venta and pj.fecha_inicio_pago is not null and pj.estado<>3)
    left join
    (
        select
        vg2.id_venta as id_venta,
        sum(vg2.cng_monto_cuota+vg2.cng_interes) as monto_total,
        sum(vg2.cng_interes) as interes ,
        sum(vg2.cng_monto_pagado) as monto_pagado,
        sum(vg2.cng_monto_cuota+vg2.cng_interes)-sum(vg2.cng_monto_pagado) as monto_pendiente,
        sum(if(vg2.cng_fecha_vencimiento<CURDATE() ,vg2.cng_monto_cuota+vg2.cng_interes-vg2.cng_monto_pagado,0)) as monto_pendiente_hasta_hoy,
        count(vg2.id_venta_cronograma) as total_cuotas,
        count(if(vg2.cng_estado=1,vg2.id_venta_cronograma,null)) as total_pendiente,
        count(if(vg2.cng_estado=2,vg2.id_venta_cronograma,null)) as total_pagadas
        from
        venta_cronograma as vg2
        where
        vg2.cng_estado<>3
        group by
        vg2.id_venta
    ) as _cronograma on
    v.idventa=_cronograma.id_venta
    left join
    (
        select
        vg22.id_venta as id_venta,
        count(vg22.id_venta_cronograma) as total
        from
        venta_cronograma as vg22
        where
        vg22.cng_estado<>3
        and
        vg22.tipo_cuota=2
        group by
        vg22.id_venta
    ) as _cronograma2 on
    v.idventa=_cronograma2.id_venta
    left join
    (
        select
        vg23.id_venta as id_venta,
        count(vg23.id_venta_cronograma) as total ,
        sum(vg23.cng_monto_pagado) as pagado
        from
        venta_cronograma as vg23
        where
        vg23.cng_estado<>3
        and
        vg23.tipo_cuota=3
        group by
        vg23.id_venta
    ) as _cronograma3 on
    v.idventa=_cronograma3.id_venta
    left join
    liquidaciones as lq
    on
    (v.idventa = lq.id_transaccion and lq.tipo = 2 and lq.estado = 1)
    where
    v.idventa=prid ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsedes`(IN `prinstitucion` VARCHAR(40) CHARSET utf8, IN `prnombre` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

	SELECT
    s.id_sede as id,
    s.id_institucion as id_institucion,
    i.inst_nombre as institucion,
    s.sd_nombre as nombre,
    s.sd_abreviatura as abreviatura,
    s.sd_codigo_cooperativa as codigo_cooperativa
    from
    sede as s
    inner join institucion as i on
    s.id_institucion=i.id_institucion
    where
    s.sd_estado=1
    and
    i.inst_estado=1
    and
    i.inst_nombre like concat('%',prinstitucion,'%')
    and
    s.sd_nombre like concat('%',prnombre,'%')
    order by i.inst_nombre asc, s.sd_nombre asc
    limit IP, TP ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransacciondetallexcabecera`(IN `prcabecera` INT)
    NO SQL
select
tdet.idtransaccion_detalle as id,
p.prd_descripcion as producto,
t.tiene_serie as tiene_serie,
ps.id_producto_serie as id_serie,
ps.ps_serie as serie,
ps.ps_color as color,
ps.ps_almacenamiento as almacenamiento,
tdet.tscdet_cantidad as cantidad,
ps.ps_precio_compra as precio,
tdet.tscdet_observacion as observacion
from transaccion_detalle tdet
inner join producto_serie as ps ON
tdet.id_producto_serie=ps.id_producto_serie
inner join producto p on
ps.id_producto=p.idproducto
inner join modelo md on
md.id_modelo=p.id_modelo
INNER JOIN marca m ON 
m.id_marca=md.id_marca
INNER JOIN tipo_producto t ON 
t.id_tipo_producto=m.id_tipo_producto
WHERE
tdet.tscdet_estado=1
AND
tdet.id_movimiento_cabecera=prcabecera$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransacciondetalle`(IN `prcabecera` INT, IN `prproducto` VARCHAR(40) CHARSET utf8, IN `prserie` VARCHAR(40) CHARSET utf8, IN `prtipo` INT, IN `prreferencia` INT, IN `prreferente` VARCHAR(40))
    READS SQL DATA
select
tdet.id_movimiento_cabecera,
p.prd_descripcion,
ps.ps_serie,
tdet.tscdet_cantidad,
ps.ps_precio_compra as precio,
tdet.tysc_det_observacion,
case tt.ttsc_tipo
when 1 then 'ingreso'
when 0 then 'salida'
end as tipo,
case tcab.tsccab_referencia
when 1 then 'Proveedor'
when 2 then 'Cliente'
when 3 then 'Salida de ventas'
when 4 then 'Almacen'
when 5 then 'Vendedor'
end AS referencia,
case
when (tcab.id_proveedor<>null OR tcab.id_proveedor<>0) then pv.prv_nombre
when (tcab.id_cliente<>null OR tcab.id_cliente<>0) then c.clt_nombre
when (tcab.id_salida_venta<>null OR tcab.id_salida_venta<>0) then s.sc_codigo
when (tcab.id_sucursal<>null OR tcab.id_sucursal<>0)  then al.alm_nombre
when (tcab.id_vendedor<>null OR tcab.id_vendedor<>0)  then v.vnd_nombre
end AS referente
from transaccion_detalle tdet
right join producto_serie as ps ON
ps.id_producto_serie=tdet.id_producto_serie
right join producto p on
ps.id_producto=p.idproducto
left join transaccion_cabecera tcab ON
tdet.id_movimiento_cabecera=tcab.idtransaccion_cabecera
inner join tipo_transaccion tt on
tcab.id_tipo_transaccion=tt.idtipo_transaccion
left join proveedor as pv ON
tcab.id_proveedor=pv.idproveedor
left join venta as vt ON
tcab.id_venta=vt.idventa
left join cliente as c on
vt.id_cliente=c.idcliente
left join salida_cabecera as s on
tcab.id_salida_venta=s.idsalida_vendedor
left join almacen as al ON
tcab.id_almacen=al.idalmacen
left join vendedor as v ON
tcab.id_vendedor=v.idvendedor
WHERE
tdet.tscdet_estado=1
AND
(prcabecera is null or tdet.id_movimiento_cabecera=prcabecera)
AND
(prproducto is null or p.prd_descripcion like concat('%',prproducto,'%'))
AND
(prserie is null or tdet.tscdet_serie like concat('%',prserie,'%'))
AND
(prtipo is null or tt.ttsc_tipo=prtipo)
AND
(prreferencia is null or tcab.tsccab_referencia=prreferencia)
AND
(prreferente is null or
 pv.prv_nombre like concat('%',prreferente,'%') OR
 c.clt_nombre like concat('%',prreferente,'%') OR
 s.sc_codigo like concat('%',prreferente,'%') OR
 al.alm_nombre like concat('%',prreferente,'%') OR
 v.vnd_nombre like concat('%',prreferente,'%'))$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventasxclientecontar`(IN `prid` INT, IN `prdocumento` VARCHAR(15) CHARSET utf8, IN `prfecha` DATE, IN `prestado` INT)
    NO SQL
BEGIN

select
count(id_transaccion) as total
from
(
    select
    c.id_credito as id_transaccion
    from
    creditos as c
    inner join
    (
		select
        cg2.id_credito as id_credito,
        count(cg2.id_credito_cronograma) as total_cuotas,
        count(if(cg2.estado=2,cg2.id_credito_cronograma,null)) as cuotas_pagadas,
        count(if(cg2.estado=1,cg2.id_credito_cronograma,null)) as cuotas_pendientes
        from
        credito_cronograma as cg2
        inner join creditos as c2 ON
        cg2.id_credito=c2.id_credito
        WHERE
        c2.estado=1
        and
        cg2.estado<>3
		and
        c2.id_cliente=prid
        group by cg2.id_credito
    ) as _cronograma on
    c.id_credito=_cronograma.id_credito
    where
    c.estado=1
    and
    c.id_cliente=prid
    and
    (prfecha is null or c.fecha<=prfecha)
    and
    convert(c.numero, char) like concat('%',prdocumento)
    and
    (
    	(prestado=0) or
        (prestado=1 and _cronograma.cuotas_pendientes=0) OR
        (prestado=2 and _cronograma.cuotas_pendientes>0)
    )
    group BY c.id_credito
    
union

    select
    v.idventa as id_transaccion
    from
    venta as v
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    left join venta_cronograma as cg on
    v.idventa=cg.id_venta
    inner join
    (
		select
        vg2.id_venta as id_venta,
        count(vg2.id_venta_cronograma) as total_cuotas,
        count(if(vg2.cng_estado=2,vg2.id_venta_cronograma,null)) as cuotas_pagadas,
        count(if(vg2.cng_estado=1,vg2.id_venta_cronograma,null)) as cuotas_pendientes
        from
        venta_cronograma as vg2
        inner join venta as v2 ON
        vg2.id_venta=v2.idventa
        WHERE
        v2.vnt_estado=1
        and
        vg2.cng_estado<>3
		and
        v2.id_cliente=prid
        group by vg2.id_venta
    ) as _cronograma on
    v.idventa=_cronograma.id_venta
    where
    v.vnt_estado=1
    and
    v.id_cliente=prid
    and
    (prfecha is null or v.vnt_fecha<=prfecha)
    and
    t.tln_numero like concat('%',prdocumento)
    and
    (
    	(prestado=0) or
        (prestado=1 and _cronograma.cuotas_pendientes=0) OR
        (prestado=2 and _cronograma.cuotas_pendientes>0)
    )
    group BY v.idventa
) as resultado;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarvendedorcargocontar`(IN `prnombre` VARCHAR(50) CHARSET utf8)
    NO SQL
BEGIN

select
count(id_vendedor_cargo) as total
from
vendedor_cargo
where
estado=1
and
nombre like concat(prnombre,'%');

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_recalcularpagosventa`(IN `prventa` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
begin
	
    DECLARE V_tipo_pago INT unsigned ;
    DECLARE V_referencia INT unsigned ;
    DECLARE V_fecha DATE ;
    DECLARE V_monto_total FLOAT unsigned ;

	DECLARE finished INT unsigned default 0 ;
        
	declare cursor_pagos cursor for
    (
        select
            resultado.tipo_pago as tipo_pago,
            resultado.id_referencia as id_referencia,
            resultado.fecha as fecha ,
            round(sum(resultado.monto_total),2) as total_pagos
        from
        (       
            # Los pagos manuales
            # En este caso se considera el total como el monto total del pago_manual porque cada pago manual corresponde a una cuota del crongorama
            SELECT
                1 as tipo_pago ,
                c1.id_cobranza_manual as id_referencia ,
                c1.fecha as fecha ,
                c1.total as monto_total
            from
                cobranza_detalle as cdm
            inner join
                cobranza_manual as c1
            on
                (cdm.id_cobranza_manual=c1.id_cobranza_manual)
            inner join
                venta_cronograma as vc
            on
            (cdm.id_venta_cronograma=vc.id_venta_cronograma)
            where
                vc.id_venta=prventa
            and
                c1.estado=1
            -- Se quita este campo porque el procedimiento que se utiliza antes elimina pagos de cobranza_detalle
            /*
            and
                cdm.estado=1
            */
            -- Se quita este campo porque las cuotas se convierten en penalidad
            /*
            and
                cc.tipo_cuota<>2
            */
            and
                vc.cng_estado<3
            and
                ( prfechainicio is null or c1.fecha > prfechainicio )
            and
                ( prfechafin is null or c1.fecha < prfechafin )
            group by
                c1.id_cobranza_manual

            UNION

            # Los pagos directos
            SELECT
                2 as tipo_pago ,
                c2.id_cobranza_directa as id_referencia ,
                c2.fecha_referencia as fecha ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_directa as c2
            on
                (cd.id_cobranza_directa=c2.id_cobranza_directa)
            inner join
                venta_cronograma as vc
            on
                (cd.id_venta_cronograma=vc.id_venta_cronograma)
            where /*
                cd.estado=1
            and */ /*
                c2.estado=1
            AND */
                vc.id_venta=prventa
            and
                vc.tipo_cuota<>2
            and
                vc.cng_estado<3
            and
                ( prfechainicio is null or c2.fecha_referencia > prfechainicio )
            and
                ( prfechafin is null or c2.fecha_referencia < prfechafin )
            group BY
                c2.id_cobranza_directa

            UNION

            # Los pagos por planilla
            SELECT 
                3 as tipo_pago ,
                cad.id_cobranza_detalle as id_referencia ,
                cac.fecha_fin as fecha ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_archivos_detalle as cad
            on
                ( cd.id_cobranza_archivos=cad.id_cobranza_detalle )
            inner join
                cobranza_archivos_cabecera as cac
            on
                ( cad.id_cobranza=cac.id_cobranza )
            inner join
                venta_cronograma as vc
            on
                (cd.id_venta_cronograma=vc.id_venta_cronograma)
            where /*
                cd.estado=1
            and */ /*
                cad.estado=1
            and */
                cac.estado=1
            and
                vc.id_venta=prventa
            and
                vc.tipo_cuota<>2
            and
                vc.cng_estado<3
            and
                ( prfechainicio is null or cac.fecha_fin > prfechainicio )
            and
                ( prfechafin is null or cac.fecha_fin < prfechafin )
            group by
                cad.id_cobranza_detalle
        ) as resultado
        group by
            resultado.tipo_pago, resultado.id_referencia
    ) ;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursor_pagos;
    
    anularCronograma:LOOP
		FETCH cursor_pagos INTO V_tipo_pago, V_referencia, V_fecha, V_monto_total ;
        
		IF finished = 1 THEN 
			LEAVE anularCronograma;
		END IF;
        
        if V_tipo_pago = 1 then
        	call sp_crearpagoventa(0, V_referencia, prventa, V_monto_total, V_fecha) ;
        ELSEIF V_tipo_pago = 2 then
        	call sp_crearpagoventa(V_referencia, 0, prventa, V_monto_total, V_fecha) ;
        end if ;
        
    END LOOP anularCronograma;
	CLOSE cursor_pagos;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartrabajadorescontar`(IN `prdocumento` VARCHAR(10) CHARSET utf8, IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prparametro` INT)
    NO SQL
select
count(id_trabajador) as total
from
trabajadores
WHERE
nombre like concat(prnombre,'%')
AND
estado=1
and
documento like concat('%',prdocumento,'%')
and
(
    prparametro=0
    or
    (cargo<>"PRESIDENTE")
)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_editarcooperativadireccion`(IN `prid` INT, IN `prdistrito` INT, IN `prdireccion` VARCHAR(200) CHARSET utf8)
    NO SQL
update
cooperativa_direccion
set
id_distrito = prdistrito ,
direccion = prdireccion
where
id_cooperativa_direccion = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarvendedorcargo`(IN `prnombre` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN
DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
id_vendedor_cargo as id,
nombre as nombre
from
vendedor_cargo
where
estado=1
and
nombre like concat(prnombre,'%')
order by nombre asc
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_verificartalonarioserie`(IN `prserie` VARCHAR(8) CHARSET utf8)
    NO SQL
select
count(t.id_talonario) as total
from
talonario as t
where
t.tln_serie=prserie$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccioncabecera`(IN `pralmacen` VARCHAR(40) CHARSET utf8, IN `prtipo` INT, IN `prparametro` INT, IN `prreferencia` INT, IN `prreferente` VARCHAR(40) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prdocumento` VARCHAR(40) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT, IN `orden` VARCHAR(40) CHARSET utf8)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VALMACEN varchar(255);
DECLARE VTIPO varchar(255);
DECLARE VREFERENCIA varchar(255);
DECLARE VREFERENTE varchar(400);
DECLARE VFECHA varchar(255);
DECLARE VDOCUMENTO varchar(255);
DECLARE VPARAMETRO varchar(255); #Esto es para saber si hay transferencias entre almacenes que han salido pero que a�n no ingresan

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;
SET VALMACEN = concat("AND (a.alm_nombre like concat('%','",pralmacen,"','%')) ");

IF isnull(prtipo) then set VTIPO="";
ELSE SET VTIPO = concat("AND (tcab.id_tipo_transaccion=",prtipo,") ");
END IF;

#Si no hay par�metro o el tipo de ingreso no es "Transferencia a sucursal" entonces no se hace nada
#Si el par�metro es se muestran los pendientes; si es 2, los que ya han sido entregados
IF (isnull(prparametro) or prtipo<>5) then set VPARAMETRO="";
ELSEIF prparametro=1 then set VPARAMETRO=" AND (tcab.idtransaccion_cabecera in (
SELECT idtransaccion_cabecera
FROM transaccion_cabecera
WHERE
id_sucursal IS NOT NULL
GROUP BY
tsccab_documento_referencia
HAVING count(idtransaccion_cabecera)=1
)) ";
ELSEIF prparametro=2 then set VPARAMETRO=" AND (tcab.idtransaccion_cabecera in (
SELECT idtransaccion_cabecera
FROM transaccion_cabecera
WHERE
id_sucursal IS NOT NULL
GROUP BY
tsccab_documento_referencia
HAVING count(idtransaccion_cabecera)=2
)) ";
ELSE SET VPARAMETRO="";
END IF;

IF ISNULL(prreferencia) THEN SET VREFERENCIA = "";
ELSE SET VREFERENCIA = concat("AND  '",prreferencia,"'=tcab.tsccab_referencia ");
END IF;
SET VREFERENTE=concat("AND
('",prreferente,"' is null or
	p.prv_nombre like concat('%','",prreferente,"','%') or
 	c.clt_nombre like concat('%','",prreferente,"','%') OR
 	s.sc_codigo like concat('%','",prreferente,"','%') OR
 	al.alm_nombre like concat('%','",prreferente,"','%') OR
 	v.vnd_nombre like concat('%','",prreferente,"','%')) ");
IF (isnull(prfechainicio) and isnull(prfechafin)) then set VFECHA="";
ELSEIF (isnull(prfechafin)) then set VFECHA=CONCAT("AND (tcab.tsccab_fecha>='",prfechainicio,"') ");
ELSEIF (isnull(prfechainicio)) then set VFECHA=CONCAT("AND (tcab.tsccab_fecha<='",prfechafin,"') ");
ELSE set VFECHA=CONCAT("AND (tcab.tsccab_fecha between '",prfechainicio,"' and '",prfechafin,"') ");
END IF;

SET VDOCUMENTO=concat("AND (tcab.tsccab_documento_referencia like concat('%','",prdocumento,"','%')) ");

set @Statement=CONCAT("
SELECT
tcab.idtransaccion_cabecera as id,
case tp.ttsc_tipo
when 1 then a.alm_documento_ingreso
when 2 then a.alm_documento_salida
end as movimiento_serie,
tcab.numero_documento as movimiento_numero,
a.alm_nombre as almacen,
a.idalmacen as id_almacen,
tp.ttsc_nombre as tipo,
case tcab.tsccab_referencia
when 1 then 'Proveedor'
when 2 then 'Cliente'
when 3 then 'Salida de ventas'
when 4 then 'Almacen'
when 5 then 'Vendedor'
end AS referencia,
case
when (tcab.id_proveedor<>null OR tcab.id_proveedor<>0) then p.prv_nombre
when (tcab.id_venta<>null OR tcab.id_venta<>0) then c.clt_nombre
when (tcab.id_salida_venta<>null OR tcab.id_salida_venta<>0) then s.sc_codigo
when (tcab.id_sucursal<>null OR tcab.id_sucursal<>0)  then al.alm_nombre
when (tcab.id_vendedor<>null OR tcab.id_vendedor<>0)  then v.vnd_nombre
end AS referente,
tcab.tsccab_fecha as fecha,
tcab.tsccab_documento_referencia as documento
FROM
transaccion_cabecera as tcab
INNER JOIN almacen as a ON
tcab.id_almacen=a.idalmacen
inner join tipo_transaccion as tp ON
tcab.id_tipo_transaccion=tp.idtipo_transaccion
left join proveedor as p ON
tcab.id_proveedor=p.idproveedor
left join venta as vt ON
tcab.id_venta=vt.idventa
left join cliente as c ON
vt.id_cliente=c.idcliente
left join salida_cabecera as s on
tcab.id_salida_venta=idsalida_vendedor
left join almacen as al ON
tcab.id_sucursal=al.idalmacen
left join vendedor as v ON
tcab.id_vendedor=v.idvendedor
WHERE
tcab.tsccab_estado=1 ",
VALMACEN,
VTIPO,
VREFERENCIA,
VREFERENTE,
VFECHA,
VDOCUMENTO,
VPARAMETRO,
" order by ",orden, " ,id desc "
" limit ",IP,",",TP);

prepare stmt from @Statement;
execute stmt;
DEALLOCATE PREPARE stmt;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventasxcliente`(IN `prid` INT, IN `prdocumento` VARCHAR(15) CHARSET utf8, IN `prfecha` DATE, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
*
from
(
    select
    c.id_credito as id,
    c.tipo  as id_tipo,
    case c.tipo
    when 1 then "Afiliación"
    when 2 then "Préstamo"
    end as tipo,
    c.id_cliente as id_cliente,
    c.fecha as fecha,
    case c.tipo
    when 1 then c.codigo
    else CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
    end as documento,
    c.total as total,
    _cronograma.total_cuotas as total_cuotas,
    _cronograma.cuotas_pagadas as cuotas_pagadas,
    _cronograma.cuotas_pendientes as cuotas_pendientes,
    case _cronograma.cuotas_pendientes
    when 0 then "PAGADO"
    else "PENDIENTE"
    end
    as estado ,
    l.id_liquidacion as id_liquidacion
    from
    creditos as c
    inner join
    (
		select
        cg2.id_credito as id_credito,
        count(cg2.id_credito_cronograma) as total_cuotas,
        count(if(cg2.estado=2,cg2.id_credito_cronograma,null)) as cuotas_pagadas,
        count(if(cg2.estado=1,cg2.id_credito_cronograma,null)) as cuotas_pendientes
        from
        credito_cronograma as cg2
        inner join creditos as c2 ON
        cg2.id_credito=c2.id_credito
        WHERE
        c2.estado=1
        and
        cg2.estado<>3
		and
        c2.id_cliente=prid
        group by cg2.id_credito
    ) as _cronograma on
    c.id_credito=_cronograma.id_credito
    left join
    	liquidaciones as l
    on
    	(c.id_credito = l.id_transaccion and l.tipo=1 and l.estado=1)
    where
    c.estado=1
    and
    c.id_cliente=prid
    and
    (prfecha is null or c.fecha<=prfecha)
    and
    convert(c.numero, char) like concat('%',prdocumento)
    and
    (
    	(prestado=0) or
        (prestado=1 and ( _cronograma.cuotas_pendientes=0 or l.id_liquidacion is not null) ) OR
        (prestado=2 and ( _cronograma.cuotas_pendientes>0 and l.id_liquidacion is null) )
    )
    group by c.id_credito
    
union

    select
    v.idventa as id,
    # Se les asigna 3 o 4 porque los créditos tienen 1 y 2
    v.vnt_tipoventa+2 as id_tipo,
    case v.vnt_tipoventa
    when 1 then "Venta directa"
    when 2 then "Venta por salida"
    end as tipo,
    v.id_cliente as id_cliente,
    v.vnt_fecha as fecha,
    CONCAT(t.tln_serie,"-", t.tln_numero) as documento,
    v.vnt_total as total,
    _cronograma.total_cuotas as total_cuotas,
    _cronograma.cuotas_pagadas as cuotas_pagadas,
    _cronograma.cuotas_pendientes as cuotas_pendientes,
    case _cronograma.cuotas_pendientes
    when 0 then "PAGADO"
    else "PENDIENTE"
    end
    as estado,
    l.id_liquidacion as id_liquidacion
    from
    venta as v
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    left join venta_cronograma as cg on
    v.idventa=cg.id_venta
    inner join
    (
		select
        vg2.id_venta as id_venta,
        count(vg2.id_venta_cronograma) as total_cuotas,
        count(if(vg2.cng_estado=2,vg2.id_venta_cronograma,null)) as cuotas_pagadas,
        count(if(vg2.cng_estado=1,vg2.id_venta_cronograma,null)) as cuotas_pendientes
        from
        venta_cronograma as vg2
        inner join venta as v2 ON
        vg2.id_venta=v2.idventa
        WHERE
        v2.vnt_estado=1
        and
        vg2.cng_estado<>3
		and
        v2.id_cliente=prid
        group by vg2.id_venta
    ) as _cronograma on
    v.idventa=_cronograma.id_venta
    left join
    	liquidaciones as l
    on
    	(v.idventa = l.id_transaccion and l.tipo=2 and l.estado=1)
    where
    v.vnt_estado<>2
    and
    v.id_cliente=prid
    and
    (prfecha is null or v.vnt_fecha<=prfecha)
    and
    t.tln_numero like concat('%',prdocumento)
    and
    (
    	(prestado=0) or
        (prestado=1 and (_cronograma.cuotas_pendientes=0 or l.id_liquidacion is not null) ) OR
        (prestado=2 and (_cronograma.cuotas_pendientes>0 and l.id_liquidacion is null) )
    )
    group by v.idventa
) as resultado
order by resultado.fecha desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_seleccionarproximonumeropresupuesto`()
    READS SQL DATA
select
case
when count(id_presupuesto)=0 then 1
else max(id_presupuesto)+1
end as numero
from
presupuesto_cabecera
order by
id_presupuesto desc
limit 1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventacronogramaxId`(IN `prid` INT)
    READS SQL DATA
select
vc.id_venta_cronograma as id_cronograma,
vc.id_tipo_pago as id_tipo_pago,
tp.tpag_nombre as tipo_pago,
vc.cng_monto_cuota as monto_cuota,
vc.cng_fecha_vencimiento as fecha_vencimiento,
vc.cng_monto_pagado as monto_pagado,
vc.cng_interes as monto_interes,
vc.cng_monto_cuota-cng_monto_pagado+cng_interes as monto_pendiente,
vc.cng_fecha_cancelacion as fecha_cancelacion,
vc.cng_estado as estado
from
venta_cronograma as vc
inner join tipo_pago as tp on
vc.id_tipo_pago=tp.idtipo_pago
where
cng_estado<>3
and 
id_venta=prid
order by cng_fecha_vencimiento$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransferenciacabeceraxdocumento`(IN `pralmacen` INT, IN `prguia` VARCHAR(20) CHARSET utf8)
    NO SQL
select
tc.idtransaccion_cabecera as id,
tc.id_tipo_transaccion as id_tipo_transaccion,
tt.ttsc_nombre as tipo_transaccion,
tc.numero_documento as numero_transaccion,
tc.id_almacen as id_almacen,
alm1.alm_nombre as almacen,
tc.id_sucursal as id_almacen_referencia,
alm2.alm_nombre as almacen_referencia,
tc.tsccab_fecha as fecha,
tc.tsccab_documento_referencia as documento
from
transaccion_cabecera as tc
inner join almacen as alm1 on
tc.id_almacen=alm1.idalmacen
inner join almacen as alm2 on
tc.id_sucursal=alm2.idalmacen
inner join tipo_transaccion as tt on
tc.id_tipo_transaccion=tt.idtipo_transaccion
where
id_sucursal is not null
and
tc.id_sucursal=pralmacen
and
tc.tsccab_documento_referencia=prguia
AND
tc.idtransaccion_cabecera in (
SELECT idtransaccion_cabecera
FROM transaccion_cabecera
WHERE
id_sucursal IS NOT NULL
GROUP BY
tsccab_documento_referencia
HAVING count(idtransaccion_cabecera)=1
)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarusuariocontar`(IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prusuario` VARCHAR(15) CHARSET utf8, IN `prperfil` VARCHAR(20) CHARSET utf8)
    READS SQL DATA
BEGIN

    SELECT
    count(u.idusuario) as total
    FROM
    usuario u
    INNER JOIN perfil p ON
    u.idperfil = p.id_perfil
    WHERE 
    u.usr_estado=1
    AND
	u.usr_nombre LIKE CONCAT('%',prnombre,'%')
    AND
    u.usr_usuario LIKE CONCAT('%',prusuario,'%')
    AND
    p.nombre LIKE CONCAT(prperfil,'%');
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventaxId`(IN `prid` INT)
    NO SQL
begin

	set @porcentaje_penalidad = (
    	select
        	valor
        from
        	cooperativa_configuracion
        where
        	parametro = 'penalidad_credito_porcentaje'
        and
        	estado = 1
    );

    select
    v.idventa as id,
    v.id_acreedor as id_acreedor,
    case v.vnt_tipoventa
    when 1 then 'Directa'
    when 2 then 'Salida de ventas'
    end as tipo_venta,
    v.vnt_fecha as fecha,
    v.id_sucursal as id_sucursal,
    s.scs_nombre as nombre_sucursal,
    v.id_talonario as id_talonario,
    t.tln_serie as talonario_serie,
    t.tln_numero as talonario_contrato,
    concat(t.tln_serie,"-",t.tln_numero) as contrato,
    v.id_cliente as id_cliente,
    c.clt_nombre as cliente_nombre,
    c.clt_dni as cliente_dni,
    v.vnt_cliente_trabajo as cliente_trabajo,
    v.vnt_cliente_cargo as cliente_cargo_nombre,
    v.vnt_cliente_direccion as cliente_direccion_nombre,
    v.vnt_cliente_telefono as cliente_telefono_numero,
    v.id_vendedor as id_vendedor,
    v1.vnd_nombre as nombre_vendedor,
    v.id_autorizador as id_autorizador,
    v2.vnd_nombre as nombre_autorizador,
    v.id_tipopago as idtipopago,
    tp.tpag_nombre as tipo_pago,
    v.vnt_inicial as monto_inicial,
    v.vnt_numero_cuota as numero_cuotas,
    ROUND(v.vnt_total,2) as total_venta,
    v.vnt_fecha_inicio as fecha_inicio_pago,
    v.vnt_foto as foto,
    v.vnt_contrato_pdf as contrato_pdf,
    v.vnt_dni_pdf as dni_pdf,
    v.vnt_cip_pdf as cip_pdf,
    v.vnt_planilla_pdf as planilla_pdf,
    v.vnt_letra_pdf as letra_pdf,
    v.vnt_voucher_pdf as voucher_pdf,
    v.vnt_autorizacion_pdf as autorizacion_pdf,
    v.vnt_oficio_pdf as oficio_pdf,
    v.otros_pdf as otros_pdf,
    v.vnt_observaciones as observacion,
    v.vnt_lugarventa as lugar_venta,
    v.id_venta_canje as id_venta_canje,
    t2.tln_serie as canje_talonario_serie,
    t2.tln_numero as canje_talonario_contrato,
    v.id_credito_refinanciado as id_credito_refinanciado,
    concat(cr.codigo,"-",LPAD(cr.numero,3,"0")) as credito_refinanciado,
    v.vnt_anulacion_observacion as anulacion_observacion,
    (v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota as cuota_estandar,
    v.vnt_anulacion_monto as anulacion_monto,
    pj.id_proceso_judicial as id_proceso_judicial,
    ROUND(_cronograma.monto_total,2) as monto_total ,
    ROUND(_cronograma.interes,2) as interes_generado ,
    ROUND(_cronograma.monto_pagado,2) as monto_pagado ,
    ROUND(_cronograma.monto_pendiente,2) as monto_pendiente ,
    ROUND(_cronograma.monto_pendiente_hasta_hoy,2) as monto_pendiente_hasta_hoy,
    if(
       _cronograma.monto_pendiente_hasta_hoy>  
        2*(v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota
    ,1,0) as cumple_penalidad,
    _cronograma.total_cuotas as total_cuotas ,
    _cronograma.total_pendiente as total_pendiente ,
    _cronograma.total_pagadas as total_pagadas,
    v.vnt_estado as estado,
    coalesce(_cronograma2.total,0) as cuotas_penalidad ,
    coalesce(_cronograma3.total,0) as cuotas_interes ,
    coalesce(_cronograma3.pagado,0) as pagado_interes ,
    ROUND(_cronograma.monto_pendiente_hasta_hoy,2) as deuda_hasta_hoy ,
    ROUND(2*(v.vnt_total - v.vnt_inicial)/v.vnt_numero_cuota,2) as monto_limite_penalidad ,
    ROUND(
        @porcentaje_penalidad*v.vnt_total/100
    ,2) as adicional_penalidad ,
	ROUND(
        ( (100 + @porcentaje_penalidad)*v.vnt_total )/100
    ,2) as monto_penalidad ,
    v.estado_penalidad as estado_penalidad ,
    v.estado_interes as estado_interes ,
    lq.id_liquidacion as id_liquidacion ,
if(lq.id_liquidacion is not null or _cronograma.total_pendiente = 0,1,0) as pagado
    from
    venta as v
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join cliente as c on
    v.id_cliente=c.idcliente
    left join vendedor as v1 on
    v.id_vendedor=v1.idvendedor
    left join vendedor as v2 on
    v.id_autorizador=v2.idvendedor
    inner join sucursal as s on
    v.id_sucursal=s.idsucursal
    inner join tipo_pago as tp on
    v.id_tipopago=tp.idtipo_pago
    left join venta as vt2 on
    v.id_venta_canje=vt2.idventa
    left join talonario as t2 on
    vt2.id_talonario=t2.id_talonario
    left join creditos as cr on
    v.id_credito_refinanciado=cr.id_credito
    left join proceso_judicial as pj on
    (v.idventa=pj.id_venta and pj.fecha_inicio_pago is not null and pj.estado<>3)
    left join
    (
        select
        vg2.id_venta as id_venta,
        sum(vg2.cng_monto_cuota+vg2.cng_interes) as monto_total,
        sum(vg2.cng_interes) as interes ,
        sum(vg2.cng_monto_pagado) as monto_pagado,
        sum(vg2.cng_monto_cuota+vg2.cng_interes-vg2.cng_monto_pagado) as monto_pendiente,
        sum(if(vg2.cng_fecha_vencimiento<CURDATE() ,vg2.cng_monto_cuota+vg2.cng_interes-vg2.cng_monto_pagado,0)) as monto_pendiente_hasta_hoy,
        count(vg2.id_venta_cronograma) as total_cuotas,
        count(if(vg2.cng_estado=1,vg2.id_venta_cronograma,null)) as total_pendiente,
        count(if(vg2.cng_estado=2,vg2.id_venta_cronograma,null)) as total_pagadas
        from
        venta_cronograma as vg2
        where
        vg2.cng_estado<>3
        and
        (vg2.tipo_cuota=1 or vg2.tipo_cuota=3)
        group by
        vg2.id_venta
    ) as _cronograma on
    v.idventa=_cronograma.id_venta
    left join
    (
        select
        vg22.id_venta as id_venta,
        count(vg22.id_venta_cronograma) as total
        from
        venta_cronograma as vg22
        where
        vg22.cng_estado<>3
        and
        vg22.tipo_cuota=2
        group by
        vg22.id_venta
    ) as _cronograma2 on
    v.idventa=_cronograma2.id_venta
    left join
    (
        select
        vg23.id_venta as id_venta,
        count(vg23.id_venta_cronograma) as total ,
        sum(vg23.cng_monto_pagado) as pagado
        from
        venta_cronograma as vg23
        where
        vg23.cng_estado<>3
        and
        vg23.tipo_cuota=3
        group by
        vg23.id_venta
    ) as _cronograma3 on
    v.idventa=_cronograma3.id_venta
    left join
    liquidaciones as lq
    on
    (v.idventa = lq.id_transaccion and lq.tipo = 2 and lq.estado = 1)
    where
    v.idventa=prid ;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventaproductoxId`(IN `prid` INT)
    READS SQL DATA
select
v.id_venta_producto as id,
s.id_producto as id_producto,
p.prd_descripcion as descripcion,
v.id_producto_serie as id_serie,
s.ps_serie as serie,
v.vprd_precio as precio
from
venta_producto as v
inner join producto_serie as s on
v.id_producto_serie=s.id_producto_serie
inner join producto as p on
s.id_producto=p.idproducto
where
v.id_venta=prid
and
v.vprd_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_validartransaccioncabecera`(IN `prtipo` INT, IN `prreferente` INT, IN `prdocumento` VARCHAR(40) CHARSET utf8)
    READS SQL DATA
select
count(tc.idtransaccion_cabecera) as total
from
transaccion_cabecera as tc
inner join tipo_transaccion as tt on
tt.idtipo_transaccion=tc.id_tipo_transaccion
where
tt.idtipo_transaccion=prtipo
and
((tt.ttsc_tipo=1 and 
(tc.id_proveedor=prreferente or
 tc.id_venta=prreferente or
 tc.id_salida_venta=prreferente or
 tc.id_sucursal=prreferente or
 tc.id_vendedor = prreferente)) or
(tt.ttsc_tipo=2 and
 tc.id_almacen))
and
tsccab_documento_referencia=prdocumento$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventacronogramaresumen`(IN `prventa` INT, IN `prtipocuota` INT)
    NO SQL
select
vg2.id_venta as id_venta,
ROUND(sum(vg2.cng_monto_cuota),2) as monto_total,
ROUND(sum(vg2.cng_interes),2) as interes ,
ROUND(sum(vg2.cng_monto_pagado),2) as monto_pagado,
ROUND(sum(vg2.cng_monto_cuota-vg2.cng_monto_pagado),2) as monto_pendiente,
ROUND(sum(if(vg2.cng_fecha_vencimiento<CURDATE() ,vg2.cng_monto_cuota-vg2.cng_monto_pagado,0)),2) as monto_pendiente_hasta_hoy,
count(vg2.id_venta_cronograma) as total_cuotas,
count(if(vg2.cng_estado=1,vg2.id_venta_cronograma,null)) as total_pendiente,
count(if(vg2.cng_estado=2,vg2.id_venta_cronograma,null)) as total_pagadas
from
venta_cronograma as vg2
where
vg2.id_venta=prventa
and
vg2.cng_estado<>3
and
(
	(prtipocuota=0 and vg2.tipo_cuota<>2) or
    (vg2.tipo_cuota=prtipocuota)
)
group by
vg2.id_venta$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_seleccionarproximocredito`(IN `prcliente` INT)
    NO SQL
select
case
when count(id_credito)=0 then 1
else count(id_credito)+1
end as numero
from
creditos
where
tipo>1
and
id_cliente=prcliente
order by
id_credito desc
limit 1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventacronograma`(IN `prventa` INT, IN `prtipocuota` INT)
    READS SQL DATA
select
vg.id_venta_cronograma as id_cronograma,
tp.tpag_nombre as tipo_pago,
ROUND(vg.cng_monto_cuota,2) as monto_cuota,
vg.cng_fecha_vencimiento as fecha_vencimiento,
ROUND(coalesce(vg.cng_monto_pagado,0),2) as monto_pagado,
ROUND(vg.cng_interes,2) as monto_interes,
ROUND(vg.cng_monto_cuota-coalesce(vg.cng_monto_pagado,0)+vg.cng_interes,2) as monto_pendiente,
vg.cng_fecha_cancelacion as fecha_cancelacion,
vg.cng_estado as estado
from
venta_cronograma as vg
inner join tipo_pago as tp on
vg.id_tipo_pago = tp.idtipo_pago
where
vg.cng_estado<>3
and
(
    (prtipocuota=0 and vg.tipo_cuota<>2) or
    (vg.tipo_cuota=prtipocuota)
)
and
vg.id_venta=prventa
group by vg.id_venta_cronograma, vg.cng_monto_cuota
order by vg.cng_fecha_vencimiento asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccionxproveedor`(IN `pridproveedor` INT, IN `prproducto` VARCHAR(40) CHARSET utf8, IN `prserie` VARCHAR(40) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
begin

declare IP int unsigned;
declare TP int unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
cab.idtransaccion_cabecera as id,
a.alm_nombre as almacen,
cab.tsccab_fecha as fecha,
cab.tsccab_documento_referencia as documento_referencia
from transaccion_cabecera as cab
left join almacen as a on
cab.id_almacen=a.idalmacen
left join proveedor as p on
cab.id_proveedor=p.prv_nombre
left join transaccion_detalle as det on
cab.idtransaccion_cabecera=det.id_movimiento_cabecera
left join producto_serie as s on
det.id_producto_serie=s.id_producto_serie
left join producto as pd on
s.id_producto=pd.idproducto
where
cab.tsccab_estado=1
and
cab.tsccab_referencia=1
and
(pridproveedor is null or cab.id_proveedor=pridproveedor)
and
((prfechainicio is null and prfechafin is null) or
(prfechainicio is null and cab.tsccab_fecha<=prfechafin) or
(prfechafin is null and prfechainicio<=cab.tsccab_fecha) or
(cab.tsccab_fecha between prfechainicio and prfechafin))
and
s.ps_serie in
(select sr.ps_serie from producto_serie as sr where
(prserie="" or sr.ps_serie like concat('%',prserie,'%')))
and
pd.prd_descripcion in
(select pt.prd_descripcion from producto as pt where
(prproducto="" or pt.prd_descripcion like concat('%',prproducto,'%')))
group by cab.idtransaccion_cabecera
limit IP,TP;
 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarvendedor`(IN `pvnd_dni` VARCHAR(10) CHARSET utf8, IN `pvnd_nombre` VARCHAR(80) CHARSET utf8, IN `pscs_nombre` VARCHAR(40) CHARSET utf8, IN `prcargo` VARCHAR(50) CHARSET utf8, IN `pridcargo` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN
DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT
ve.idvendedor,
su.scs_nombre,
ve.vnd_dni,
UCASE(ve.vnd_nombre) as vnd_nombre,
ve.vnd_email,
ve.vnd_comision,
ve.foto,
ve.id_cargo as id_cargo,
cg.nombre as cargo
FROM vendedor ve 
INNER JOIN sucursal su ON ve.id_sucursal = su.idsucursal
inner join vendedor_cargo as cg on ve.id_cargo=cg.id_vendedor_cargo
WHERE
vnd_estado= 1
AND
(ve.vnd_dni LIKE CONCAT(pvnd_dni,'%'))
AND
(ve.vnd_nombre LIKE CONCAT(pvnd_nombre,'%'))
AND
(su.scs_nombre LIKE CONCAT (pscs_nombre,'%'))
and
( cg.nombre like concat(prcargo,'%') )
and
( pridcargo=0 or cg.id_vendedor_cargo=pridcargo )
ORDER BY ve.vnd_nombre asc
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_verificarstockproductoserie`(IN `pridserie` INT)
    NO SQL
select
sum(tdet.tscdet_cantidad) as total
from
transaccion_detalle as tdet
inner join
transaccion_cabecera as tcab on
tdet.id_movimiento_cabecera=tcab.idtransaccion_cabecera
where
tdet.id_producto_serie = pridserie
and
tdet.tscdet_estado = 1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_verificarafiliacion`(IN `prcliente` INT)
    NO SQL
select
c.codigo as codigo_afiliacion,
sum(cc.monto_pagado) as pagado,
sum(cc.monto_capital)+sum(cc.monto_interes) as total
from
credito_cronograma as cc
inner join creditos as c on
c.id_credito=cc.id_credito
where
c.id_cliente=prcliente
and
c.tipo=1
and
c.estado<3$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccionesxcliente`(IN `prid` INT)
    NO SQL
BEGIN

select
*
from
(
	select
    c.id_credito as id,
    "1" as id_tipo,
    "Préstamo" as tipo,
    c.id_cliente as id_cliente,
    c.fecha as fecha,
    concat(c.codigo,"-",LPAD(c.numero,3,"0")) as documento,
    c.total as total,
    sum(cg.monto_capital) as monto_pendiente
    from
    creditos as c
    inner join credito_cronograma as cg on
    c.id_credito=cg.id_credito
    where
    c.estado=1
    and
    c.tipo>1
    and
    c.id_cliente=prid
    group by c.id_credito
    having
    count(if(cg.estado=1,1,null))>0
    
union

    select
    v.idventa as id,
    "2" as id_tipo,
    "Venta" as tipo,
    v.id_cliente as id_cliente,
    v.vnt_fecha as fecha,
    CONCAT(t.tln_serie,"-", t.tln_numero) as documento,
    v.vnt_total as total,
    sum(cg.cng_monto_cuota) as monto_pendiente
    from
    venta as v
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    left join venta_cronograma as cg on
    v.idventa=cg.id_venta
    where
    v.vnt_estado=1
    and
    v.id_cliente=prid
    group by v.idventa
    having
    count(if(cg.cng_estado=1,1,null))>0
) as resultado
order by resultado.fecha desc, resultado.id desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarcobranzadirecta`(IN `prcobranza` INT)
    NO SQL
begin

	update
    cobranza_directa as cd
    set
    cd.estado=0
    where
    cd.id_cobranza_directa=prcobranza;
    
    update
    cobranza_detalle as cd
    set
    cd.estado=0
    where
    cd.id_cobranza_directa=prcobranza;
 
 	select
    if(
        cd.id_credito_cronograma>0,
        ActualizarPagoCredito(cd.id_credito_cronograma),
        ActualizarPagoVenta(cd.id_venta_cronograma)
    ) as resultado
    from
    cobranza_detalle as cd
    where
 	cd.id_cobranza_directa=prcobranza;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_seleccionarparametroafiliacion`()
    NO SQL
select
id_parametro_afiliacion as id,
monto_cuota as monto,
tiempo_permanencia as tiempo,
fecha as fecha
from
parametro_afiliacion
where
estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarreglaevaluacion`()
    READS SQL DATA
select
id_regla as id,
rgl_tipo as tipo,
rgl_desde as desde,
rgl_hasta as hasta,
rgl_interes_diario as interes_diario,
rgl_proximo_mes as proximo_mes
from
regla_evaluacion$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarventacronograma`(IN `prid` INT)
    NO SQL
delete from
venta_cronograma
where
id_venta=prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientedireccioncontar`(IN `pid_cliente` INT, IN `pdrc_relevancia` INT)
    READS SQL DATA
SELECT
count(drc.idcliente_direccion) as total
FROM cliente_direccion drc
INNER JOIN cliente c on
drc.id_cliente = c.idcliente
INNER JOIN distrito d on
drc.id_distrito = d.id_distrito
INNER JOIN provincia p on
d.id_provincia = p.id_provincia
INNER JOIN departamento de on
p.id_departamento = de.id_departamento
WHERE
drc.drc_estado= 1
AND
(pid_cliente is null or c.idcliente = pid_cliente)
AND
(pdrc_relevancia is null or drc.drc_relevancia = pdrc_relevancia)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_verificarinteres`(IN `prmontopagado` INT)
    NO SQL
select
r.interes as interes
from
regla_interes as r
where
(
  ( r.desde <= prmontopagado and prmontopagado < r.hasta )
  or
  ( r.desde <= prmontopagado and r.hasta = 0 )
)
order by r.id_regla_interes asc
limit 1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarseguimiento`(IN `prcliente` VARCHAR(30) CHARSET utf8, IN `prnumero` VARCHAR(20) CHARSET utf8, IN `prcourier` VARCHAR(20) CHARSET utf8, IN `prestado` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
begin

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
s.id_seguimiento as id,
if( s.id_credito is null, 1, 2) as id_tipo,
if( s.id_credito is null, "Venta", "Cr�dito") as tipo,
if( s.id_credito is null, s.id_venta, s.id_credito) as id_transaccion,
if( s.id_venta is null, cc.clt_nombre, cv.clt_nombre) as cliente,
v.id_salida_venta as salida,
if(
   s.id_venta is null,
   concat( cr.codigo, "-",LPAD(cr.numero,3,"0") ),
   concat( t.tln_serie,"-",t.tln_numero )
) as documento,
s.id_courier as id_courier,
c.nombre as courier,
c.url as courier_url,
s.fecha as fecha,
s.numero_seguimiento as numero_seguimiento,
s.foto as foto,
s.fecha_recepcion as fecha_recepcion,
s.usuario_recepcion as usuario_recepcion,
s.observacion as observacion,
s.estado as id_estado,
case s.estado
when 1 then "Pendiente"
when 2 then "Recibido"
end as estado
from
seguimiento_documentos as s
inner join courier as c on
s.id_courier=c.id_courier
left join creditos as cr on
s.id_credito=cr.id_credito
left join cliente as cc on
cr.id_cliente=cc.idcliente
left join venta as v on
s.id_venta=v.idventa
left join talonario as t on
v.id_talonario=t.id_talonario
left join cliente as cv on
v.id_cliente=cv.idcliente
where
(cr.estado=1 or v.vnt_estado=1)
and
(
    (prestado=0 and s.estado>0) or
    (prestado=s.estado)
)
and
c.nombre like concat(prcourier,'%')
and
s.numero_seguimiento like concat(prnumero,'%')
and
(
    (prfechainicio is null and prfechafin is null) or
    (s.fecha BETWEEN prfechainicio and prfechafin)
)
and
(
    ( cc.clt_nombre like concat(prcliente,'%') ) or
    ( cv.clt_nombre like concat(prcliente,'%') )
)
order by s.fecha desc, s.id_seguimiento desc
limit IP, TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_verificarusuario`(IN `prusuario` VARCHAR(50), IN `prid` INT)
    NO SQL
select 
count(*) as total
from
usuario
where
usr_usuario=trim(prusuario)
and
usr_estado=1
and
(
	(prid=0) OR
    (idusuario<>prid)
)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartareocontar`(IN `prdocumento` VARCHAR(10) CHARSET utf8, IN `prtrabajador` VARCHAR(50) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
select
count(tt.id_tareo) as total
from
trabajadores_tareo as tt
inner join trabajadores as t on
t.id_trabajador=tt.id_trabajador
WHERE
t.estado=1
and
tt.estado=1
and
t.documento like concat('%',prdocumento,'%')
and
t.nombre like concat('%',prtrabajador,'%')
and
(
    (prfechainicio is null and prfechafin is null) or
    (tt.fecha BETWEEN prfechainicio and prfechafin)
)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_seleccionarproximonumerodetallejudicial`(IN `prcabecera` INT, IN `prtipo` VARCHAR(40) CHARSET utf8, IN `prdetalle` INT)
    NO SQL
select
COALESCE( count(*) , 0 ) + 1 as proximo_numero
from
proceso_judicial_detalle
where
id_proceso=prcabecera
and
tipo_documento=prtipo
and
(
	prdetalle=0 or
    prdetalle<>id_proceso_judicial_detalle
)
and
estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartipoproductoxId`(IN `prid` INT)
    MODIFIES SQL DATA
select
t.id_tipo_producto as id,
t.tprd_nombre as nombre,
t.tiene_serie ,
t.id_unidad_medida as idunidad
from
tipo_producto t
where
t.id_tipo_producto = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_seleccionarproximaafiliacion`()
    NO SQL
select
case count(id_credito)
when null then 1
else count(id_credito)+1
end as numero
from
creditos
where
tipo=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarvendedorcomisionpago`(IN `prvendedorcomision` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
id_vendedor_comision_pago as id,
tipo_comision as id_tipo,
case tipo_comision
when 1 then "Efectiva"
when 2 then "Retenida"
end as tipo,
monto as monto,
fecha as fecha,
comprobante as comprobante,
observaciones as observaciones,
estado as id_estado,
case estado
when 1 then "Pagado"
when 2 then "Incautado"
end as estado
from
vendedor_comision_pago
where
estado>0
and
id_vendedor_comision=prvendedorcomision
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_seleccionarproxdocalmacen`(IN `pralmacen` INT, IN `prtipo` INT)
    READS SQL DATA
begin

SELECT COUNT(*) into @cont
from
almacen as alm
INNER JOIN 
transaccion_cabecera ttc ON
alm.idalmacen = ttc.id_almacen 
INNER JOIN 
tipo_transaccion as ttr ON
ttc.id_tipo_transaccion = ttr.idtipo_transaccion
WHERE
alm.idalmacen = pralmacen
AND
ttr.ttsc_tipo  = prtipo;


select
case prtipo
when 1 then alm.alm_documento_ingreso
when 2 then alm.alm_documento_salida
end as serie, 
case @cont
when 0 then 1
else max(ttc.numero_documento)+1 end  as numero
from
almacen as alm
INNER JOIN 
transaccion_cabecera ttc ON
alm.idalmacen = ttc.id_almacen 
INNER JOIN 
tipo_transaccion as ttr ON
ttc.id_tipo_transaccion = ttr.idtipo_transaccion
WHERE
alm.idalmacen = pralmacen
AND
ttr.ttsc_tipo  = prtipo;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_verificarpagosede`(IN `prsede` INT, IN `prfecha` DATE)
    READS SQL DATA
select
count(c.id_cobranza) as total
from
cobranza_archivos_cabecera as c
where
c.id_sede=prsede
and
c.fecha_fin=prfecha
and
c.estado<3$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccionesxclientecronograma`(IN `prid` INT)
    NO SQL
begin

select
resultado.tipo as tipo,
resultado.id_transaccion as id_transaccion,
resultado.fecha_vencimiento as fecha_vencimiento,
resultado.cuota_mensual as cuota_mensual,
resultado.capital as capital
from
(
select
    "1" as tipo,
    c.id_credito as id_transaccion,
    cg.fecha_vencimiento as fecha_vencimiento,
    cg.monto_capital+cg.monto_interes as cuota_mensual,
    cg.monto_capital as capital
    from
    credito_cronograma as cg
    inner join creditos as c on
    c.id_credito=cg.id_credito
    where
    c.estado=1
    and
    cg.estado=1
    and
    c.tipo>1
    and
    c.id_cliente=prid
    
union

select
    "2" as tipo,
    v.idventa as id_transaccion,
    cg.cng_fecha_vencimiento as fecha_vencimiento,
    cg.cng_monto_cuota as cuota_mensual,
    cg.cng_monto_cuota as capital
    from
    venta_cronograma as cg
    left join venta as v on
    v.idventa=cg.id_venta
    where
    v.vnt_estado=1
    and
    cg.cng_estado=1
    and
    v.id_cliente=prid

) as resultado
order by resultado.fecha_vencimiento;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_eliminarsalida`(IN `prid` INT)
    NO SQL
BEGIN

UPDATE
salida_cabecera
set
sc_estado=3
WHERE
idsalida_vendedor=prid;

update
transaccion_cabecera
set
tsccab_estado=0
where
id_salida_venta=67;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_seleccionarproximasalida`()
    NO SQL
select
sc_codigo+1 as numero
from
salida_cabecera
order by idsalida_vendedor desc
limit 1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxclienteunlimited`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prnivelmora` INT)
    NO SQL
BEGIN

select
id_cliente,
cliente_codigo,
cliente_dni,
cliente,
case prtipopago
	when 0 then "Todos"
    else tipo_pago
end as tipo_pago,
subsede,
sede,
institucion,
sum(monto_pendiente) as monto_pendiente,
count(*) as total_deudas ,
cargo ,
cargo_estado ,
distrito ,
provincia ,
departamento ,
centro_trabajo ,
direccion_centro_trabajo ,
telefono_centro_trabajo ,
direccion ,
telefono
from
(
    select
    cl.idcliente as id_cliente,
    cl.clt_codigo as cliente_codigo,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente,
    crg.crg_nombre as cargo ,
    crge.cstd_nombre as cargo_estado ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dd2.dst_nombre, 'No especifica')
    else coalesce(dd1.dst_nombre, 'No especifica')
    end as distrito ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dp2.prv_nombre, 'No especifica')
    else coalesce(dp1.prv_nombre, 'No especifica')
    end as provincia ,
    case when cl.id_centro_trabajo > 0
    then coalesce(ddp2.dpt_nombre, 'No especifica')
    else coalesce(ddp1.dpt_nombre, 'No especifica')
    end as departamento ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.comisaria, '-', ctp.division), 'No especifica')
    else coalesce(cl.clt_trabajo, 'No especifica')
    end as centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.direccion), 'No especifica')
    else 'No especifica'
    end as direccion_centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.telefono), 'No especifica')
    else 'No especifica'
    end as telefono_centro_trabajo ,
    coalesce(_direccion.direccion, 'No especifica') as direccion ,
    coalesce(_telefono.telefono, 'No especifica') as telefono
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join cargo as crg on
    cl.id_cargo=crg.id_cargo
    left join cargo_estado as crge on
    cl.id_cargo_estado=crge.id_cargo_estado
    left join distrito as dd1 on
    cl.id_distrito_trabajo = dd1.id_distrito
    left join provincia as dp1 on
    dp1.id_provincia = dd1.id_provincia
    left join departamento as ddp1 on
    ddp1.id_departamento = dp1.id_departamento
    left join centro_trabajo_pnp as ctp on
    cl.id_centro_trabajo = ctp.id_centro_trabajo_pnp
    left join distrito as dd2 on
    ctp.id_distrito = dd2.id_distrito
    left join provincia as dp2 on
    dp2.id_provincia = dd2.id_provincia
    left join departamento as ddp2 on
    dp2.id_departamento = ddp2.id_departamento
    left JOIN
    (
        select
        cd0.id_cliente as id_cliente ,
        cd0.drc_nombre as direccion
        from
        cliente_direccion as cd0
        where
        cd0.drc_relevancia=1
        group by
        cd0.id_cliente
    ) as _direccion on
    cl.idcliente = _direccion.id_cliente
    left JOIN
    (
        select
        ct0.id_cliente as id_cliente ,
        ct0.tlf_numero as telefono
        from
        cliente_telefono as ct0
        where
        ct0.tlf_relevancia=1
        group by
        ct0.id_cliente
    ) as _telefono on
    cl.idcliente = _telefono.id_cliente
    where
    v.vnt_estado=1
    and
    vg.cng_estado=1
    and
    vg.tipo_cuota<>2
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
union
    select
    cl.idcliente as id_cliente,
    cl.clt_codigo as cliente_codigo,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente,
    crg.crg_nombre as cargo ,
    crge.cstd_nombre as cargo_estado ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dd2.dst_nombre, 'No especifica')
    else coalesce(dd1.dst_nombre, 'No especifica')
    end as distrito ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dp2.prv_nombre, 'No especifica')
    else coalesce(dp1.prv_nombre, 'No especifica')
    end as provincia ,
    case when cl.id_centro_trabajo > 0
    then coalesce(ddp2.dpt_nombre, 'No especifica')
    else coalesce(ddp1.dpt_nombre, 'No especifica')
    end as departamento ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.comisaria, '-', ctp.division), 'No especifica')
    else coalesce(cl.clt_trabajo, 'No especifica')
    end as centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.direccion), 'No especifica')
    else 'No especifica'
    end as direccion_centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.telefono), 'No especifica')
    else 'No especifica'
    end as telefono_centro_trabajo ,
    coalesce(_direccion.direccion, 'No especifica') as direccion ,
    coalesce(_telefono.telefono, 'No especifica') as telefono
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join cargo as crg on
    cl.id_cargo=crg.id_cargo
    left join cargo_estado as crge on
    cl.id_cargo_estado=crge.id_cargo_estado
    left join distrito as dd1 on
    cl.id_distrito_trabajo = dd1.id_distrito
    left join provincia as dp1 on
    dp1.id_provincia = dd1.id_provincia
    left join departamento as ddp1 on
    ddp1.id_departamento = dp1.id_departamento
    left join centro_trabajo_pnp as ctp on
    cl.id_centro_trabajo = ctp.id_centro_trabajo_pnp
    left join distrito as dd2 on
    ctp.id_distrito = dd2.id_distrito
    left join provincia as dp2 on
    dp2.id_provincia = dd2.id_provincia
    left join departamento as ddp2 on
    dp2.id_departamento = ddp2.id_departamento
    left JOIN
    (
        select
        cd0.id_cliente as id_cliente ,
        cd0.drc_nombre as direccion
        from
        cliente_direccion as cd0
        where
        cd0.drc_relevancia=1
        group by
        cd0.id_cliente
    ) as _direccion on
    cl.idcliente = _direccion.id_cliente
    left JOIN
    (
        select
        ct0.id_cliente as id_cliente ,
        ct0.tlf_numero as telefono
        from
        cliente_telefono as ct0
        where
        ct0.tlf_relevancia=1
        group by
        ct0.id_cliente
    ) as _telefono on
    cl.idcliente = _telefono.id_cliente
    where
    c.estado=1
    and
    cg.estado=1
    and
    cg.tipo_cuota<>2
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
) as resultado
group by resultado.id_cliente
having
(
	(prnivelmora=0) or
    (prnivelmora=1 and count(*)<=3) or
    (prnivelmora=2 and count(*)>3)
)
order by resultado.cliente asc, resultado.monto_pendiente desc;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_recalcularpagoscredito`(IN `prcredito` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
begin
	DECLARE V_tipo_pago INT unsigned ;
    DECLARE V_referencia INT unsigned ;
    DECLARE V_fecha DATE ;
    DECLARE V_monto_total FLOAT unsigned ;

	DECLARE finished INT unsigned default 0 ;
        
	declare cursor_pagos cursor for
    (
        select
            resultado.tipo_pago as tipo_pago,
            resultado.id_referencia as id_referencia,
            resultado.fecha as fecha ,
            round(sum(resultado.monto_total),2) as total_pagos
        from
        (       
            # Los pagos manuales
            # En este caso se considera el total como el monto total del pago_manual porque cada pago manual corresponde a una cuota del crongorama
            SELECT
                1 as tipo_pago ,
                c1.id_cobranza_manual as id_referencia ,
                c1.fecha as fecha ,
                c1.total as monto_total
            from
                cobranza_detalle as cdm
            inner join
                cobranza_manual as c1
            on
                (cdm.id_cobranza_manual>0 and cdm.id_cobranza_manual=c1.id_cobranza_manual)
            inner join
                credito_cronograma as cc
            on
            (cdm.id_credito_cronograma=cc.id_credito_cronograma)
            where
                cc.id_credito=prcredito
            and
                c1.estado=1
            -- Se quita este campo porque el procedimiento que se utiliza antes elimina pagos de cobranza_detalle
            /*
            and
                cdm.estado=1
            */
            -- Se quita este campo porque las cuotas se convierten en penalidad
            /*
            and
                cc.tipo_cuota<>2
            */
            and
                cc.estado<3
            and
                ( prfechainicio is null or c1.fecha > prfechainicio )
            and
                ( prfechafin is null or c1.fecha < prfechafin )
            group by
                c1.id_cobranza_manual

            UNION

            # Los pagos directos
            SELECT
                2 as tipo_pago ,
                c2.id_cobranza_directa as id_referencia ,
                c2.fecha_referencia as fecha ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_directa as c2
            on
                (cd.id_cobranza_directa=c2.id_cobranza_directa)
            inner join
                credito_cronograma as cc
            on
                (cd.id_credito_cronograma=cc.id_credito_cronograma)
            where /*
                cd.estado=1
            and */ /*
                c2.estado=1
            AND */
                cc.id_credito=prcredito
            and
                cc.tipo_cuota<>2
            and
                cc.estado<3
            and
                ( prfechainicio is null or c2.fecha_referencia > prfechainicio )
            and
                ( prfechafin is null or c2.fecha_referencia < prfechafin )
            group BY
                c2.id_cobranza_directa

            UNION

            # Los pagos por planilla
            SELECT 
                3 as tipo_pago ,
                cad.id_cobranza_detalle as id_referencia ,
                cac.fecha_fin as fecha ,
                sum(cd.monto) as monto_total
            FROM
                cobranza_detalle as cd
            inner join
                cobranza_archivos_detalle as cad
            on
                (cd.id_cobranza_archivos=cad.id_cobranza_detalle )
            inner join
                cobranza_archivos_cabecera as cac
            on
                ( cad.id_cobranza=cac.id_cobranza )
            inner join
                credito_cronograma as cc
            on
                (cd.id_credito_cronograma=cc.id_credito_cronograma)
            where /*
                cd.estado=1
            and */ /*
                cad.estado=1
            and */
                cac.estado=1
            and
                cc.id_credito=prcredito
            and
                cc.tipo_cuota<>2
            and
                cc.estado<3
            and
                ( prfechainicio is null or cac.fecha_fin > prfechainicio )
            and
                ( prfechafin is null or cac.fecha_fin < prfechafin )
            group by
                cad.id_cobranza_detalle
        ) as resultado
        group by
            resultado.tipo_pago, resultado.id_referencia
    ) ;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

	OPEN cursor_pagos;
    
    anularCronograma:LOOP
		FETCH cursor_pagos INTO V_tipo_pago, V_referencia, V_fecha, V_monto_total ;
        
		IF finished = 1 THEN 
			LEAVE anularCronograma;
		END IF;
        
        if V_tipo_pago = 1 then
        	call sp_crearpagocredito(0, V_referencia, prcredito, V_monto_total, V_fecha) ;
        ELSEIF V_tipo_pago = 2 then
        	call sp_crearpagocredito(V_referencia, 0, prcredito, V_monto_total, V_fecha) ;
        end if ;
        
    END LOOP anularCronograma;
	CLOSE cursor_pagos;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartipoproducto2`(IN `prid` INT, IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prum` VARCHAR(45) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
tp.id_tipo_producto,
tp.tprd_nombre,
tp.tiene_serie,
u.und_nombre
from
tipo_producto tp
inner join unidad_medida u on
tp.id_unidad_medida = u.idunidad_medida
where tp.estado = 1 and
(prid is null or tp.id_tipo_producto=prid)
and
(prnombre is null or tp.tprd_nombre like CONCAT('%', prnombre, '%'))
and
(prum is null or u.und_nombre like concat('%', prum, '%'))
order by tp.tprd_nombre
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcredito`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prdni` VARCHAR(10) CHARSET utf8, IN `prtipocredito` INT, IN `prestadopagos` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `orden` VARCHAR(30) CHARSET utf8)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;
DECLARE VCLIENTE VARCHAR(255);
DECLARE VDNI VARCHAR(255);
DECLARE VTIPOVENTA VARCHAR(255);
DECLARE VFECHA VARCHAR(255);
DECLARE VESTADO VARCHAR(255);
DECLARE VDOCUMENTOS VARCHAR(255);
DECLARE VESTADOPAGOS VARCHAR(255);

set IP = (prpagina-1)*prtotalpagina;
set TP = prtotalpagina;

SET VCLIENTE = concat(" AND\r\n(cl.clt_nombre like CONCAT('", prcliente,"', '%')) ");

SET VDNI = concat(" AND\r\n(cl.clt_dni like CONCAT('", prdni,"', '%')) ");

CASE prtipocredito
when 0 then set VTIPOVENTA="";
when 99 then set VTIPOVENTA=concat("AND (c.tipo>1) ");
else set VTIPOVENTA=concat("AND (c.tipo=",prtipocredito,") ");
end case;

IF prestado=0 then set VESTADO="";
ELSE set VESTADO=concat("AND (c.estado=",prestado,") ");
END IF;

IF (isnull(prfechainicio) and isnull(prfechafin)) then set VFECHA="";
ELSEIF (isnull(prfechafin)) then set VFECHA=CONCAT("AND (DATE(c.fecha)>='",prfechainicio,"') ");
ELSEIF (isnull(prfechainicio)) then set VFECHA=CONCAT("AND (DATE(c.fecha)<='",prfechafin,"') ");
ELSE set VFECHA=CONCAT("AND (DATE(c.fecha) between '",prfechainicio,"' and '",prfechafin,"') ");
END IF;

/*IF (prdocumentos=0) then set VDOCUMENTOS="";
elseif prdocumentos=1 then set VDOCUMENTOS=" having documentos_adjuntos < documentos_totales " ;
elseif prdocumentos=2 then set VDOCUMENTOS=" having documentos_adjuntos = documentos_totales " ;
else set VDOCUMENTOS="";
end if;*/

# 0. Todos
# 1. En curso
# 2. En curso y sin deuda
# 3. En curso y con deuda
# 4. Vencida y sin deuda
# 5. Vencida y con deuda

set VESTADOPAGOS="";
/*IF (prestadopagos=0) then set VESTADOPAGOS="";
elseif prestadopagos=1 then set VESTADOPAGOS=" having ( max(cg.fecha_vencimiento)>CURDATE() and sum(if(cg.fecha_vencimiento<CURDATE(),cg.monto_capital+cg.monto_interes-cg.monto_pagado,0)) = 0 ) " ;
elseif prestadopagos=2 then set VESTADOPAGOS=" having ( max(cg.fecha_vencimiento)>CURDATE() and sum(if(cg.fecha_vencimiento<CURDATE(),cg.monto_capital+cg.monto_interes-cg.monto_pagado,0)) > 0 ) " ;
elseif prestadopagos=3 then set VESTADOPAGOS=" having ( max(cg.fecha_vencimiento)<CURDATE() and sum(cg.monto_capital+cg.monto_interes-cg.monto_pagado) = 0 ) " ;
elseif prestadopagos=4 then set VESTADOPAGOS=" having ( max(cg.fecha_vencimiento)<CURDATE() and sum(cg.monto_capital+cg.monto_interes-cg.monto_pagado) > 0 ) " ;
else set VESTADOPAGOS="";
end if;*/

set @Statement=concat("\r\nSELECT\r\nc.id_credito as id,\r\nc.codigo as codigo,\r\nc.numero as numero,\r\ninst.inst_nombre as institucion,\r\ns.sd_nombre as sede,\r\nssd.ssd_nombre as subsede,\r\nc.id_cliente as id_cliente,\r\ncl.clt_nombre as cliente_nombre,\r\nc.fecha as fecha,\r\ntp.tpag_nombre as tipo_pago,\r\nc.total as monto_total,\r\nc.tipo as id_tipo_credito,\r\nct.nombre as tipo_credito,\r\nc.observaciones as observaciones,\r\n(\r\n    IF(c.foto_adjunto<>'' and c.tipo>1,1,0) +\r\n    IF(c.dni_adjunto<>'' and c.tipo>1,1,0) +\r\n    IF(c.cip_adjunto<>'' and c.tipo>1,1,0) +\r\n    IF(c.casilla_pj_adjunto<>'' and c.tipo>1,1,0) +\r\n    IF(c.transaccion_adjunto<>'' and c.tipo>1,1,0) +\r\n    IF(c.autorizacion_adjunto<>'' and c.tipo>1,1,0) +\r\n    IF(c.tarjeta_socio_adjunto<>'',1,0) +\r\n    IF(c.declaracion_jurada_adjunto<>'' and c.tipo>1,1,0) + \r\n    IF(c.compromiso_pago_adjunto<>''  and c.tipo>1 and c.id_tipo_pago=2,1,0)\r\n) as documentos_adjuntos,\r\n(\r\n    if(c.tipo>1,\r\n\t8 +IF(c.id_tipo_pago=2,1,0) ,\r\n    1)\r\n) as documentos_totales,\r\n(c.total-c.interes_diario)/c.numero_cuotas as cuota_estandar,\r\ncg1.monto_pagado as monto_pagado,\r\ncg1.monto_pendiente as monto_pendiente,\r\ncg11.monto_pendiente as monto_pendiente_hasta_hoy,\r\nif(\r\n\t\tcg11.monto_pendiente >= 2*(c.total-c.interes_diario)/c.numero_cuotas\r\n,1,0) as cumple_penalidad,\r\ncg_pagados.total + cg_pendientes.total as numero_cuotas,\r\ncg_pendientes.total as cuotas_pendientes,\r\ncg_pagados.total as cuotas_pagadas,\r\ncount(distinct _pjt.id_proceso) as numero_procesos,\r\nc.ultima_fecha_pago as ultima_fecha_pago,\r\nc.estado_penalidad as estado_penalidad ,\r\nlq.id_liquidacion as id_liquidacion ,\r\nif(lq.id_liquidacion is not null or cg1.monto_pendiente = 0,1,0) as pagado ,\r\nc.estado as estado\r\nfrom creditos as c\r\ninner join cliente as cl ON\r\nc.id_cliente=cl.idcliente\r\ninner join credito_tipo as ct on\r\nc.tipo=ct.id_credito_tipo\r\ninner join tipo_pago as tp ON\r\nc.id_tipo_pago=tp.idtipo_pago\r\nINNER JOIN subsede as ssd on\r\ncl.id_sub_sede = ssd.id_subsede\r\nINNER JOIN sede as s on\r\nssd.id_sede = s.id_sede\r\nINNER JOIN institucion as inst on\r\ns.id_institucion = inst.id_institucion\r\nleft join\r\n(\r\n\tselect\r\n    cg01.id_credito ,\r\n    SUM(cg01.monto_pagado) as monto_pagado ,\r\n    sum(cg01.monto_capital+cg01.monto_interes-cg01.monto_pagado) as monto_pendiente\r\n    from\r\n    credito_cronograma as cg01\r\n) as cg1 on\r\nc.id_credito=cg1.id_credito\r\nleft join\r\n(\r\n\tselect\r\n    cg011.id_credito ,\r\n    sum(cg011.monto_capital+cg011.monto_interes-cg011.monto_pagado) as monto_pendiente\r\n    from\r\n    credito_cronograma as cg011\r\n    where\r\n    cg011.fecha_vencimiento<CURDATE()\r\n) as cg11 on\r\nc.id_credito=cg11.id_credito\r\nleft join\r\n(\r\n\tselect\r\n    cgp1.id_credito ,\r\n    count(cgp1.id_credito) as total\r\n    from\r\n    credito_cronograma as cgp1\r\n    where\r\n    cgp1.estado = 2\r\n) as cg_pagados on\r\nc.id_credito=cg_pagados.id_credito\r\nleft join\r\n(\r\n\tselect\r\n    cgp2.id_credito ,\r\n    count(cgp2.id_credito) as total\r\n    from\r\n    credito_cronograma as cgp2\r\n    where\r\n    cgp2.estado = 1\r\n) as cg_pendientes on\r\nc.id_credito=cg_pendientes.id_credito\r\nleft join proceso_judicial as pj on\r\nc.id_credito=pj.id_credito and pj.estado=1\r\nleft join\r\n(\r\n    select\r\n    pjt.id_transaccion as id_transaccion,\r\n    pjt.tipo_transaccion as tipo_transaccion,\r\n    pj.id_proceso_judicial as id_proceso\r\n    from\r\n    proceso_judicial_transacciones as pjt\r\n    left join proceso_judicial as pj on\r\n    (pjt.id_proceso = pj.id_proceso_judicial and pj.estado=1 )\r\n    left join \r\n    (\r\n        SELECT pjd1.*\r\n        FROM proceso_judicial_detalle as pjd1\r\n        WHERE\r\n        pjd1.fecha = (SELECT pjd2.fecha\r\n                     FROM proceso_judicial_detalle as pjd2\r\n                     WHERE pjd2.id_proceso = pjd1.id_proceso            \r\n                     ORDER BY pjd2.fecha DESC\r\n                     LIMIT 1)\r\n    ) as pjd on\r\n    pj.id_proceso_judicial=pjd.id_proceso\r\n    where\r\n    pjt.estado=1\r\n    and\r\n    pj.estado<3\r\n    and\r\n    pj.fecha_inicio_pago is null\r\n    and\r\n    ( pjd.tipo_documento is null or pjd.tipo_documento<>5 )\r\n    group by pjt.id_proceso_judicial_transacciones\r\n) as _pjt on\r\n(_pjt.id_transaccion=c.id_credito and _pjt.tipo_transaccion=1)\r\nleft join\r\nliquidaciones as lq\r\non\r\n(c.id_credito = lq.id_transaccion and lq.tipo = 1 and lq.estado = 1)\r\nWHERE\r\n1 ",
VESTADO,
VTIPOVENTA,
VCLIENTE,
VDNI,
VFECHA,
" group by c.id_credito ",
VESTADOPAGOS,
" order by ",
orden,
", c.codigo desc, c.numero asc, c.tipo asc, id desc",
" limit ",IP,",",TP
);
                      
PREPARE stmt FROM @Statement;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarunidadmedida`(IN `prproducto` INT)
    READS SQL DATA
select 
idunidad_medida as id,
und_nombre as nombre
FROM
unidad_medida as un
left join tipo_producto as tp ON
tp.id_unidad_medida = un.idunidad_medida
WHERE
(prproducto is null or prproducto=tp.id_tipo_producto)
GROUP by idunidad_medida$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmodeloxId`(IN `prid` INT)
    READS SQL DATA
select
md.id_modelo as id,
md.id_marca as idmarca,
md.mdl_nombre as modelo
from
modelo md
where
md.id_modelo = prid$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarusuario`(IN `prnombre` VARCHAR(45) CHARSET utf8, IN `prusuario` VARCHAR(15) CHARSET utf8, IN `prperfil` VARCHAR(20) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    READS SQL DATA
BEGIN
    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;
    
    SELECT
    u.idusuario,
    u.usr_nombre,
    u.usr_usuario,
    u.usr_ultimologueo, 
    u.usr_fechacreacion,
    p.nombre as perfil,
    u.usr_clave as pss ,
    p.id_perfil as id_perfil
    FROM
    usuario u
    INNER JOIN perfil p ON
    u.idperfil = p.id_perfil
    WHERE 
    u.usr_nombre LIKE CONCAT('%',prnombre,'%')
    AND
    u.usr_usuario LIKE CONCAT('%',prusuario,'%')
    AND
    u.usr_estado=1
    AND
    p.nombre LIKE CONCAT(prperfil,'%')
    order by u.usr_nombre asc, u.usr_usuario asc
    LIMIT IP, TP;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcapacidadpago`(IN `prcliente` INT)
    NO SQL
begin

set @fecha := (select MAX(cpg_fecha) from capacidad_pago where id_cliente=prcliente group by id_cliente order by cpg_fecha desc limit 1 );

select
cpg_monto as monto,
cpg_tipo as tipo,
cpg_fecha as fecha
from
capacidad_pago
where
cpg_fecha=@fecha; 

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientecargoscontar`(IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prcargo` VARCHAR(50) CHARSET utf8)
    NO SQL
begin

    select
    count(cargo.id_cargo) as total
    from
    cargo
    inner join sede on
    sede.id_sede=cargo.id_sede
    inner join institucion on
    sede.id_institucion=institucion.id_institucion
    where
    cargo.crg_estado = 1
    and
    sede.sd_estado=1
    and
    institucion.inst_estado=1
    and
    institucion.inst_nombre like concat('%',prinstitucion,'%')
    and
    sede.sd_nombre like concat('%',prsede,'%')
    and
    cargo.crg_nombre like concat('%',prcargo,'%') ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarventavendedorxventa`(IN `prventa` INT)
    NO SQL
begin

	select
    	vv.id_vendedor as id_vendedor ,
        v.vnd_nombre as vendedor_nombre
    from
    	venta_vendedores as vv
    inner join
    	vendedor as v
    on
      	vv.id_vendedor = v.idvendedor  
    where
    	vv.id_venta=prventa
    and
    	vv.estado=1 ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzaplanillacabeceracontar`()
    NO SQL
begin

select
COUNT(c.id_cobranza) as total
from
cobranza_archivos_cabecera as c
inner join sede as s on
c.id_sede=s.id_sede
inner join tipo_pago as tp on
c.id_tipo_pago=tp.idtipo_pago
where
c.estado<3;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarmarca`(IN `prtipo` INT, IN `prnombre` VARCHAR(45) CHARSET utf8)
    READS SQL DATA
select
m.id_marca,
t.tprd_nombre,
m.mrc_nombre
from marca m
inner join tipo_producto t on
m.id_tipo_producto = t.id_tipo_producto
where m.estado = 1 and
(prtipo is null or prtipo = m.id_tipo_producto)
and
(prnombre is null or prnombre = CONCAT('%',m.mrc_nombre,'%'))
order by m.mrc_nombre asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarlogcontar`(IN `prusuario` VARCHAR(100) CHARSET utf8, IN `praccion` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    NO SQL
select
    	count(log.id_log) as total
    from
    	log
    inner join log_accion on
    	log.id_log_accion = log_accion.id_log_accion
    inner join usuario on
    	log.id_usuario = usuario.idusuario
    WHERE
    	usuario.usr_nombre like concat(prusuario,"%")
    and
    	( praccion = -1 or log.id_log_accion = praccion )
    and
    	(
            (prfechainicio is null and prfechafin is null) or
            (DATE(log.fecha) BETWEEN prfechainicio and prfechafin)
        )$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarvendedorcomisionpagocontar`(IN `prvendedorcomision` INT)
    NO SQL
select
count(id_vendedor_comision_pago) as total
from
vendedor_comision_pago
where
estado>0
and
id_vendedor_comision=prvendedorcomision$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_login`(IN `pusr_usuario` VARCHAR(15) CHARSET utf8)
BEGIN
SELECT
*
FROM
usuario
inner join perfil ON
usuario.idperfil=perfil.id_perfil
WHERE
	usuario.usr_usuario = TRIM(pusr_usuario)
    and
    usuario.usr_estado = 1
;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listartransaccioncabeceracontar`(IN `pralmacen` VARCHAR(40) CHARSET utf8, IN `prtipo` INT, IN `prparametro` INT, IN `prreferencia` INT, IN `prreferente` VARCHAR(40) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prdocumento` VARCHAR(40) CHARSET utf8)
    READS SQL DATA
BEGIN

select count(idtransaccion_cabecera) as total
FROM 
transaccion_cabecera as tcab
INNER JOIN almacen as a ON
tcab.id_almacen=a.idalmacen
inner join tipo_transaccion as tp ON
tcab.id_tipo_transaccion=tp.idtipo_transaccion
left join proveedor as p ON
tcab.id_proveedor=p.idproveedor
left join venta as vt ON
tcab.id_venta=vt.idventa
left join cliente as c ON
vt.id_cliente=c.idcliente
left join salida_cabecera as s on
tcab.id_salida_venta=idsalida_vendedor
left join almacen as al ON
tcab.id_almacen=al.idalmacen
left join vendedor as v ON
tcab.id_vendedor=v.idvendedor
WHERE
tcab.tsccab_estado=1
AND
(pralmacen is null or a.alm_nombre like concat('%',pralmacen,'%'))
AND
(prtipo is null or tcab.id_tipo_transaccion=prtipo) 
AND
(prreferencia is null or prreferencia=tcab.tsccab_referencia)
AND
(prreferente is null or
	p.prv_nombre like concat('%',prreferente,'%') or
 	c.clt_nombre like concat('%',prreferente,'%') OR
 	s.sc_codigo like concat('%',prreferente,'%') OR
 	al.alm_nombre like concat('%',prreferente,'%') OR
 	v.vnd_nombre like concat('%',prreferente,'%')) 
AND
((prfechainicio is null and prfechainicio is null) OR
(prfechainicio is null and tcab.tsccab_fecha<=prfechafin) OR
(prfechafin is null and tcab.tsccab_fecha>=prfechainicio) OR
(tcab.tsccab_fecha between prfechainicio and prfechafin))
AND
(prdocumento is null or tcab.tsccab_documento_referencia like concat('%',prdocumento,'%'))
and
(
(prparametro is null or prtipo<>5) or
#Segundo caso
(prparametro=1 and tcab.idtransaccion_cabecera in (
SELECT idtransaccion_cabecera
FROM transaccion_cabecera
WHERE
id_sucursal IS NOT NULL
GROUP BY
tsccab_documento_referencia
HAVING count(idtransaccion_cabecera)=1
)) or
#Tercer caso
(prparametro=2 and tcab.idtransaccion_cabecera in (
SELECT idtransaccion_cabecera
FROM transaccion_cabecera
WHERE
id_sucursal IS NOT NULL
GROUP BY
tsccab_documento_referencia
HAVING count(idtransaccion_cabecera)=2
)));

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditoxId`(IN `prid` INT)
    NO SQL
BEGIN

	set @porcentaje_penalidad = (
    	select
        	valor
        from
        	cooperativa_configuracion
        where
        	parametro = 'penalidad_credito_porcentaje'
        and
        	estado = 1
    );

    select
    c.id_acreedor as id_acreedor ,
    c.tipo as id_tipo,
    ct.nombre as tipo,
    c.id_sucursal as id_sucursal,
    s.scs_nombre as sucursal,
    c.fecha as fecha,
    c.codigo as codigo,
    c.numero as numero,
    CONCAT(c.codigo,'-',LPAD(c.numero,3,'0')) as codigo_credito,
    c.id_autorizador as id_autorizador,
    v2.vnd_nombre as autorizador,
    c.id_vendedor as id_vendedor,
    v1.vnd_nombre as vendedor,
    c.id_cliente as id_cliente,
    cl.clt_nombre as cliente,
    cl.clt_dni as cliente_dni,
    c.cliente_direccion as cliente_direccion,
    c.cliente_telefono as cliente_telefono,
    c.cliente_cargo as cliente_cargo,
    c.cliente_trabajo as cliente_trabajo,
    c.id_tipo_pago as id_tipo_pago,
    tp.tpag_nombre as tipo_pago,
    c.fecha_pago as fecha_pago,
    c.interes_diario as interes_diario,
    c.interes as interes,
    c.capital as capital,
    c.numero_cuotas as numero_cuotas,
    c.total as total,
    c.foto_adjunto as pdf_foto,
    c.dni_adjunto as pdf_dni,
    c.cip_adjunto as pdf_cip,
    c.planilla_virtual_adjunto as pdf_planilla,
    c.voucher_bn_adjunto as pdf_voucher,
    c.recibo_servicios_adjunto as pdf_recibo,
    c.casilla_pj_adjunto as pdf_casilla,
    c.transaccion_adjunto as pdf_transaccion,
    c.autorizacion_adjunto as pdf_autorizacion,
    c.tarjeta_socio_adjunto as pdf_tarjeta,
    c.compromiso_pago_adjunto as pdf_compromiso,
    c.letra_cambio_adjunto as pdf_letra,
    c.declaracion_jurada_adjunto as pdf_ddjj,
    c.oficio_adjunto as pdf_oficio,
    c.otros_adjunto as pdf_otros,
    c.observaciones as observaciones,
    c.id_credito_refinanciado as id_credito_refinanciado,
    concat(cr.codigo,"-",LPAD(cr.numero,3,"0")) as credito_refinanciado,
    (c.total-c.interes_diario)/c.numero_cuotas as cuota_estandar,
    _cronograma.monto_total as monto_total ,
    _cronograma.interes as interes_generado ,
    _cronograma.monto_pagado as monto_pagado ,
    _cronograma.monto_pendiente as monto_pendiente ,
    _cronograma.monto_pendiente_hasta_hoy as monto_pendiente_hasta_hoy,
    if(
        _cronograma.monto_pendiente_hasta_hoy >= if(_cronograma.total_cuotas=1, (c.total-c.interes_diario)/c.numero_cuotas,2*(c.total-c.interes_diario)/c.numero_cuotas)
    ,1,0) as cumple_penalidad,
    _cronograma.total_cuotas as total_cuotas ,
    _cronograma.total_pendiente as total_pendiente ,
    _cronograma.total_pagadas as total_pagadas,
    c.estado as id_estado,
    case c.estado
    when 1 then "Activo"
    when 2 then "Anulado"
    end as estado,
    coalesce(_cronograma2.total,0) as cuotas_penalidad ,
    coalesce(_cronograma3.total,0) as cuotas_interes ,
    coalesce(_cronograma3.pagado,0) as pagado_interes ,
    ROUND(_cronograma.monto_pendiente_hasta_hoy,2) as deuda_hasta_hoy ,
    if(_cronograma.total_cuotas=1, ROUND((c.total-c.interes_diario)/c.numero_cuotas,2), ROUND(2*(c.total-c.interes_diario)/c.numero_cuotas,2)) as monto_limite_penalidad ,
    ROUND(@porcentaje_penalidad * (c.total-c.interes_diario) / 100,2) as adicional_penalidad ,
    ROUND(
        ( (100 + @porcentaje_penalidad) * (c.total-c.interes_diario) ) / 100
    ,2) as monto_penalidad ,
    c.estado_penalidad as estado_penalidad ,
    c.estado_interes as estado_interes ,
    lq.id_liquidacion as id_liquidacion ,
    if(_cronograma.monto_pendiente=0 or lq.id_liquidacion is not null, 1, 0) as pagado
    from
    creditos as c
    inner join sucursal as s on
    c.id_sucursal=s.idsucursal
    left join vendedor as v1 on
    c.id_vendedor=v1.idvendedor
    left join vendedor as v2 on
    c.id_autorizador=v2.idvendedor
    inner join credito_tipo as ct on
    c.tipo=ct.id_credito_tipo
    inner join cliente as cl ON
    c.id_cliente=cl.idcliente
    inner join tipo_pago as tp on
    c.id_tipo_pago=tp.idtipo_pago
    left join creditos as cr on
    c.id_credito_refinanciado=cr.id_credito
    left join
    (
        select
        cg2.id_credito as id_credito,
        sum(cg2.monto_capital+cg2.monto_interes) as monto_total,
        sum(cg2.interes) as interes ,
        sum(cg2.monto_pagado) as monto_pagado,
        sum(cg2.monto_capital+cg2.monto_interes)-sum(cg2.monto_pagado) as monto_pendiente,
        sum(if(cg2.fecha_vencimiento<CURDATE() ,cg2.monto_capital+cg2.monto_interes-cg2.monto_pagado,0)) as monto_pendiente_hasta_hoy,
        count(cg2.id_credito_cronograma) as total_cuotas,
        count(if(cg2.estado=1,cg2.id_credito_cronograma,null)) as total_pendiente,
        count(if(cg2.estado=2,cg2.id_credito_cronograma,null)) as total_pagadas
        from
        credito_cronograma as cg2
        where
        cg2.estado<>3
        and
        cg2.tipo_cuota<>2
        group by
        cg2.id_credito
    ) as _cronograma on
    c.id_credito=_cronograma.id_credito
    left join
    (
        select
        cg22.id_credito as id_credito,
        count(cg22.id_credito_cronograma) as total
        from
        credito_cronograma as cg22
        where
        cg22.estado<>3
        and
        (cg22.tipo_cuota=2)
        group by
        cg22.id_credito
    ) as _cronograma2 on
    c.id_credito=_cronograma2.id_credito
    left join
    (
        select
        cg23.id_credito as id_credito,
        count(cg23.id_credito_cronograma) as total ,
        sum(cg23.monto_pagado) as pagado
        from
        credito_cronograma as cg23
        where
        cg23.estado<>3
        and
        (cg23.tipo_cuota=3)
        group by
        cg23.id_credito
    ) as _cronograma3 on
    c.id_credito=_cronograma3.id_credito
    left join
    liquidaciones as lq
    on
    (c.id_credito = lq.id_transaccion and lq.tipo = 1 and lq.estado = 1)
    where
    c.id_credito=prid ;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidacabecera`(IN `prcodigo` VARCHAR(11) CHARSET utf8, IN `prsucursal` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prdestino` VARCHAR(40) CHARSET utf8, IN `prvendedor` VARCHAR(50) CHARSET utf8, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `orden` VARCHAR(50) CHARSET utf8)
    READS SQL DATA
BEGIN

declare IP INT unsigned;
declare TP INT unsigned;
declare VCODIGO varchar (255);
declare VSUCURSAL varchar (255);
declare VFECHA varchar (255);
declare VDESTINO varchar (255);
declare VVENDEDOR varchar (255);
declare VESTADO varchar(255);

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SET VCODIGO=CONCAT(" and sv.sc_codigo like CONCAT('%','", prcodigo,"', '%') ");

if (prestado=0) then set VESTADO=" and sv.sc_estado<>3 ";
else set VESTADO=concat(" and sv.sc_estado=",prestado," ");
end if;

if(prdestino ="") then set VDESTINO="";
else set VDESTINO=concat(" and
sv.sc_destino like concat('%','",prdestino,"','%') ");
end if;

if (isnull(prsucursal)) then set VSUCURSAL="";
else set VSUCURSAL=concat(" and sv.id_sucursal=",prsucursal," ");
end if;

IF (isnull(prfechainicio) and isnull(prfechafin)) then set VFECHA="";
ELSEIF (isnull(prfechafin)) then set VFECHA=CONCAT(" AND (sv.sc_fecha>='",prfechainicio,"') ");
ELSEIF (isnull(prfechainicio)) then set VFECHA=CONCAT(" AND (sv.sc_fecha<='",prfechafin,"') ");
ELSE set VFECHA=CONCAT(" AND (sv.sc_fecha between '",prfechainicio,"' and '",prfechafin,"') ");
END IF;

/*if (isnull(prserie)) then set VSERIE="";
else set VSERIE=CONCAT(" AND (ps.id_producto_serie in (select id_producto_serie from producto_serie where convert(ps_serie,char(20)) like concat('%',",prserie,",'%'))) ");
end if;*/

set VVENDEDOR=CONCAT(" AND (sdetv.id_vendedor in (select idvendedor from vendedor as v2 where v2.vnd_nombre like concat('%','",prvendedor,"','%'))) ");

set @Statement=concat("
select
sv.idsalida_vendedor as 'id',
sv.sc_codigo as 'pecosa',
s.scs_nombre as 'sucursal',
sv.sc_fecha as 'fecha',
sv.sc_destino as 'destino',
sv.sc_vehiculo_placa as 'vehiculo_placa',
sv.sc_chofer_dni as 'chofer_dni',
sv.sc_chofer_nombre as 'chofer_nombre',
sv.sc_estado as id_estado,
COUNT(IF(sdt.sdt_estado=2,1,null)) as ventas,
COUNT(IF(sdg.sdg_estado=1,1,null)) as viaticos,
case sv.sc_estado
when 1 then 'Pendiente'
when 2 then 'Cerrada'
when 3 then 'Anulada'
end as 'estado' 
FROM
salida_cabecera as sv
inner join sucursal as s on
sv.id_sucursal = s.idsucursal
inner join salida_detalle_vendedor as sdetv ON
sv.idsalida_vendedor = sdetv.id_salida_cabecera
inner join vendedor as v ON
sdetv.id_vendedor = v.idvendedor
inner join salida_detalle_talonario as sdt on
sdt.id_salida_cabecera=sv.idsalida_vendedor
left join salida_detalle_gasto as sdg on
sv.idsalida_vendedor=sdg.id_salida_cabecera
where
1 ",
VDESTINO,
VCODIGO,
VSUCURSAL,
VFECHA,
#VSERIE,
VVENDEDOR,
VESTADO,
" GROUP BY sv.idsalida_vendedor ",
" ORDER BY ",
orden,
" ,id desc ",
" limit ",IP,",",TP);

prepare stmt from @Statement;
execute stmt;
DEALLOCATE prepare stmt;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclientetelefonocontar`(IN `pidcliente` INT, IN `ptlf_relevancia` INT)
    READS SQL DATA
SELECT
COUNT(tel.idcliente_telefono) as total
FROM cliente_telefono tel
INNER JOIN cliente c on tel.id_cliente = c.idcliente
WHERE (pidcliente IS NULL OR c.idcliente = pidcliente) AND
(ptlf_relevancia IS NULL OR tel.tlf_relevancia = ptlf_relevancia)
and
tel.tlf_estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditovendedorxcredito`(IN `prcredito` INT)
    NO SQL
begin

	select
    	cv.id_vendedor as id_vendedor ,
        v.vnd_nombre as vendedor_nombre
    from
    	credito_vendedores as cv
    inner join
    	vendedor as v
    on
      	cv.id_vendedor = v.idvendedor  
    where
    	cv.id_credito=prcredito
    and
    	cv.estado=1 ;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxclienteperiodosunlimited`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prtipocomparacion` INT, IN `prlimite` INT)
    NO SQL
BEGIN

-- prtipocomparacion = 0: nada, 1: mayor o igual, -1: menor o igual

select
id_cliente,
cliente_dni,
cliente_codigo,
cliente,
case prtipopago
	when 0 then "Todos"
    else tipo_pago
end as tipo_pago,
subsede,
sede,
institucion,
sum(monto_pendiente) as monto_pendiente,
count(*) as total_deudas,
min(fecha_vencimiento) as primera_fecha_vencimiento,
max(ultima_fecha_pago) as ultima_fecha_pago ,
max(meses_sin_pagar) as meses_sin_pagar ,
identificador ,
cargo ,
cargo_estado ,
distrito ,
provincia ,
departamento ,
centro_trabajo ,
direccion_centro_trabajo ,
telefono_centro_trabajo ,
direccion ,
telefono
from
(
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_codigo as cliente_codigo,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente ,
    min(vg.cng_fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago ,
    GROUP_CONCAT(DISTINCT concat('Venta: ', t.tln_serie,'-',t.tln_numero) SEPARATOR ', ') as identificador ,
    case 
	when max(detalle_pagos_adjunto.fecha) is not null then TIMESTAMPDIFF(MONTH, max(detalle_pagos_adjunto.fecha), now() )
    else TIMESTAMPDIFF(MONTH, min(vg.cng_fecha_vencimiento), now() )
end as meses_sin_pagar ,
    crg.crg_nombre as cargo ,
    crge.cstd_nombre as cargo_estado ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dd2.dst_nombre, 'No especifica')
    else coalesce(dd1.dst_nombre, 'No especifica')
    end as distrito ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dp2.prv_nombre, 'No especifica')
    else coalesce(dp1.prv_nombre, 'No especifica')
    end as provincia ,
    case when cl.id_centro_trabajo > 0
    then coalesce(ddp2.dpt_nombre, 'No especifica')
    else coalesce(ddp1.dpt_nombre, 'No especifica')
    end as departamento ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.comisaria, '-', ctp.division), 'No especifica')
    else coalesce(cl.clt_trabajo, 'No especifica')
    end as centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.direccion), 'No especifica')
    else 'No especifica'
    end as direccion_centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.telefono), 'No especifica')
    else 'No especifica'
    end as telefono_centro_trabajo ,
    coalesce(direccion_adjunto.direccion, 'No especifica') as direccion ,
    coalesce(telefono_adjunto.telefono, 'No especifica') as telefono
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join talonario as t on
    v.id_talonario=t.id_talonario
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join cargo as crg on
    cl.id_cargo=crg.id_cargo
    left join cargo_estado as crge on
    cl.id_cargo_estado=crge.id_cargo_estado
    left join distrito as dd1 on
    cl.id_distrito_trabajo = dd1.id_distrito
    left join provincia as dp1 on
    dp1.id_provincia = dd1.id_provincia
    left join departamento as ddp1 on
    ddp1.id_departamento = dp1.id_departamento
    left join centro_trabajo_pnp as ctp on
    cl.id_centro_trabajo = ctp.id_centro_trabajo_pnp
    left join distrito as dd2 on
    ctp.id_distrito = dd2.id_distrito
    left join provincia as dp2 on
    dp2.id_provincia = dd2.id_provincia
    left join departamento as ddp2 on
    dp2.id_departamento = ddp2.id_departamento
    left JOIN
    (
        select
        cd0.id_cliente as id_cliente ,
        cd0.drc_nombre as direccion
        from
        cliente_direccion as cd0
        where
        cd0.drc_relevancia=1
        group by
        cd0.id_cliente
    ) as direccion_adjunto on
    cl.idcliente = direccion_adjunto.id_cliente
    left JOIN
    (
        select
        ct0.id_cliente as id_cliente ,
        ct0.tlf_numero as telefono
        from
        cliente_telefono as ct0
        where
        ct0.tlf_relevancia=1
        group by
        ct0.id_cliente
    ) as telefono_adjunto on
    cl.idcliente = telefono_adjunto.id_cliente
    left join liquidaciones as lq on
    v.idventa = lq.id_venta
    left join
    (
        select
        cd.id_venta_cronograma as id_venta_cronograma,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        	cd.id_venta_cronograma
    )  as detalle_pagos_adjunto on
    vg.id_venta_cronograma = detalle_pagos_adjunto.id_venta_cronograma
    where
    v.vnt_estado=1
    and
    vg.cng_estado=1
    and
    vg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) > 0
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
    group by
    	v.id_cliente
    having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
union
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_codigo as cliente_codigo,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente ,
    min(cg.fecha_vencimiento) as fecha_vencimiento ,
    max(detalle_pagos_adjunto.fecha) as ultima_fecha_pago,
    GROUP_CONCAT(
        DISTINCT
        case c.tipo
            when 1 then concat('Afiliacion: ', c.codigo)
            else CONCAT('Prestamo: ', c.codigo,"-",LPAD(c.numero,3,"0"))
        end
        SEPARATOR ', '
    ) as identificador ,
        case 
	when max(detalle_pagos_adjunto.fecha) is not null then TIMESTAMPDIFF(MONTH, max(detalle_pagos_adjunto.fecha), now() )
    else TIMESTAMPDIFF(MONTH, min(cg.fecha_vencimiento), now() )
end as meses_sin_pagar ,
    crg.crg_nombre as cargo ,
    crge.cstd_nombre as cargo_estado ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dd2.dst_nombre, 'No especifica')
    else coalesce(dd1.dst_nombre, 'No especifica')
    end as distrito ,
    case when cl.id_centro_trabajo > 0
    then coalesce(dp2.prv_nombre, 'No especifica')
    else coalesce(dp1.prv_nombre, 'No especifica')
    end as provincia ,
    case when cl.id_centro_trabajo > 0
    then coalesce(ddp2.dpt_nombre, 'No especifica')
    else coalesce(ddp1.dpt_nombre, 'No especifica')
    end as departamento ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.comisaria, '-', ctp.division), 'No especifica')
    else coalesce(cl.clt_trabajo, 'No especifica')
    end as centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.direccion), 'No especifica')
    else 'No especifica'
    end as direccion_centro_trabajo ,
    case when cl.id_centro_trabajo > 0
    then coalesce(concat(ctp.telefono), 'No especifica')
    else 'No especifica'
    end as telefono_centro_trabajo ,
    coalesce(direccion_adjunto.direccion, 'No especifica') as direccion ,
    coalesce(telefono_adjunto.telefono, 'No especifica') as telefono
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    left join cargo as crg on
    cl.id_cargo=crg.id_cargo
    left join cargo_estado as crge on
    cl.id_cargo_estado=crge.id_cargo_estado
    left join distrito as dd1 on
    cl.id_distrito_trabajo = dd1.id_distrito
    left join provincia as dp1 on
    dp1.id_provincia = dd1.id_provincia
    left join departamento as ddp1 on
    ddp1.id_departamento = dp1.id_departamento
    left join centro_trabajo_pnp as ctp on
    cl.id_centro_trabajo = ctp.id_centro_trabajo_pnp
    left join distrito as dd2 on
    ctp.id_distrito = dd2.id_distrito
    left join provincia as dp2 on
    dp2.id_provincia = dd2.id_provincia
    left join departamento as ddp2 on
    dp2.id_departamento = ddp2.id_departamento
    left JOIN
    (
        select
        cd0.id_cliente as id_cliente ,
        cd0.drc_nombre as direccion
        from
        cliente_direccion as cd0
        where
        cd0.drc_relevancia=1
        group by
        cd0.id_cliente
    ) as direccion_adjunto on
    cl.idcliente = direccion_adjunto.id_cliente
    left JOIN
    (
        select
        ct0.id_cliente as id_cliente ,
        ct0.tlf_numero as telefono
        from
        cliente_telefono as ct0
        where
        ct0.tlf_relevancia=1
        group by
        ct0.id_cliente
    ) as telefono_adjunto on
    cl.idcliente = telefono_adjunto.id_cliente
    left join liquidaciones as lq on
    c.id_credito = lq.id_credito
	left join
    (
        select
        cd.id_credito_cronograma as id_credito_cronograma ,
        if(
            cd.id_cobranza_directa>0,
            max(cbd.fecha),
            if(
                cd.id_cobranza_archivos>0,
                cac.fecha_pago,
                if(
                    cd.id_cobranza_manual>0,
                    cbm.fecha,
                    null
                )
            )
        ) as fecha
        from
        cobranza_detalle as cd
        left join cobranza_directa as cbd on
        cd.id_cobranza_directa=cbd.id_cobranza_directa
        left join cobranza_archivos_detalle as cad on
        cd.id_cobranza_archivos=cad.id_cobranza_detalle
        left join cobranza_archivos_cabecera as cac on
        cad.id_cobranza=cac.id_cobranza
        left join cobranza_manual as cbm on
        cd.id_cobranza_manual=cbm.id_cobranza_manual
        where
        cd.estado=1
        and
        ( 
            (cd.id_cobranza_archivos=0) or
            (cd.id_cobranza_archivos>0 and cac.estado=2)
        )
        and
        (
            (cd.id_cobranza_directa=0) or
            (cd.id_cobranza_directa>0 and cbd.estado=1)
        )
        and
        (
            (cd.id_cobranza_manual=0) or
            (cd.id_cobranza_manual>0 and cbm.estado=1)
        )
        group by
        cd.id_credito_cronograma
    ) as detalle_pagos_adjunto on
    cg.id_credito_cronograma = detalle_pagos_adjunto.id_credito_cronograma
    where
    c.estado=1
    and
    cg.estado=1
    and
    cg.tipo_cuota<>2
    and
    lq.id_liquidacion is null
    and
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) > 0
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
    group by
    	c.id_cliente
    having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
) as resultado
group by resultado.id_cliente
having
if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) > 0
and
(
	(prtipocomparacion=0) or
    (prtipocomparacion=1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) <= prlimite ) or
    (prtipocomparacion=-1 and if(ultima_fecha_pago is not null,TIMESTAMPDIFF(MONTH, max(ultima_fecha_pago), now()),TIMESTAMPDIFF(MONTH, min(fecha_vencimiento), now())) >= prlimite )
)
order by monto_pendiente desc ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarhistorialserieunlimited`(IN `prserie` VARCHAR(40) CHARSET utf8)
    NO SQL
BEGIN

SELECT 
	tc.tsccab_fecha AS fecha,
    ps.ps_serie AS serie,
    prd.prd_descripcion AS producto,
	tc.tsccab_documento_referencia AS documento,
    CONCAT(
        case tt.ttsc_tipo
            when 1 then a.alm_documento_ingreso
            when 2 then a.alm_documento_salida
        end,
        "-",
    	tc.numero_documento
    ) as movimiento,
	tt.ttsc_nombre AS transaccion,
(CASE
	WHEN tt.idtipo_transaccion = 1 THEN prv.prv_nombre
	WHEN tt.idtipo_transaccion = 2 THEN	clt.clt_nombre
	WHEN tt.idtipo_transaccion = 3 THEN clt.clt_nombre
	WHEN tt.idtipo_transaccion = 4 THEN CONCAT("Pecosa ",sv.sc_codigo)
	WHEN tt.idtipo_transaccion = 5 THEN al2.alm_nombre
	WHEN tt.idtipo_transaccion = 6 THEN CONCAT("Pecosa ",sv.sc_codigo)
	WHEN tt.idtipo_transaccion = 7 THEN al2.alm_nombre
END) AS tenedor
		
FROM transaccion_detalle as td
 INNER JOIN transaccion_cabecera AS tc ON
 tc.idtransaccion_cabecera = td.id_movimiento_cabecera
 INNER join almacen as a on
 tc.id_almacen=a.idalmacen
 left JOIN proveedor AS prv ON
 tc.id_proveedor  = prv.idproveedor
 left join venta as vt on
 tc.id_venta=vt.idventa
 left JOIN cliente AS clt ON
 vt.id_cliente = clt.idcliente
 left join salida_cabecera as sv on
 tc.id_salida_venta=sv.idsalida_vendedor
 left JOIN vendedor AS vnd ON
 tc.id_vendedor = vnd.idvendedor
 left JOIN almacen AS al2 ON
 tc.id_sucursal = al2.idalmacen
 left JOIN tipo_transaccion AS tt ON
 tc.id_tipo_transaccion = tt.idtipo_transaccion
 left JOIN producto_serie AS ps ON
 td.id_producto_serie  = ps.id_producto_serie
 INNER JOIN producto AS prd ON
 ps.id_producto = prd.idproducto
 
 WHERE
  (prserie="" or ps.ps_serie like concat('%',prserie,'%'))
  and
  tc.tsccab_estado=1
  and
  td.tscdet_estado=1
  ORDER BY tc.tsccab_fecha DESC, tc.idtransaccion_cabecera desc;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarhistorialseriecontar`(IN `prserie` VARCHAR(50) CHARSET utf8)
    NO SQL
BEGIN

SELECT count(*) as total		
FROM transaccion_detalle as td
 INNER JOIN transaccion_cabecera AS tc ON
 tc.idtransaccion_cabecera = td.id_movimiento_cabecera
 
 left JOIN proveedor AS prv ON
 tc.id_proveedor  = prv.idproveedor
 left join venta as vt on
 tc.id_venta=vt.idventa
 left JOIN cliente AS clt ON
 vt.id_cliente = clt.idcliente
 left JOIN vendedor AS vnd ON
 tc.id_vendedor = vnd.idvendedor
 left JOIN sucursal AS scs ON
 tc.id_sucursal = scs.idsucursal
 left JOIN tipo_transaccion AS tt ON
 tc.id_tipo_transaccion = tt.idtipo_transaccion
 left JOIN producto_serie AS ps ON
 td.id_producto_serie  = ps.id_producto_serie
 INNER JOIN producto AS prd ON
 ps.id_producto = prd.idproducto
 
 WHERE (prserie="" or ps.ps_serie like concat('%',prserie,'%'))
 and
 tc.tsccab_estado=1
 and
 td.tscdet_estado=1
 ;
  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarclienteestricto`(IN `prcodigo` VARCHAR(45) CHARSET utf8, IN `prcip` VARCHAR(20) CHARSET utf8, IN `prdni` VARCHAR(8) CHARSET utf8, IN `prnombre` VARCHAR(100) CHARSET utf8, IN `prinstitucion` INT, IN `prsede` INT, IN `prpagina` INT, IN `prtotalpagina` INT, IN `prestado` INT)
    READS SQL DATA
BEGIN


DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

SELECT
resultado.id as id,
resultado.codigo as codigo,
resultado.dni as dni,
resultado.nombre as nombre,
resultado.cip as cip,
resultado.email as email,
resultado.cargo as cargo,
resultado.casilla as casilla,
resultado.institucion as institucion,
resultado.id_sede as id_sede,
resultado.sede as sede,
resultado.subsede as subsede,
resultado.trabajo as trabajo,
resultado.id_distrito_trabajo as id_distrito_trabajo,
resultado.capacidad_pago as capacidad_pago,
resultado.maximo_descuento as maximo_descuento,
resultado.calificacion_personal as calificacion_personal,
resultado.aporte as aporte,
resultado.fecha_registro as fecha_registro,
resultado.foto as foto,
COALESCE(sum(resultado.cuotas_vencidas),0) as cuotas_vencidas,
Min(resultado.verificado) as verificado,
COALESCE(sum(resultado.total_creditos),0) as total_creditos ,
COALESCE(sum(resultado.total_ventas),0) as total_ventas ,
COALESCE(sum(resultado.total_transacciones),0) as total_transacciones
FROM
(
    select
    c2v.idcliente as id,
    c2v.clt_codigo as codigo,
    c2v.clt_dni as dni,
    c2v.clt_nombre as nombre,
    c2v.clt_cip as cip,
    c2v.clt_email as email,
    cg2v.crg_nombre as cargo,
    c2v.clt_casilla as casilla,
    i2.inst_nombre as institucion,
    c2v.id_sede as id_sede,
    s2.sd_nombre as sede,
    ssd2v.ssd_nombre as subsede,
    c2v.clt_trabajo as trabajo,
    c2v.id_distrito_trabajo as id_distrito_trabajo,
    c2v.clt_capacidad_pago as capacidad_pago,
    c2v.clt_maximo_descuento as maximo_descuento,
    c2v.clt_calificacion_personal as calificacion_personal,
    c2v.clt_aporte as aporte,
    c2v.clt_fecharegistro as fecha_registro,
    c2v.clt_foto as foto,
    _cronograma.cuotas_vencidas as cuotas_vencidas,
    min(_cronograma.verificado) as verificado,
    0 as total_creditos ,
    count(DISTINCT vt2.idventa) as total_ventas ,
    count(DISTINCT vt2.idventa) as total_transacciones
    from
    venta as vt2
    inner join cliente as c2v on
    vt2.id_cliente=c2v.idcliente
    inner join subsede as ssd2v on
    c2v.id_sub_sede=ssd2v.id_subsede
    inner join cargo as cg2v on
    c2v.id_cargo=cg2v.id_cargo
    inner join sede as s2 on
    c2v.id_sede=s2.id_sede
    inner join institucion as i2 on
    c2v.id_institucion=i2.id_institucion
    left JOIN
    (
        select
        v3.id_cliente as id_cliente,
        coalesce(count(case when vc2.cng_estado=1 then vc2.id_venta_cronograma end),0) as cuotas_vencidas,
        coalesce(MIN(case when vc2.cng_estado=2 then vc2.verificado end),0) as verificado
        FROM
        venta_cronograma as vc2
        inner join venta as v3 on
        vc2.id_venta=v3.idventa
        where
        vc2.cng_estado<>3
        and
        v3.vnt_estado=1
        and
        vc2.cng_fecha_vencimiento<CURRENT_DATE
        group by
        v3.id_cliente
    ) as _cronograma on
    vt2.id_cliente=_cronograma.id_cliente
    where
    vt2.vnt_estado=1
    and
    c2v.clt_estado = prestado
    AND
    (c2v.clt_dni LIKE CONCAT(prdni,'%'))
    AND
    (c2v.clt_nombre LIKE CONCAT(prnombre,'%'))
    and
    (c2v.clt_codigo like concat(prcodigo,'%'))
    and
    (c2v.clt_cip like concat(prcip,'%'))
    and
    ( prinstitucion=0 or i2.id_institucion=prinstitucion )
    and
    ( prsede=0 or s2.id_sede=prsede )
    group by vt2.id_cliente
    
    UNION
 
    select
    c2c.idcliente as id,
    c2c.clt_codigo as codigo,
    c2c.clt_dni as dni,
    c2c.clt_nombre as nombre,
    c2c.clt_cip as cip,
    c2c.clt_email as email,
    cg2c.crg_nombre as cargo,
    c2c.clt_casilla as casilla,
    i2.inst_nombre as institucion,
    c2c.id_sede as id_sede,
    s2.sd_nombre as sede,
    ssd2c.ssd_nombre as subsede,
    c2c.clt_trabajo as trabajo,
    c2c.id_distrito_trabajo as id_distrito_trabajo,
    c2c.clt_capacidad_pago as capacidad_pago,
    c2c.clt_maximo_descuento as maximo_descuento,
    c2c.clt_calificacion_personal as calificacion_personal,
    c2c.clt_aporte as aporte,
    c2c.clt_fecharegistro as fecha_registro,
    c2c.clt_foto as foto,
    _cronograma.cuotas_vencidas as cuotas_vencidas,
    min(_cronograma.verificado) as verificado,
    count(DISTINCT ct2.id_credito) as total_creditos ,
    0 as total_ventas ,
    count(DISTINCT ct2.id_credito) as total_transacciones
    from
    creditos as ct2
    inner join cliente as c2c on
    ct2.id_cliente=c2c.idcliente
    inner join subsede as ssd2c on
    c2c.id_sub_sede=ssd2c.id_subsede
    inner join cargo as cg2c on
    c2c.id_cargo=cg2c.id_cargo
    inner join sede as s2 on
    c2c.id_sede=s2.id_sede
    inner join institucion as i2 on
    c2c.id_institucion=i2.id_institucion
    left JOIN
    (
        select
        c3.id_cliente as id_cliente,
        coalesce(count(case when cc2.estado=1 then cc2.id_credito_cronograma end),0) as cuotas_vencidas,
        coalesce(MIN(case when cc2.estado=2 then cc2.verificado end),0) as verificado
        FROM
        credito_cronograma as cc2
        inner join creditos as c3 on
        cc2.id_credito=c3.id_credito
        where
        cc2.estado<>3
        and
        c3.estado=1
        and
        cc2.fecha_vencimiento<CURRENT_DATE
        group by
        c3.id_cliente
    ) as _cronograma on
    ct2.id_cliente=_cronograma.id_cliente
    where
    ct2.estado=1
    and
    c2c.clt_estado = prestado
    AND
    (c2c.clt_dni LIKE CONCAT(prdni,'%'))
    AND
    (c2c.clt_nombre LIKE CONCAT(prnombre,'%'))
    and
    (c2c.clt_codigo like concat(prcodigo,'%'))
    and
    (c2c.clt_cip like concat(prcip,'%'))
    and
    ( prinstitucion=0 or i2.id_institucion=prinstitucion )
    and
    ( prsede=0 or s2.id_sede=prsede )
    group by ct2.id_cliente
    
) as resultado
group by
resultado.id
order BY
resultado.nombre asc
LIMIT IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_test`(var1 INT)
BEGIN   
    DECLARE start  INT unsigned DEFAULT 1;  
    DECLARE finish INT unsigned DEFAULT 10;

    SELECT  var1, start, finish;

    SELECT * FROM producto WHERE id_producto BETWEEN start AND finish; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasxcliente`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prsubsede` VARCHAR(50) CHARSET utf8, IN `prsede` VARCHAR(50) CHARSET utf8, IN `prinstitucion` VARCHAR(50) CHARSET utf8, IN `prtipopago` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prnivelmora` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

DECLARE IP INT unsigned;
DECLARE TP INT unsigned;

set IP = (prpagina-1)*prtotalpagina;
set TP=prtotalpagina;

select
id_cliente,
cliente_dni,
cliente,
case prtipopago
	when 0 then "Todos"
    else tipo_pago
end as tipo_pago,
subsede,
sede,
institucion,
sum(monto_pendiente) as monto_pendiente,
count(*) as total_deudas
from
(
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,2) as monto_pendiente
    from
    venta_cronograma as vg
    inner join venta as v on
    vg.id_venta=v.idventa
    inner join cliente as cl on
    v.id_cliente=cl.idcliente
    inner join tipo_pago as tp on
    vg.id_tipo_pago=tp.idtipo_pago
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    where
    v.vnt_estado=1
    and
    vg.cng_estado=1
    and
    vg.tipo_cuota<>2
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.id_institucion like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and vg.cng_fecha_vencimiento<=prfechafin) or
        (prfechafin is null and vg.cng_fecha_vencimiento>=prfechainicio) or
        (vg.cng_fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
union
    select
    cl.idcliente as id_cliente,
    cl.clt_dni as cliente_dni,
    cl.clt_nombre as cliente,
    tp.tpag_nombre as tipo_pago,
    ssd.ssd_nombre as subsede,
    sd.sd_nombre as sede,
    ins.inst_nombre as institucion,
    ROUND(cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado,2) as monto_pendiente
    from
    credito_cronograma as cg
    inner join creditos as c on
    cg.id_credito=c.id_credito
    inner join tipo_pago as tp on
    cg.id_tipo_pago=tp.idtipo_pago
    inner join cliente as cl on
    c.id_cliente=cl.idcliente
    inner join subsede as ssd on
    cl.id_sub_sede=ssd.id_subsede
    inner join sede as sd on
    ssd.id_sede=sd.id_sede
    inner join institucion as ins on
    sd.id_institucion=ins.id_institucion
    where
    c.estado=1
    and
    cg.estado=1
    and
    cg.tipo_cuota<>2
    and
    cl.clt_nombre like concat(prcliente,'%')
    and
    (ssd.ssd_nombre like concat(prsubsede,'%'))
    and
    (sd.sd_nombre like concat(prsede, '%'))
    and
    (ins.inst_nombre like concat(prinstitucion, '%'))
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (prfechainicio is null and cg.fecha_vencimiento<=prfechafin) or
        (prfechafin is null and cg.fecha_vencimiento>=prfechainicio) or
        (cg.fecha_vencimiento BETWEEN prfechainicio and prfechafin)
    )
    and
    ( 
        (prtipopago=0) OR
        (prtipopago=tp.idtipo_pago)
    )
) as resultado
group by resultado.id_cliente
having
(
	(prnivelmora=0) or
    (prnivelmora=1 and count(*)<=3) or
    (prnivelmora=2 and count(*)>3)
)
order by monto_pendiente desc
limit IP, TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcooperativadireccion`(IN `prdepartamento` VARCHAR(50) CHARSET utf8, IN `prprovincia` VARCHAR(50) CHARSET utf8, IN `prdistrito` VARCHAR(50) CHARSET utf8, IN `prdireccion` VARCHAR(100) CHARSET utf8, IN `prestado` INT, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP = prtotalpagina;

	SELECT
    cd.id_cooperativa_direccion as id_cooperativa_direccion ,
    dp.id_departamento as id_departamento ,
    p.id_provincia as id_provincia ,
    d.id_distrito as id_distrito ,
    capitalize(dp.dpt_nombre) as departamento ,
    capitalize(p.prv_nombre) as provincia ,
    capitalize(d.dst_nombre) as distrito ,
    cd.direccion as cooperativa_direccion ,
    cd.relevancia as relevancia ,
    cd.principal as principal ,
    cd.numero_orden as numero_orden
    from
    cooperativa_direccion as cd
    inner join distrito as d on
    cd.id_distrito = d.id_distrito
    inner join provincia as p on
    d.id_provincia = p.id_provincia
    inner join departamento as dp ON
    p.id_departamento = dp.id_departamento
    WHERE
    cd.estado = 1
    and
    dp.dpt_nombre like concat(prdepartamento,'%')
    and
    p.prv_nombre like concat(prprovincia,'%')
    and
    d.dst_nombre like concat(prdistrito,'%')
    and
    cd.direccion like concat(prdireccion,'%')
    and
    ( 
        (prestado = 0) or
        (prestado = 1 and cd.numero_orden > 0) or
        (prestado = 2 and cd.numero_orden = 0)
    )
    order by
    cd.numero_orden desc
    limit IP, TP ;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_validarproductoserie`(IN `prserie` VARCHAR(40) CHARSET utf8, IN `pridevitar` INT)
    READS SQL DATA
SELECT
count(id_producto_serie) as total
from
producto_serie
where
ps_serie=prserie
and
ps_estado=1
and
(pridevitar=0 or id_producto_serie<>pridevitar)$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillastipo`()
    NO SQL
select
id_plantilla_tipo as id,
nombre as nombre
from
plantillas_tipo
where
estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarjuzgadoinstancia`(IN `pridjuzgadodistrito` INT, IN `prjuzgadodistrito` VARCHAR(50) CHARSET utf8, IN `prjuzgadoinstancia` VARCHAR(50) CHARSET utf8, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
begin

    DECLARE IP INT unsigned;
    DECLARE TP INT unsigned;
    
    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;
    
    select
    ji.id_juzgado_instancia as id_juzgado_instancia,
    ji.id_juzgado_distrito as id_juzgado_distrito,
    jd.nombre as juzgado_distrito,
    ji.nombre as juzgado_instancia
    from
    juzgado_instancia as ji
    inner join juzgado_distrito as jd on
    ji.id_juzgado_distrito=jd.id_juzgado_distrito
    where
    ji.estado=1
    and
    jd.estado=1
    and
    (
        ( pridjuzgadodistrito>0 and ji.id_juzgado_distrito=pridjuzgadodistrito ) or
        ( pridjuzgadodistrito=0 and jd.nombre like concat(prjuzgadodistrito,'%') )
    )
	and
    ji.nombre like concat(prjuzgadoinstancia,'%')
    order by jd.nombre asc, ji.nombre asc
    limit IP, TP;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarplantillacooperativaconfiguracion`()
    NO SQL
select
c.parametro as parametro,
c.valor as valor
from
cooperativa_configuracion as c
where
c.estado=1$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidadetalletalonarioxcabecera`(IN `prcabecera` INT, IN `prestado` INT)
    NO SQL
select
d.id_salida_detalle_talonario as id,
d.id_talonario as id_talonario,
concat(t.tln_serie,"-",t.tln_numero) as contrato,
d.id_venta as id_venta,
IF(d.id_venta,
   if(v.id_tipopago<>3,
		if(v.vnt_contrato_pdf<>"",1,0)+
		if(v.vnt_dni_pdf<>"",1,0)+
		if(v.vnt_foto<>"",1,0)+
		if(v.vnt_cip_pdf<>"",1,0)+
		if(v.vnt_planilla_pdf<>"",1,0)+
		if(v.vnt_letra_pdf<>"",1,0)+
		if(v.vnt_voucher_pdf<>"",1,0)+
		if(v.vnt_autorizacion_pdf<>"",1,0)
   ,
		if(v.vnt_contrato_pdf<>"",1,0)+
		if(v.vnt_dni_pdf<>"",1,0)+
		if(v.vnt_foto<>"",1,0)+
		if(v.vnt_cip_pdf<>"",1,0)+
		if(v.vnt_planilla_pdf<>"",1,0)+
		if(v.vnt_voucher_pdf<>"",1,0)
   )
, "-") as documentos_adjuntos,
if(d.id_venta,
   if(v.id_tipopago<>3,8,6)
, "-") as documentos_totales,
IF(d.id_venta,
   if(
       if(v.id_tipopago<>3,
            if(v.vnt_contrato_pdf<>"",1,0)+
            if(v.vnt_dni_pdf<>"",1,0)+
            if(v.vnt_foto<>"",1,0)+
            if(v.vnt_cip_pdf<>"",1,0)+
            if(v.vnt_planilla_pdf<>"",1,0)+
            if(v.vnt_letra_pdf<>"",1,0)+
            if(v.vnt_voucher_pdf<>"",1,0)+
            if(v.vnt_autorizacion_pdf<>"",1,0)
       ,
            if(v.vnt_contrato_pdf<>"",1,0)+
            if(v.vnt_dni_pdf<>"",1,0)+
            if(v.vnt_foto<>"",1,0)+
            if(v.vnt_cip_pdf<>"",1,0)+
            if(v.vnt_planilla_pdf<>"",1,0)+
            if(v.vnt_voucher_pdf<>"",1,0)
       )
       /
       if(v.id_tipopago<>3,8,6)
   =1, "Tiene todos los documentos completos","Faltan adjuntar documentos")
, "-") as estado_documentos,


d.sdt_estado as id_estado,
case d.sdt_estado
when 1 and sc.sc_estado=1 then "Pendiente"
when 1 and sc.sc_estado=2 then "Devuelto"
when 2 then "Venta"
when 3 then "Anulado"
when sc.sc_estado=3 then "Salida anulada"
end as estado
from
salida_detalle_talonario as d
inner join salida_cabecera as sc on
d.id_salida_cabecera=sc.idsalida_vendedor
inner join talonario as t on
d.id_talonario=t.id_talonario
left join venta as v on
d.id_venta=v.idventa
where
d.id_salida_cabecera=prcabecera
and
((prestado=0 and d.sdt_estado>0) or d.sdt_estado=prestado)
order by d.id_talonario asc$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcreditotipo`()
    NO SQL
BEGIN

select
id_credito_tipo as id,
nombre as nombre
from
credito_tipo
where
estado=1;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcourierxId`(IN `prid` INT)
    NO SQL
begin

select
id_courier as id,
nombre as nombre,
url as url,
estado as estado
from
courier
where
id_courier=prid;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarseguimientocontar`(IN `prcliente` VARCHAR(30) CHARSET utf8, IN `prnumero` VARCHAR(20) CHARSET utf8, IN `prcourier` VARCHAR(20) CHARSET utf8, IN `prestado` VARCHAR(20) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE)
    READS SQL DATA
begin

select
count( distinct s.id_seguimiento) as total
from
seguimiento_documentos as s
inner join courier as c on
s.id_courier=c.id_courier
left join creditos as cr on
s.id_credito=cr.id_credito
left join cliente as cc on
cr.id_cliente=cc.idcliente
left join venta as v on
s.id_venta=v.idventa
left join talonario as t on
v.id_talonario=t.id_talonario
left join cliente as cv on
v.id_cliente=cv.idcliente
where
(cr.estado=1 or v.vnt_estado=1)
and
(
    (prestado=0 and s.estado>0) or
    (prestado=s.estado)
)
and
c.nombre like concat(prcourier,'%')
and
s.numero_seguimiento like concat(prnumero,'%')
and
(
    (prfechainicio is null and prfechafin is null) or
    (s.fecha BETWEEN prfechainicio and prfechafin)
)
and
(
    ( cc.clt_nombre like concat(prcliente,'%') ) or
    ( cv.clt_nombre like concat(prcliente,'%') )
)
order by s.fecha desc, s.id_seguimiento desc;

end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzasmanuales`(IN `prcliente` VARCHAR(50) CHARSET utf8, IN `prdni` VARCHAR(10) CHARSET utf8, IN `prvendedor` VARCHAR(50) CHARSET utf8, IN `prtipo` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpagina` INT, IN `prtotalpagina` INT)
    NO SQL
BEGIN

    DECLARE IP  INT unsigned;
    DECLARE TP  INT unsigned;

    set IP = (prpagina-1)*prtotalpagina;
    set TP=prtotalpagina;

	select
    cm.id_cobranza_manual as id ,
    cm.id_cliente as id_cliente ,
    c.clt_nombre as cliente ,
    cm.id_tipo_cobranza_manual as id_tipo ,
    t.nombre as tipo ,
    cm.fecha as fecha ,
    cm.comprobante as comprobante ,
    cm.id_vendedor as id_vendedor ,
    v.vnd_nombre as vendedor ,
    cm.total as total ,
    cm.observaciones as observaciones
    from
    cobranza_manual as cm
    inner join cliente as c on
    cm.id_cliente=c.idcliente
    inner join cobranza_manual_tipo as t on
    cm.id_tipo_cobranza_manual=t.id_cobranza_manual_tipo
    left join vendedor as v on
    cm.id_vendedor=v.idvendedor
    where
    cm.estado=1
    and
    c.clt_nombre like concat(prcliente,'%')
    and
    c.clt_dni like concat(prdni,'%')
    and
    v.vnd_nombre like concat(prvendedor,'%')
    and
    ( prtipo=0 or t.id_cobranza_manual_tipo=prtipo )
    and
    (
        (prfechainicio is null and prfechafin is null) or
        (cm.fecha BETWEEN prfechainicio and prfechafin)
    )
    order by cm.fecha desc, cm.id_cobranza_manual desc
    limit IP,TP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcomisionescontar`(IN `prvendedor` VARCHAR(25) CHARSET utf8, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prpecosa` VARCHAR(20) CHARSET utf8)
    MODIFIES SQL DATA
BEGIN

select count(*) as total from (
    select
    c.id_vendedor_comision as id,
    c.id_salida as id_salida,
    s.sc_codigo as pecosa,
    c.id_vendedor as id_vendedor,
    vd.vnd_nombre as nombre_vendedor
    from
    vendedor_comision as c
    inner join salida_cabecera as s on
    c.id_salida=s.idsalida_vendedor
    inner join vendedor as vd on
    c.id_vendedor=vd.idvendedor
    where
    s.sc_estado<>3
    and
    vd.vnd_nombre like concat('%',prvendedor,'%')
    and
    s.sc_fecha between prfechainicio and prfechafin
    AND
    s.sc_codigo like concat('%',prpecosa,'%')
    group by c.id_salida, c.id_vendedor
) as total;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarcobranzadetallexmanual`(IN `prcobranza` INT)
    NO SQL
begin
 
	select
    cd.id_cobranza_detalle as id_detalle,
    if(
        cd.id_credito_cronograma=0,
        "Venta",
        if(
            c.tipo=1,
            "Afiliación",
            "Préstamo"
        )
    ) as tipo,
    if(
        cd.id_credito_cronograma=0,
        CONCAT(t.tln_serie,"-",t.tln_numero),
        if(
            c.tipo=1,
            c.codigo,
            CONCAT(c.codigo,"-",LPAD(c.numero,3,"0"))
        )
    ) as codigo,
    if(
        cd.id_credito_cronograma=0,
        vg.id_venta_cronograma,
        cg.id_credito_cronograma
    ) as id_cronograma,
    if(
        cd.id_credito_cronograma=0,
        vg.cng_fecha_vencimiento,
        cg.fecha_vencimiento
    ) as fecha_vencimiento,
    if(
        cd.id_credito_cronograma=0,
        vg.cng_estado,
        cg.estado
    ) as id_estado,
    if(
        cd.id_credito_cronograma=0,
        vg.cng_monto_cuota+vg.cng_interes,
        cg.monto_capital+cg.monto_interes+cg.interes
    ) as monto_total,
	if(
        cd.id_credito_cronograma=0,
        vg.cng_monto_cuota+vg.cng_interes-vg.cng_monto_pagado,
        cg.monto_capital+cg.monto_interes+cg.interes-cg.monto_pagado
    ) as monto_pendiente,
	if(
        cd.id_credito_cronograma=0,
        v.idventa,
        c.id_credito
    ) as id_transaccion,
    cd.monto as monto
    from
    cobranza_detalle as cd
    left join credito_cronograma as cg on
    cd.id_credito_cronograma=cg.id_credito_cronograma
    left join creditos as c on
    cg.id_credito=c.id_credito
    left join venta_cronograma as vg on
    cd.id_venta_cronograma=vg.id_venta_cronograma
    left join venta as v on
    vg.id_venta=v.idventa
    left join talonario as t on
    v.id_talonario=t.id_talonario
    where
    cd.id_cobranza_manual=prcobranza
    order by cd.id_cobranza_detalle asc;
   
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`jeanpierre`@`localhost` PROCEDURE `sp_listarsalidacabeceracontar`(IN `prcodigo` VARCHAR(11) CHARSET utf8, IN `prsucursal` INT, IN `prfechainicio` DATE, IN `prfechafin` DATE, IN `prdestino` VARCHAR(100) CHARSET utf8, IN `prvendedor` VARCHAR(50) CHARSET utf8, IN `prestado` INT)
    READS SQL DATA
select
count(DISTINCT sv.idsalida_vendedor) as total
FROM
salida_cabecera as sv
inner join sucursal as s on
sv.id_sucursal = s.idsucursal
inner join salida_detalle_vendedor as sdetv ON
sv.idsalida_vendedor = sdetv.id_salida_cabecera
inner join vendedor as v ON
sdetv.id_vendedor = v.idvendedor
where
((prestado=0 and sv.sc_estado<>3) or sv.sc_estado=prestado)
AND
(prdestino is null or sv.sc_destino like concat('%',prdestino,'%'))
and
(prcodigo is null or convert(sv.sc_codigo,char(8)) like concat('%',prcodigo,'%'))
AND
(prsucursal is null or sv.id_sucursal=prsucursal)
AND
((prfechainicio is null and prfechafin is null) OR
(prfechainicio is null and sv.sc_fecha<=prfechafin) OR
(prfechafin is null and sv.sc_fecha>=prfechainicio) OR
(sv.sc_fecha between prfechainicio and prfechafin))
AND
(sdetv.id_vendedor in (select idvendedor from vendedor as v2 where v2.vnd_nombre like concat('%',prvendedor,'%')))$$
DELIMITER ;
